// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SY {

namespace {

const ::google::protobuf::Descriptor* GameDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameStationBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameStationBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerPersonalSceneRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerPersonalSceneRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientConfirmStartReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientConfirmStartReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerFirstSceneRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerFirstSceneRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScreenResolution_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScreenResolution_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameChatSection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameChatSection_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameTelevisonResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameTelevisonResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserMoneySync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserMoneySync_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeWeaponReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeWeaponReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeWeaponRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeWeaponRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuySkillReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuySkillReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuySkillRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuySkillRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyAutoAttackReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyAutoAttackReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyHammerLevelReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyHammerLevelReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyHammerLevelRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyHammerLevelRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* KingCriticalHit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KingCriticalHit_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyAutoAttackRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyAutoAttackRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeSkillStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeSkillStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillHit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillHit_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerHit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerHit_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerHitSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerHitSync_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonsterIncoming_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonsterIncoming_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerHitIncoming_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerHitIncoming_reflection_ = NULL;
const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonsterTrace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonsterTrace_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonsterTraces_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonsterTraces_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllMonsterId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllMonsterId_reflection_ = NULL;
const ::google::protobuf::Descriptor* WildSkillStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WildSkillStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* WildSkillWeaponCostModify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WildSkillWeaponCostModify_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadcastS2C_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadcastS2C_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnUserMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnUserMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* HallGsAdditionalGameData1Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HallGsAdditionalGameData1Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdditionalGameDataRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdditionalGameDataRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefreshUserFishExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefreshUserFishExp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SkillStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReturnReasonType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameMessage_2eproto() {
  protobuf_AddDesc_GameMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameMessage.proto");
  GOOGLE_CHECK(file != NULL);
  GameDataReq_descriptor_ = file->message_type(0);
  static const int GameDataReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDataReq, reg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDataReq, remote_ip_),
  };
  GameDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameDataReq_descriptor_,
      GameDataReq::default_instance_,
      GameDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameDataReq));
  SkillInfo_descriptor_ = file->message_type(1);
  static const int SkillInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, status_),
  };
  SkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillInfo_descriptor_,
      SkillInfo::default_instance_,
      SkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillInfo));
  GameStationBase_descriptor_ = file->message_type(2);
  static const int GameStationBase_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStationBase, playing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStationBase, sceneindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStationBase, onlinechair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStationBase, usermoneynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStationBase, userticketnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStationBase, weaponcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStationBase, skillinf_),
  };
  GameStationBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameStationBase_descriptor_,
      GameStationBase::default_instance_,
      GameStationBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStationBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStationBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameStationBase));
  ServerPersonalSceneRsp_descriptor_ = file->message_type(3);
  static const int ServerPersonalSceneRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerPersonalSceneRsp, reg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerPersonalSceneRsp, stationbase_),
  };
  ServerPersonalSceneRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerPersonalSceneRsp_descriptor_,
      ServerPersonalSceneRsp::default_instance_,
      ServerPersonalSceneRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerPersonalSceneRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerPersonalSceneRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerPersonalSceneRsp));
  ClientConfirmStartReq_descriptor_ = file->message_type(4);
  static const int ClientConfirmStartReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfirmStartReq, confirmstart_),
  };
  ClientConfirmStartReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientConfirmStartReq_descriptor_,
      ClientConfirmStartReq::default_instance_,
      ClientConfirmStartReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfirmStartReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConfirmStartReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientConfirmStartReq));
  ServerFirstSceneRsp_descriptor_ = file->message_type(5);
  static const int ServerFirstSceneRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerFirstSceneRsp, first_scene_),
  };
  ServerFirstSceneRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerFirstSceneRsp_descriptor_,
      ServerFirstSceneRsp::default_instance_,
      ServerFirstSceneRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerFirstSceneRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerFirstSceneRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerFirstSceneRsp));
  ScreenResolution_descriptor_ = file->message_type(6);
  static const int ScreenResolution_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenResolution, client_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenResolution, client_height_),
  };
  ScreenResolution_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScreenResolution_descriptor_,
      ScreenResolution::default_instance_,
      ScreenResolution_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenResolution, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenResolution, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScreenResolution));
  GameChatSection_descriptor_ = file->message_type(7);
  static const int GameChatSection_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameChatSection, section_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameChatSection, section_words_),
  };
  GameChatSection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameChatSection_descriptor_,
      GameChatSection::default_instance_,
      GameChatSection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameChatSection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameChatSection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameChatSection));
  GameTelevisonResult_descriptor_ = file->message_type(8);
  static const int GameTelevisonResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTelevisonResult, content_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTelevisonResult, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTelevisonResult, content_info_),
  };
  GameTelevisonResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameTelevisonResult_descriptor_,
      GameTelevisonResult::default_instance_,
      GameTelevisonResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTelevisonResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTelevisonResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameTelevisonResult));
  UserMoneySync_descriptor_ = file->message_type(9);
  static const int UserMoneySync_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMoneySync, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMoneySync, usermoneynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMoneySync, userticketnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMoneySync, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMoneySync, exp_),
  };
  UserMoneySync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserMoneySync_descriptor_,
      UserMoneySync::default_instance_,
      UserMoneySync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMoneySync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserMoneySync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserMoneySync));
  ChangeWeaponReq_descriptor_ = file->message_type(10);
  static const int ChangeWeaponReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeWeaponReq, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeWeaponReq, weaponid_),
  };
  ChangeWeaponReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeWeaponReq_descriptor_,
      ChangeWeaponReq::default_instance_,
      ChangeWeaponReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeWeaponReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeWeaponReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeWeaponReq));
  ChangeWeaponRsp_descriptor_ = file->message_type(11);
  static const int ChangeWeaponRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeWeaponRsp, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeWeaponRsp, weaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeWeaponRsp, result_),
  };
  ChangeWeaponRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeWeaponRsp_descriptor_,
      ChangeWeaponRsp::default_instance_,
      ChangeWeaponRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeWeaponRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeWeaponRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeWeaponRsp));
  BuySkillReq_descriptor_ = file->message_type(12);
  static const int BuySkillReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuySkillReq, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuySkillReq, skillid_),
  };
  BuySkillReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuySkillReq_descriptor_,
      BuySkillReq::default_instance_,
      BuySkillReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuySkillReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuySkillReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuySkillReq));
  BuySkillRsp_descriptor_ = file->message_type(13);
  static const int BuySkillRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuySkillRsp, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuySkillRsp, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuySkillRsp, result_),
  };
  BuySkillRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuySkillRsp_descriptor_,
      BuySkillRsp::default_instance_,
      BuySkillRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuySkillRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuySkillRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuySkillRsp));
  BuyAutoAttackReq_descriptor_ = file->message_type(14);
  static const int BuyAutoAttackReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyAutoAttackReq, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyAutoAttackReq, autoattacklevel_),
  };
  BuyAutoAttackReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyAutoAttackReq_descriptor_,
      BuyAutoAttackReq::default_instance_,
      BuyAutoAttackReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyAutoAttackReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyAutoAttackReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyAutoAttackReq));
  BuyHammerLevelReq_descriptor_ = file->message_type(15);
  static const int BuyHammerLevelReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyHammerLevelReq, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyHammerLevelReq, hammerlevel_),
  };
  BuyHammerLevelReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyHammerLevelReq_descriptor_,
      BuyHammerLevelReq::default_instance_,
      BuyHammerLevelReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyHammerLevelReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyHammerLevelReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyHammerLevelReq));
  BuyHammerLevelRsp_descriptor_ = file->message_type(16);
  static const int BuyHammerLevelRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyHammerLevelRsp, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyHammerLevelRsp, hammerlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyHammerLevelRsp, result_),
  };
  BuyHammerLevelRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyHammerLevelRsp_descriptor_,
      BuyHammerLevelRsp::default_instance_,
      BuyHammerLevelRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyHammerLevelRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyHammerLevelRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyHammerLevelRsp));
  KingCriticalHit_descriptor_ = file->message_type(17);
  static const int KingCriticalHit_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingCriticalHit, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingCriticalHit, iscriticalhit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingCriticalHit, weaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingCriticalHit, monsteridlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingCriticalHit, usermoneygain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingCriticalHit, userticketgain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingCriticalHit, usermoneynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingCriticalHit, userticketnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingCriticalHit, animmidlast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingCriticalHit, animendlast_),
  };
  KingCriticalHit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KingCriticalHit_descriptor_,
      KingCriticalHit::default_instance_,
      KingCriticalHit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingCriticalHit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingCriticalHit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KingCriticalHit));
  BuyAutoAttackRsp_descriptor_ = file->message_type(18);
  static const int BuyAutoAttackRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyAutoAttackRsp, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyAutoAttackRsp, autoattacklevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyAutoAttackRsp, result_),
  };
  BuyAutoAttackRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyAutoAttackRsp_descriptor_,
      BuyAutoAttackRsp::default_instance_,
      BuyAutoAttackRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyAutoAttackRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyAutoAttackRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyAutoAttackRsp));
  ChangeSkillStatus_descriptor_ = file->message_type(19);
  static const int ChangeSkillStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSkillStatus, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSkillStatus, skillinf_),
  };
  ChangeSkillStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeSkillStatus_descriptor_,
      ChangeSkillStatus::default_instance_,
      ChangeSkillStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSkillStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSkillStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeSkillStatus));
  SkillHit_descriptor_ = file->message_type(20);
  static const int SkillHit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHit, triggerskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHit, monsterid_),
  };
  SkillHit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillHit_descriptor_,
      SkillHit::default_instance_,
      SkillHit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillHit));
  PlayerHit_descriptor_ = file->message_type(21);
  static const int PlayerHit_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHit, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHit, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHit, weaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHit, skilllist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHit, isrobot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHit, haspayweaponcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHit, monsteridlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHit, skillhitlisthaspay_),
  };
  PlayerHit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerHit_descriptor_,
      PlayerHit::default_instance_,
      PlayerHit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerHit));
  PlayerHitSync_descriptor_ = file->message_type(22);
  static const int PlayerHitSync_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHitSync, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHitSync, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHitSync, weaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHitSync, skilllist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHitSync, usermoneynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHitSync, userticketnum_),
  };
  PlayerHitSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerHitSync_descriptor_,
      PlayerHitSync::default_instance_,
      PlayerHitSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHitSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHitSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerHitSync));
  MonsterIncoming_descriptor_ = file->message_type(23);
  static const int MonsterIncoming_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterIncoming, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterIncoming, killrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterIncoming, usermoneynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterIncoming, userticketnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterIncoming, weaponcostex_),
  };
  MonsterIncoming_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonsterIncoming_descriptor_,
      MonsterIncoming::default_instance_,
      MonsterIncoming_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterIncoming, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterIncoming, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonsterIncoming));
  PlayerHitIncoming_descriptor_ = file->message_type(24);
  static const int PlayerHitIncoming_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHitIncoming, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHitIncoming, incominglist_),
  };
  PlayerHitIncoming_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerHitIncoming_descriptor_,
      PlayerHitIncoming::default_instance_,
      PlayerHitIncoming_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHitIncoming, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerHitIncoming, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerHitIncoming));
  Point_descriptor_ = file->message_type(25);
  static const int Point_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
  };
  Point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point));
  MonsterTrace_descriptor_ = file->message_type(26);
  static const int MonsterTrace_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterTrace, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterTrace, typeid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterTrace, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterTrace, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterTrace, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterTrace, respawnindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterTrace, respawnposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterTrace, movedestination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterTrace, escapsedestination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterTrace, delaymovetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterTrace, delayescapetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterTrace, speedrate_),
  };
  MonsterTrace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonsterTrace_descriptor_,
      MonsterTrace::default_instance_,
      MonsterTrace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterTrace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterTrace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonsterTrace));
  MonsterTraces_descriptor_ = file->message_type(27);
  static const int MonsterTraces_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterTraces, isgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterTraces, traces_),
  };
  MonsterTraces_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonsterTraces_descriptor_,
      MonsterTraces::default_instance_,
      MonsterTraces_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterTraces, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterTraces, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonsterTraces));
  ChangeScene_descriptor_ = file->message_type(28);
  static const int ChangeScene_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeScene, sceneindex_),
  };
  ChangeScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeScene_descriptor_,
      ChangeScene::default_instance_,
      ChangeScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeScene));
  AllMonsterId_descriptor_ = file->message_type(29);
  static const int AllMonsterId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllMonsterId, id_),
  };
  AllMonsterId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllMonsterId_descriptor_,
      AllMonsterId::default_instance_,
      AllMonsterId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllMonsterId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllMonsterId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllMonsterId));
  WildSkillStatus_descriptor_ = file->message_type(30);
  static const int WildSkillStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WildSkillStatus, wild_skill_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WildSkillStatus, remain_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WildSkillStatus, wild_skill_cost_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WildSkillStatus, wild_monster_id_),
  };
  WildSkillStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WildSkillStatus_descriptor_,
      WildSkillStatus::default_instance_,
      WildSkillStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WildSkillStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WildSkillStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WildSkillStatus));
  WildSkillWeaponCostModify_descriptor_ = file->message_type(31);
  static const int WildSkillWeaponCostModify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WildSkillWeaponCostModify, wild_skill_weapon_cost_modify_),
  };
  WildSkillWeaponCostModify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WildSkillWeaponCostModify_descriptor_,
      WildSkillWeaponCostModify::default_instance_,
      WildSkillWeaponCostModify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WildSkillWeaponCostModify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WildSkillWeaponCostModify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WildSkillWeaponCostModify));
  BroadcastS2C_descriptor_ = file->message_type(32);
  static const int BroadcastS2C_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastS2C, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastS2C, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastS2C, weaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastS2C, monstername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastS2C, rewardmoneynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastS2C, rewardticketnum_),
  };
  BroadcastS2C_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadcastS2C_descriptor_,
      BroadcastS2C::default_instance_,
      BroadcastS2C_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastS2C, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastS2C, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadcastS2C));
  ReturnUserMoney_descriptor_ = file->message_type(33);
  static const int ReturnUserMoney_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnUserMoney, chairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnUserMoney, returnreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnUserMoney, returndata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnUserMoney, returnusermoneynum_),
  };
  ReturnUserMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnUserMoney_descriptor_,
      ReturnUserMoney::default_instance_,
      ReturnUserMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnUserMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnUserMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnUserMoney));
  HallGsAdditionalGameData1Rsp_descriptor_ = file->message_type(34);
  static const int HallGsAdditionalGameData1Rsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallGsAdditionalGameData1Rsp, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallGsAdditionalGameData1Rsp, user_dbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallGsAdditionalGameData1Rsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallGsAdditionalGameData1Rsp, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallGsAdditionalGameData1Rsp, add_game_data_),
  };
  HallGsAdditionalGameData1Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HallGsAdditionalGameData1Rsp_descriptor_,
      HallGsAdditionalGameData1Rsp::default_instance_,
      HallGsAdditionalGameData1Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallGsAdditionalGameData1Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallGsAdditionalGameData1Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HallGsAdditionalGameData1Rsp));
  AdditionalGameDataRsp_descriptor_ = file->message_type(35);
  static const int AdditionalGameDataRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdditionalGameDataRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdditionalGameDataRsp, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdditionalGameDataRsp, user_dbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdditionalGameDataRsp, additional_data_),
  };
  AdditionalGameDataRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdditionalGameDataRsp_descriptor_,
      AdditionalGameDataRsp::default_instance_,
      AdditionalGameDataRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdditionalGameDataRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdditionalGameDataRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdditionalGameDataRsp));
  RefreshUserFishExp_descriptor_ = file->message_type(36);
  static const int RefreshUserFishExp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshUserFishExp, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshUserFishExp, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshUserFishExp, exp_),
  };
  RefreshUserFishExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefreshUserFishExp_descriptor_,
      RefreshUserFishExp::default_instance_,
      RefreshUserFishExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshUserFishExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshUserFishExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefreshUserFishExp));
  ArenaInfo_descriptor_ = file->message_type(37);
  static const int ArenaInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, min_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, rule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, name_),
  };
  ArenaInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaInfo_descriptor_,
      ArenaInfo::default_instance_,
      ArenaInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaInfo));
  SkillStatus_descriptor_ = file->enum_type(0);
  ReturnReasonType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameDataReq_descriptor_, &GameDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillInfo_descriptor_, &SkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameStationBase_descriptor_, &GameStationBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerPersonalSceneRsp_descriptor_, &ServerPersonalSceneRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientConfirmStartReq_descriptor_, &ClientConfirmStartReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerFirstSceneRsp_descriptor_, &ServerFirstSceneRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScreenResolution_descriptor_, &ScreenResolution::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameChatSection_descriptor_, &GameChatSection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameTelevisonResult_descriptor_, &GameTelevisonResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserMoneySync_descriptor_, &UserMoneySync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeWeaponReq_descriptor_, &ChangeWeaponReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeWeaponRsp_descriptor_, &ChangeWeaponRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuySkillReq_descriptor_, &BuySkillReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuySkillRsp_descriptor_, &BuySkillRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyAutoAttackReq_descriptor_, &BuyAutoAttackReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyHammerLevelReq_descriptor_, &BuyHammerLevelReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyHammerLevelRsp_descriptor_, &BuyHammerLevelRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KingCriticalHit_descriptor_, &KingCriticalHit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyAutoAttackRsp_descriptor_, &BuyAutoAttackRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeSkillStatus_descriptor_, &ChangeSkillStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillHit_descriptor_, &SkillHit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerHit_descriptor_, &PlayerHit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerHitSync_descriptor_, &PlayerHitSync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonsterIncoming_descriptor_, &MonsterIncoming::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerHitIncoming_descriptor_, &PlayerHitIncoming::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonsterTrace_descriptor_, &MonsterTrace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonsterTraces_descriptor_, &MonsterTraces::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeScene_descriptor_, &ChangeScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllMonsterId_descriptor_, &AllMonsterId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WildSkillStatus_descriptor_, &WildSkillStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WildSkillWeaponCostModify_descriptor_, &WildSkillWeaponCostModify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadcastS2C_descriptor_, &BroadcastS2C::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnUserMoney_descriptor_, &ReturnUserMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HallGsAdditionalGameData1Rsp_descriptor_, &HallGsAdditionalGameData1Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdditionalGameDataRsp_descriptor_, &AdditionalGameDataRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefreshUserFishExp_descriptor_, &RefreshUserFishExp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaInfo_descriptor_, &ArenaInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameMessage_2eproto() {
  delete GameDataReq::default_instance_;
  delete GameDataReq_reflection_;
  delete SkillInfo::default_instance_;
  delete SkillInfo_reflection_;
  delete GameStationBase::default_instance_;
  delete GameStationBase_reflection_;
  delete ServerPersonalSceneRsp::default_instance_;
  delete ServerPersonalSceneRsp_reflection_;
  delete ClientConfirmStartReq::default_instance_;
  delete ClientConfirmStartReq_reflection_;
  delete ServerFirstSceneRsp::default_instance_;
  delete ServerFirstSceneRsp_reflection_;
  delete ScreenResolution::default_instance_;
  delete ScreenResolution_reflection_;
  delete GameChatSection::default_instance_;
  delete GameChatSection_reflection_;
  delete GameTelevisonResult::default_instance_;
  delete GameTelevisonResult_reflection_;
  delete UserMoneySync::default_instance_;
  delete UserMoneySync_reflection_;
  delete ChangeWeaponReq::default_instance_;
  delete ChangeWeaponReq_reflection_;
  delete ChangeWeaponRsp::default_instance_;
  delete ChangeWeaponRsp_reflection_;
  delete BuySkillReq::default_instance_;
  delete BuySkillReq_reflection_;
  delete BuySkillRsp::default_instance_;
  delete BuySkillRsp_reflection_;
  delete BuyAutoAttackReq::default_instance_;
  delete BuyAutoAttackReq_reflection_;
  delete BuyHammerLevelReq::default_instance_;
  delete BuyHammerLevelReq_reflection_;
  delete BuyHammerLevelRsp::default_instance_;
  delete BuyHammerLevelRsp_reflection_;
  delete KingCriticalHit::default_instance_;
  delete KingCriticalHit_reflection_;
  delete BuyAutoAttackRsp::default_instance_;
  delete BuyAutoAttackRsp_reflection_;
  delete ChangeSkillStatus::default_instance_;
  delete ChangeSkillStatus_reflection_;
  delete SkillHit::default_instance_;
  delete SkillHit_reflection_;
  delete PlayerHit::default_instance_;
  delete PlayerHit_reflection_;
  delete PlayerHitSync::default_instance_;
  delete PlayerHitSync_reflection_;
  delete MonsterIncoming::default_instance_;
  delete MonsterIncoming_reflection_;
  delete PlayerHitIncoming::default_instance_;
  delete PlayerHitIncoming_reflection_;
  delete Point::default_instance_;
  delete Point_reflection_;
  delete MonsterTrace::default_instance_;
  delete MonsterTrace_reflection_;
  delete MonsterTraces::default_instance_;
  delete MonsterTraces_reflection_;
  delete ChangeScene::default_instance_;
  delete ChangeScene_reflection_;
  delete AllMonsterId::default_instance_;
  delete AllMonsterId_reflection_;
  delete WildSkillStatus::default_instance_;
  delete WildSkillStatus_reflection_;
  delete WildSkillWeaponCostModify::default_instance_;
  delete WildSkillWeaponCostModify_reflection_;
  delete BroadcastS2C::default_instance_;
  delete BroadcastS2C_reflection_;
  delete ReturnUserMoney::default_instance_;
  delete ReturnUserMoney_reflection_;
  delete HallGsAdditionalGameData1Rsp::default_instance_;
  delete HallGsAdditionalGameData1Rsp_reflection_;
  delete AdditionalGameDataRsp::default_instance_;
  delete AdditionalGameDataRsp_reflection_;
  delete RefreshUserFishExp::default_instance_;
  delete RefreshUserFishExp_reflection_;
  delete ArenaInfo::default_instance_;
  delete ArenaInfo_reflection_;
}

void protobuf_AddDesc_GameMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021GameMessage.proto\022\002SY\"2\n\013GameDataReq\022\020"
    "\n\010reg_type\030\001 \002(\005\022\021\n\tremote_ip\030\002 \001(\r\"=\n\tS"
    "killInfo\022\017\n\007SkillID\030\001 \001(\005\022\037\n\006Status\030\002 \001("
    "\0162\017.SY.SkillStatus\"\255\001\n\017GameStationBase\022\017"
    "\n\007Playing\030\001 \001(\010\022\022\n\nSceneIndex\030\002 \001(\005\022\023\n\013O"
    "nLineChair\030\003 \003(\010\022\024\n\014UserMoneyNum\030\004 \003(\003\022\025"
    "\n\rUserTicketNum\030\005 \003(\003\022\022\n\nWeaponCost\030\006 \003("
    "\005\022\037\n\010SkillInf\030\007 \003(\0132\r.SY.SkillInfo\"T\n\026Se"
    "rverPersonalSceneRsp\022\020\n\010reg_type\030\001 \002(\005\022("
    "\n\013StationBase\030\002 \002(\0132\023.SY.GameStationBase"
    "\"-\n\025ClientConfirmStartReq\022\024\n\014ConfirmStar"
    "t\030\001 \001(\005\"F\n\023ServerFirstSceneRsp\022/\n\013first_"
    "scene\030\001 \001(\0132\032.SY.ServerPersonalSceneRsp\""
    "\?\n\020ScreenResolution\022\024\n\014CLIENT_WIDTH\030\001 \001("
    "\005\022\025\n\rCLIENT_HEIGHT\030\002 \001(\005\">\n\017GameChatSect"
    "ion\022\024\n\014section_type\030\001 \002(\005\022\025\n\rsection_wor"
    "ds\030\002 \001(\t\"g\n\023GameTelevisonResult\022\024\n\014conte"
    "nt_type\030\001 \002(\005\022\017\n\007game_id\030\002 \002(\005\022)\n\014conten"
    "t_info\030\003 \003(\0132\023.SY.GameChatSection\"i\n\rUse"
    "rMoneySync\022\017\n\007ChairID\030\001 \002(\005\022\024\n\014UserMoney"
    "Num\030\002 \001(\003\022\025\n\rUserTicketNum\030\003 \001(\003\022\r\n\005leve"
    "l\030\004 \001(\005\022\013\n\003exp\030\005 \001(\004\"4\n\017ChangeWeaponReq\022"
    "\017\n\007ChairID\030\001 \001(\005\022\020\n\010WeaponID\030\002 \001(\005\"D\n\017Ch"
    "angeWeaponRsp\022\017\n\007ChairID\030\001 \001(\005\022\020\n\010Weapon"
    "ID\030\002 \001(\005\022\016\n\006Result\030\003 \001(\005\"/\n\013BuySkillReq\022"
    "\017\n\007ChairID\030\001 \001(\005\022\017\n\007SkillID\030\002 \001(\005\"\?\n\013Buy"
    "SkillRsp\022\017\n\007ChairID\030\001 \001(\005\022\017\n\007SkillID\030\002 \001"
    "(\005\022\016\n\006Result\030\003 \001(\005\"<\n\020BuyAutoAttackReq\022\017"
    "\n\007ChairID\030\001 \001(\005\022\027\n\017AutoAttackLevel\030\002 \001(\005"
    "\"9\n\021BuyHammerLevelReq\022\017\n\007ChairID\030\001 \001(\005\022\023"
    "\n\013HammerLevel\030\002 \001(\005\"I\n\021BuyHammerLevelRsp"
    "\022\017\n\007ChairID\030\001 \001(\005\022\023\n\013HammerLevel\030\002 \001(\005\022\016"
    "\n\006Result\030\003 \001(\005\"\350\001\n\017KingCriticalHit\022\017\n\007Ch"
    "airID\030\001 \001(\005\022\025\n\risCriticalHit\030\002 \002(\005\022\020\n\010We"
    "aponID\030\003 \001(\005\022\025\n\rMonsterIDList\030\004 \003(\005\022\025\n\rU"
    "serMoneyGain\030\005 \001(\003\022\026\n\016UserTicketGain\030\006 \001"
    "(\003\022\024\n\014UserMoneyNum\030\007 \001(\003\022\025\n\rUserTicketNu"
    "m\030\010 \001(\003\022\023\n\013AnimMidLast\030\t \001(\005\022\023\n\013AnimEndL"
    "ast\030\n \001(\005\"L\n\020BuyAutoAttackRsp\022\017\n\007ChairID"
    "\030\001 \001(\005\022\027\n\017AutoAttackLevel\030\002 \001(\005\022\016\n\006Resul"
    "t\030\003 \001(\005\"E\n\021ChangeSkillStatus\022\017\n\007ChairID\030"
    "\001 \001(\005\022\037\n\010SkillInf\030\002 \003(\0132\r.SY.SkillInfo\"5"
    "\n\010SkillHit\022\026\n\016TriggerSkillID\030\001 \001(\005\022\021\n\tMo"
    "nsterID\030\002 \003(\005\"\300\001\n\tPlayerHit\022\017\n\007ChairID\030\001"
    " \001(\005\022\021\n\tMonsterID\030\002 \001(\005\022\020\n\010WeaponID\030\003 \001("
    "\005\022\037\n\tSkillList\030\004 \003(\0132\014.SY.SkillHit\022\017\n\007Is"
    "Robot\030\005 \001(\010\022\030\n\020HasPayWeaponCost\030\006 \001(\010\022\025\n"
    "\rMonsterIDList\030\007 \003(\005\022\032\n\022SkillHitListHasP"
    "ay\030\010 \003(\005\"\223\001\n\rPlayerHitSync\022\017\n\007ChairID\030\001 "
    "\001(\005\022\021\n\tMonsterID\030\002 \001(\005\022\020\n\010WeaponID\030\003 \001(\005"
    "\022\037\n\tSkillList\030\004 \003(\0132\014.SY.SkillHit\022\024\n\014Use"
    "rMoneyNum\030\005 \001(\003\022\025\n\rUserTicketNum\030\006 \001(\003\"y"
    "\n\017MonsterIncoming\022\021\n\tMonsterID\030\001 \001(\005\022\020\n\010"
    "KillRate\030\002 \001(\005\022\024\n\014UserMoneyNum\030\003 \001(\005\022\025\n\r"
    "UserTicketNum\030\004 \001(\005\022\024\n\014WeaponCostEx\030\005 \001("
    "\005\"O\n\021PlayerHitIncoming\022\017\n\007ChairID\030\001 \001(\005\022"
    ")\n\014IncomingList\030\002 \003(\0132\023.SY.MonsterIncomi"
    "ng\"\035\n\005Point\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\"\246\002\n\014Mo"
    "nsterTrace\022\021\n\tMonsterID\030\001 \001(\005\022\016\n\006TypeID\030"
    "\002 \001(\005\022\r\n\005CurHP\030\003 \001(\005\022\r\n\005MaxHP\030\004 \001(\005\022\r\n\005S"
    "peed\030\005 \001(\002\022\024\n\014RespawnIndex\030\006 \001(\005\022\"\n\017Resp"
    "awnPosition\030\007 \003(\0132\t.SY.Point\022\"\n\017MoveDest"
    "ination\030\010 \003(\0132\t.SY.Point\022%\n\022EscapseDesti"
    "nation\030\t \003(\0132\t.SY.Point\022\025\n\rDelayMoveTime"
    "\030\n \001(\002\022\027\n\017DelayEscapeTime\030\013 \001(\002\022\021\n\tSpeed"
    "Rate\030\014 \001(\002\"B\n\rMonsterTraces\022\017\n\007IsGroup\030\001"
    " \002(\010\022 \n\006Traces\030\002 \003(\0132\020.SY.MonsterTrace\"!"
    "\n\013ChangeScene\022\022\n\nSceneIndex\030\001 \002(\005\"\032\n\014All"
    "MonsterId\022\n\n\002id\030\001 \001(\005\"\212\001\n\017WildSkillStatu"
    "s\022\031\n\021wild_skill_status\030\001 \001(\005\022\023\n\013remain_t"
    "ime\030\002 \001(\005\022\034\n\024wild_skill_cost_rate\030\003 \001(\002\022"
    ")\n\017wild_monster_id\030\004 \003(\0132\020.SY.AllMonster"
    "Id\"B\n\031WildSkillWeaponCostModify\022%\n\035wild_"
    "skill_weapon_cost_modify\030\001 \001(\005\"\206\001\n\014Broad"
    "castS2C\022\014\n\004Text\030\001 \001(\t\022\020\n\010UserName\030\002 \001(\t\022"
    "\020\n\010WeaponID\030\003 \001(\005\022\023\n\013MonsterName\030\004 \001(\t\022\026"
    "\n\016RewardMoneyNum\030\005 \001(\005\022\027\n\017RewardTicketNu"
    "m\030\006 \001(\005\"~\n\017ReturnUserMoney\022\017\n\007ChairID\030\001 "
    "\001(\005\022*\n\014ReturnReason\030\002 \001(\0162\024.SY.ReturnRea"
    "sonType\022\022\n\nReturnData\030\003 \001(\005\022\032\n\022ReturnUse"
    "rMoneyNum\030\004 \001(\003\"s\n\034HallGsAdditionalGameD"
    "ata1Rsp\022\r\n\005index\030\001 \002(\r\022\021\n\tuser_dbid\030\002 \002("
    "\005\022\014\n\004type\030\003 \001(\005\022\014\n\004size\030\004 \001(\005\022\025\n\radd_gam"
    "e_data\030\005 \001(\t\"d\n\025AdditionalGameDataRsp\022\016\n"
    "\006result\030\001 \002(\005\022\017\n\007game_id\030\002 \002(\005\022\021\n\tuser_d"
    "bid\030\003 \002(\005\022\027\n\017additional_data\030\004 \001(\t\"@\n\022Re"
    "freshUserFishExp\022\016\n\006userID\030\001 \002(\005\022\r\n\005leve"
    "l\030\002 \002(\005\022\013\n\003exp\030\003 \001(\004\"t\n\tArenaInfo\022\n\n\002id\030"
    "\001 \002(\005\022\017\n\007game_id\030\002 \002(\005\022\014\n\004type\030\003 \002(\005\022\021\n\t"
    "min_money\030\004 \001(\005\022\014\n\004rule\030\005 \001(\003\022\r\n\005level\030\006"
    " \001(\005\022\014\n\004name\030\007 \001(\t*6\n\013SkillStatus\022\014\n\010InA"
    "ctive\020\000\022\013\n\007Actived\020\001\022\014\n\010Disabled\020\002*2\n\020Re"
    "turnReasonType\022\014\n\010RRT_None\020\000\022\020\n\014RRT_BuyS"
    "kill\020\001", 3726);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameMessage.proto", &protobuf_RegisterTypes);
  GameDataReq::default_instance_ = new GameDataReq();
  SkillInfo::default_instance_ = new SkillInfo();
  GameStationBase::default_instance_ = new GameStationBase();
  ServerPersonalSceneRsp::default_instance_ = new ServerPersonalSceneRsp();
  ClientConfirmStartReq::default_instance_ = new ClientConfirmStartReq();
  ServerFirstSceneRsp::default_instance_ = new ServerFirstSceneRsp();
  ScreenResolution::default_instance_ = new ScreenResolution();
  GameChatSection::default_instance_ = new GameChatSection();
  GameTelevisonResult::default_instance_ = new GameTelevisonResult();
  UserMoneySync::default_instance_ = new UserMoneySync();
  ChangeWeaponReq::default_instance_ = new ChangeWeaponReq();
  ChangeWeaponRsp::default_instance_ = new ChangeWeaponRsp();
  BuySkillReq::default_instance_ = new BuySkillReq();
  BuySkillRsp::default_instance_ = new BuySkillRsp();
  BuyAutoAttackReq::default_instance_ = new BuyAutoAttackReq();
  BuyHammerLevelReq::default_instance_ = new BuyHammerLevelReq();
  BuyHammerLevelRsp::default_instance_ = new BuyHammerLevelRsp();
  KingCriticalHit::default_instance_ = new KingCriticalHit();
  BuyAutoAttackRsp::default_instance_ = new BuyAutoAttackRsp();
  ChangeSkillStatus::default_instance_ = new ChangeSkillStatus();
  SkillHit::default_instance_ = new SkillHit();
  PlayerHit::default_instance_ = new PlayerHit();
  PlayerHitSync::default_instance_ = new PlayerHitSync();
  MonsterIncoming::default_instance_ = new MonsterIncoming();
  PlayerHitIncoming::default_instance_ = new PlayerHitIncoming();
  Point::default_instance_ = new Point();
  MonsterTrace::default_instance_ = new MonsterTrace();
  MonsterTraces::default_instance_ = new MonsterTraces();
  ChangeScene::default_instance_ = new ChangeScene();
  AllMonsterId::default_instance_ = new AllMonsterId();
  WildSkillStatus::default_instance_ = new WildSkillStatus();
  WildSkillWeaponCostModify::default_instance_ = new WildSkillWeaponCostModify();
  BroadcastS2C::default_instance_ = new BroadcastS2C();
  ReturnUserMoney::default_instance_ = new ReturnUserMoney();
  HallGsAdditionalGameData1Rsp::default_instance_ = new HallGsAdditionalGameData1Rsp();
  AdditionalGameDataRsp::default_instance_ = new AdditionalGameDataRsp();
  RefreshUserFishExp::default_instance_ = new RefreshUserFishExp();
  ArenaInfo::default_instance_ = new ArenaInfo();
  GameDataReq::default_instance_->InitAsDefaultInstance();
  SkillInfo::default_instance_->InitAsDefaultInstance();
  GameStationBase::default_instance_->InitAsDefaultInstance();
  ServerPersonalSceneRsp::default_instance_->InitAsDefaultInstance();
  ClientConfirmStartReq::default_instance_->InitAsDefaultInstance();
  ServerFirstSceneRsp::default_instance_->InitAsDefaultInstance();
  ScreenResolution::default_instance_->InitAsDefaultInstance();
  GameChatSection::default_instance_->InitAsDefaultInstance();
  GameTelevisonResult::default_instance_->InitAsDefaultInstance();
  UserMoneySync::default_instance_->InitAsDefaultInstance();
  ChangeWeaponReq::default_instance_->InitAsDefaultInstance();
  ChangeWeaponRsp::default_instance_->InitAsDefaultInstance();
  BuySkillReq::default_instance_->InitAsDefaultInstance();
  BuySkillRsp::default_instance_->InitAsDefaultInstance();
  BuyAutoAttackReq::default_instance_->InitAsDefaultInstance();
  BuyHammerLevelReq::default_instance_->InitAsDefaultInstance();
  BuyHammerLevelRsp::default_instance_->InitAsDefaultInstance();
  KingCriticalHit::default_instance_->InitAsDefaultInstance();
  BuyAutoAttackRsp::default_instance_->InitAsDefaultInstance();
  ChangeSkillStatus::default_instance_->InitAsDefaultInstance();
  SkillHit::default_instance_->InitAsDefaultInstance();
  PlayerHit::default_instance_->InitAsDefaultInstance();
  PlayerHitSync::default_instance_->InitAsDefaultInstance();
  MonsterIncoming::default_instance_->InitAsDefaultInstance();
  PlayerHitIncoming::default_instance_->InitAsDefaultInstance();
  Point::default_instance_->InitAsDefaultInstance();
  MonsterTrace::default_instance_->InitAsDefaultInstance();
  MonsterTraces::default_instance_->InitAsDefaultInstance();
  ChangeScene::default_instance_->InitAsDefaultInstance();
  AllMonsterId::default_instance_->InitAsDefaultInstance();
  WildSkillStatus::default_instance_->InitAsDefaultInstance();
  WildSkillWeaponCostModify::default_instance_->InitAsDefaultInstance();
  BroadcastS2C::default_instance_->InitAsDefaultInstance();
  ReturnUserMoney::default_instance_->InitAsDefaultInstance();
  HallGsAdditionalGameData1Rsp::default_instance_->InitAsDefaultInstance();
  AdditionalGameDataRsp::default_instance_->InitAsDefaultInstance();
  RefreshUserFishExp::default_instance_->InitAsDefaultInstance();
  ArenaInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameMessage_2eproto {
  StaticDescriptorInitializer_GameMessage_2eproto() {
    protobuf_AddDesc_GameMessage_2eproto();
  }
} static_descriptor_initializer_GameMessage_2eproto_;
const ::google::protobuf::EnumDescriptor* SkillStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillStatus_descriptor_;
}
bool SkillStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReturnReasonType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnReasonType_descriptor_;
}
bool ReturnReasonType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int GameDataReq::kRegTypeFieldNumber;
const int GameDataReq::kRemoteIpFieldNumber;
#endif  // !_MSC_VER

GameDataReq::GameDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameDataReq::InitAsDefaultInstance() {
}

GameDataReq::GameDataReq(const GameDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameDataReq::SharedCtor() {
  _cached_size_ = 0;
  reg_type_ = 0;
  remote_ip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameDataReq::~GameDataReq() {
  SharedDtor();
}

void GameDataReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameDataReq_descriptor_;
}

const GameDataReq& GameDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

GameDataReq* GameDataReq::default_instance_ = NULL;

GameDataReq* GameDataReq::New() const {
  return new GameDataReq;
}

void GameDataReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reg_type_ = 0;
    remote_ip_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 reg_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reg_type_)));
          set_has_reg_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_remote_ip;
        break;
      }

      // optional uint32 remote_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remote_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remote_ip_)));
          set_has_remote_ip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 reg_type = 1;
  if (has_reg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reg_type(), output);
  }

  // optional uint32 remote_ip = 2;
  if (has_remote_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->remote_ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 reg_type = 1;
  if (has_reg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reg_type(), target);
  }

  // optional uint32 remote_ip = 2;
  if (has_remote_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->remote_ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameDataReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 reg_type = 1;
    if (has_reg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reg_type());
    }

    // optional uint32 remote_ip = 2;
    if (has_remote_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remote_ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameDataReq::MergeFrom(const GameDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reg_type()) {
      set_reg_type(from.reg_type());
    }
    if (from.has_remote_ip()) {
      set_remote_ip(from.remote_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameDataReq::CopyFrom(const GameDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameDataReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GameDataReq::Swap(GameDataReq* other) {
  if (other != this) {
    std::swap(reg_type_, other->reg_type_);
    std::swap(remote_ip_, other->remote_ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameDataReq_descriptor_;
  metadata.reflection = GameDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillInfo::kSkillIDFieldNumber;
const int SkillInfo::kStatusFieldNumber;
#endif  // !_MSC_VER

SkillInfo::SkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillInfo::InitAsDefaultInstance() {
}

SkillInfo::SkillInfo(const SkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillInfo::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillInfo::~SkillInfo() {
  SharedDtor();
}

void SkillInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillInfo_descriptor_;
}

const SkillInfo& SkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

SkillInfo* SkillInfo::default_instance_ = NULL;

SkillInfo* SkillInfo::New() const {
  return new SkillInfo;
}

void SkillInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SkillID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Status;
        break;
      }

      // optional .SY.SkillStatus Status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SY::SkillStatus_IsValid(value)) {
            set_status(static_cast< ::SY::SkillStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 SkillID = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }

  // optional .SY.SkillStatus Status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 SkillID = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillid(), target);
  }

  // optional .SY.SkillStatus Status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SkillID = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional .SY.SkillStatus Status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillInfo::MergeFrom(const SkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillInfo::CopyFrom(const SkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillInfo::IsInitialized() const {

  return true;
}

void SkillInfo::Swap(SkillInfo* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillInfo_descriptor_;
  metadata.reflection = SkillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameStationBase::kPlayingFieldNumber;
const int GameStationBase::kSceneIndexFieldNumber;
const int GameStationBase::kOnLineChairFieldNumber;
const int GameStationBase::kUserMoneyNumFieldNumber;
const int GameStationBase::kUserTicketNumFieldNumber;
const int GameStationBase::kWeaponCostFieldNumber;
const int GameStationBase::kSkillInfFieldNumber;
#endif  // !_MSC_VER

GameStationBase::GameStationBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameStationBase::InitAsDefaultInstance() {
}

GameStationBase::GameStationBase(const GameStationBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameStationBase::SharedCtor() {
  _cached_size_ = 0;
  playing_ = false;
  sceneindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameStationBase::~GameStationBase() {
  SharedDtor();
}

void GameStationBase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameStationBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameStationBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameStationBase_descriptor_;
}

const GameStationBase& GameStationBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

GameStationBase* GameStationBase::default_instance_ = NULL;

GameStationBase* GameStationBase::New() const {
  return new GameStationBase;
}

void GameStationBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playing_ = false;
    sceneindex_ = 0;
  }
  onlinechair_.Clear();
  usermoneynum_.Clear();
  userticketnum_.Clear();
  weaponcost_.Clear();
  skillinf_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameStationBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Playing = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &playing_)));
          set_has_playing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SceneIndex;
        break;
      }

      // optional int32 SceneIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneindex_)));
          set_has_sceneindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OnLineChair;
        break;
      }

      // repeated bool OnLineChair = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OnLineChair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 24, input, this->mutable_onlinechair())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_onlinechair())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OnLineChair;
        if (input->ExpectTag(32)) goto parse_UserMoneyNum;
        break;
      }

      // repeated int64 UserMoneyNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserMoneyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 32, input, this->mutable_usermoneynum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_usermoneynum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_UserMoneyNum;
        if (input->ExpectTag(40)) goto parse_UserTicketNum;
        break;
      }

      // repeated int64 UserTicketNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserTicketNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40, input, this->mutable_userticketnum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_userticketnum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_UserTicketNum;
        if (input->ExpectTag(48)) goto parse_WeaponCost;
        break;
      }

      // repeated int32 WeaponCost = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_weaponcost())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_weaponcost())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_WeaponCost;
        if (input->ExpectTag(58)) goto parse_SkillInf;
        break;
      }

      // repeated .SY.SkillInfo SkillInf = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SkillInf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skillinf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_SkillInf;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameStationBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool Playing = 1;
  if (has_playing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->playing(), output);
  }

  // optional int32 SceneIndex = 2;
  if (has_sceneindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sceneindex(), output);
  }

  // repeated bool OnLineChair = 3;
  for (int i = 0; i < this->onlinechair_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      3, this->onlinechair(i), output);
  }

  // repeated int64 UserMoneyNum = 4;
  for (int i = 0; i < this->usermoneynum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->usermoneynum(i), output);
  }

  // repeated int64 UserTicketNum = 5;
  for (int i = 0; i < this->userticketnum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->userticketnum(i), output);
  }

  // repeated int32 WeaponCost = 6;
  for (int i = 0; i < this->weaponcost_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->weaponcost(i), output);
  }

  // repeated .SY.SkillInfo SkillInf = 7;
  for (int i = 0; i < this->skillinf_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->skillinf(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameStationBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool Playing = 1;
  if (has_playing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->playing(), target);
  }

  // optional int32 SceneIndex = 2;
  if (has_sceneindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sceneindex(), target);
  }

  // repeated bool OnLineChair = 3;
  for (int i = 0; i < this->onlinechair_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(3, this->onlinechair(i), target);
  }

  // repeated int64 UserMoneyNum = 4;
  for (int i = 0; i < this->usermoneynum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(4, this->usermoneynum(i), target);
  }

  // repeated int64 UserTicketNum = 5;
  for (int i = 0; i < this->userticketnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(5, this->userticketnum(i), target);
  }

  // repeated int32 WeaponCost = 6;
  for (int i = 0; i < this->weaponcost_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->weaponcost(i), target);
  }

  // repeated .SY.SkillInfo SkillInf = 7;
  for (int i = 0; i < this->skillinf_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->skillinf(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameStationBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Playing = 1;
    if (has_playing()) {
      total_size += 1 + 1;
    }

    // optional int32 SceneIndex = 2;
    if (has_sceneindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneindex());
    }

  }
  // repeated bool OnLineChair = 3;
  {
    int data_size = 0;
    data_size = 1 * this->onlinechair_size();
    total_size += 1 * this->onlinechair_size() + data_size;
  }

  // repeated int64 UserMoneyNum = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->usermoneynum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->usermoneynum(i));
    }
    total_size += 1 * this->usermoneynum_size() + data_size;
  }

  // repeated int64 UserTicketNum = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->userticketnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->userticketnum(i));
    }
    total_size += 1 * this->userticketnum_size() + data_size;
  }

  // repeated int32 WeaponCost = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->weaponcost_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->weaponcost(i));
    }
    total_size += 1 * this->weaponcost_size() + data_size;
  }

  // repeated .SY.SkillInfo SkillInf = 7;
  total_size += 1 * this->skillinf_size();
  for (int i = 0; i < this->skillinf_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skillinf(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameStationBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameStationBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameStationBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameStationBase::MergeFrom(const GameStationBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  onlinechair_.MergeFrom(from.onlinechair_);
  usermoneynum_.MergeFrom(from.usermoneynum_);
  userticketnum_.MergeFrom(from.userticketnum_);
  weaponcost_.MergeFrom(from.weaponcost_);
  skillinf_.MergeFrom(from.skillinf_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playing()) {
      set_playing(from.playing());
    }
    if (from.has_sceneindex()) {
      set_sceneindex(from.sceneindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameStationBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStationBase::CopyFrom(const GameStationBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStationBase::IsInitialized() const {

  return true;
}

void GameStationBase::Swap(GameStationBase* other) {
  if (other != this) {
    std::swap(playing_, other->playing_);
    std::swap(sceneindex_, other->sceneindex_);
    onlinechair_.Swap(&other->onlinechair_);
    usermoneynum_.Swap(&other->usermoneynum_);
    userticketnum_.Swap(&other->userticketnum_);
    weaponcost_.Swap(&other->weaponcost_);
    skillinf_.Swap(&other->skillinf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameStationBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameStationBase_descriptor_;
  metadata.reflection = GameStationBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerPersonalSceneRsp::kRegTypeFieldNumber;
const int ServerPersonalSceneRsp::kStationBaseFieldNumber;
#endif  // !_MSC_VER

ServerPersonalSceneRsp::ServerPersonalSceneRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerPersonalSceneRsp::InitAsDefaultInstance() {
  stationbase_ = const_cast< ::SY::GameStationBase*>(&::SY::GameStationBase::default_instance());
}

ServerPersonalSceneRsp::ServerPersonalSceneRsp(const ServerPersonalSceneRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerPersonalSceneRsp::SharedCtor() {
  _cached_size_ = 0;
  reg_type_ = 0;
  stationbase_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerPersonalSceneRsp::~ServerPersonalSceneRsp() {
  SharedDtor();
}

void ServerPersonalSceneRsp::SharedDtor() {
  if (this != default_instance_) {
    delete stationbase_;
  }
}

void ServerPersonalSceneRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerPersonalSceneRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerPersonalSceneRsp_descriptor_;
}

const ServerPersonalSceneRsp& ServerPersonalSceneRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

ServerPersonalSceneRsp* ServerPersonalSceneRsp::default_instance_ = NULL;

ServerPersonalSceneRsp* ServerPersonalSceneRsp::New() const {
  return new ServerPersonalSceneRsp;
}

void ServerPersonalSceneRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reg_type_ = 0;
    if (has_stationbase()) {
      if (stationbase_ != NULL) stationbase_->::SY::GameStationBase::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerPersonalSceneRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 reg_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reg_type_)));
          set_has_reg_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_StationBase;
        break;
      }

      // required .SY.GameStationBase StationBase = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StationBase:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stationbase()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerPersonalSceneRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 reg_type = 1;
  if (has_reg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reg_type(), output);
  }

  // required .SY.GameStationBase StationBase = 2;
  if (has_stationbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stationbase(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerPersonalSceneRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 reg_type = 1;
  if (has_reg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reg_type(), target);
  }

  // required .SY.GameStationBase StationBase = 2;
  if (has_stationbase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stationbase(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerPersonalSceneRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 reg_type = 1;
    if (has_reg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reg_type());
    }

    // required .SY.GameStationBase StationBase = 2;
    if (has_stationbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stationbase());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerPersonalSceneRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerPersonalSceneRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerPersonalSceneRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerPersonalSceneRsp::MergeFrom(const ServerPersonalSceneRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reg_type()) {
      set_reg_type(from.reg_type());
    }
    if (from.has_stationbase()) {
      mutable_stationbase()->::SY::GameStationBase::MergeFrom(from.stationbase());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerPersonalSceneRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerPersonalSceneRsp::CopyFrom(const ServerPersonalSceneRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerPersonalSceneRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ServerPersonalSceneRsp::Swap(ServerPersonalSceneRsp* other) {
  if (other != this) {
    std::swap(reg_type_, other->reg_type_);
    std::swap(stationbase_, other->stationbase_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerPersonalSceneRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerPersonalSceneRsp_descriptor_;
  metadata.reflection = ServerPersonalSceneRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientConfirmStartReq::kConfirmStartFieldNumber;
#endif  // !_MSC_VER

ClientConfirmStartReq::ClientConfirmStartReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientConfirmStartReq::InitAsDefaultInstance() {
}

ClientConfirmStartReq::ClientConfirmStartReq(const ClientConfirmStartReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientConfirmStartReq::SharedCtor() {
  _cached_size_ = 0;
  confirmstart_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientConfirmStartReq::~ClientConfirmStartReq() {
  SharedDtor();
}

void ClientConfirmStartReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientConfirmStartReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientConfirmStartReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientConfirmStartReq_descriptor_;
}

const ClientConfirmStartReq& ClientConfirmStartReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

ClientConfirmStartReq* ClientConfirmStartReq::default_instance_ = NULL;

ClientConfirmStartReq* ClientConfirmStartReq::New() const {
  return new ClientConfirmStartReq;
}

void ClientConfirmStartReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    confirmstart_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientConfirmStartReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ConfirmStart = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &confirmstart_)));
          set_has_confirmstart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientConfirmStartReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ConfirmStart = 1;
  if (has_confirmstart()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->confirmstart(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientConfirmStartReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ConfirmStart = 1;
  if (has_confirmstart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->confirmstart(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientConfirmStartReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ConfirmStart = 1;
    if (has_confirmstart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->confirmstart());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientConfirmStartReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientConfirmStartReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientConfirmStartReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientConfirmStartReq::MergeFrom(const ClientConfirmStartReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confirmstart()) {
      set_confirmstart(from.confirmstart());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientConfirmStartReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientConfirmStartReq::CopyFrom(const ClientConfirmStartReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientConfirmStartReq::IsInitialized() const {

  return true;
}

void ClientConfirmStartReq::Swap(ClientConfirmStartReq* other) {
  if (other != this) {
    std::swap(confirmstart_, other->confirmstart_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientConfirmStartReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientConfirmStartReq_descriptor_;
  metadata.reflection = ClientConfirmStartReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerFirstSceneRsp::kFirstSceneFieldNumber;
#endif  // !_MSC_VER

ServerFirstSceneRsp::ServerFirstSceneRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerFirstSceneRsp::InitAsDefaultInstance() {
  first_scene_ = const_cast< ::SY::ServerPersonalSceneRsp*>(&::SY::ServerPersonalSceneRsp::default_instance());
}

ServerFirstSceneRsp::ServerFirstSceneRsp(const ServerFirstSceneRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerFirstSceneRsp::SharedCtor() {
  _cached_size_ = 0;
  first_scene_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerFirstSceneRsp::~ServerFirstSceneRsp() {
  SharedDtor();
}

void ServerFirstSceneRsp::SharedDtor() {
  if (this != default_instance_) {
    delete first_scene_;
  }
}

void ServerFirstSceneRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerFirstSceneRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerFirstSceneRsp_descriptor_;
}

const ServerFirstSceneRsp& ServerFirstSceneRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

ServerFirstSceneRsp* ServerFirstSceneRsp::default_instance_ = NULL;

ServerFirstSceneRsp* ServerFirstSceneRsp::New() const {
  return new ServerFirstSceneRsp;
}

void ServerFirstSceneRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_first_scene()) {
      if (first_scene_ != NULL) first_scene_->::SY::ServerPersonalSceneRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerFirstSceneRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SY.ServerPersonalSceneRsp first_scene = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_first_scene()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerFirstSceneRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SY.ServerPersonalSceneRsp first_scene = 1;
  if (has_first_scene()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->first_scene(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerFirstSceneRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SY.ServerPersonalSceneRsp first_scene = 1;
  if (has_first_scene()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->first_scene(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerFirstSceneRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SY.ServerPersonalSceneRsp first_scene = 1;
    if (has_first_scene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->first_scene());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerFirstSceneRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerFirstSceneRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerFirstSceneRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerFirstSceneRsp::MergeFrom(const ServerFirstSceneRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first_scene()) {
      mutable_first_scene()->::SY::ServerPersonalSceneRsp::MergeFrom(from.first_scene());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerFirstSceneRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerFirstSceneRsp::CopyFrom(const ServerFirstSceneRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerFirstSceneRsp::IsInitialized() const {

  if (has_first_scene()) {
    if (!this->first_scene().IsInitialized()) return false;
  }
  return true;
}

void ServerFirstSceneRsp::Swap(ServerFirstSceneRsp* other) {
  if (other != this) {
    std::swap(first_scene_, other->first_scene_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerFirstSceneRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerFirstSceneRsp_descriptor_;
  metadata.reflection = ServerFirstSceneRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScreenResolution::kCLIENTWIDTHFieldNumber;
const int ScreenResolution::kCLIENTHEIGHTFieldNumber;
#endif  // !_MSC_VER

ScreenResolution::ScreenResolution()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScreenResolution::InitAsDefaultInstance() {
}

ScreenResolution::ScreenResolution(const ScreenResolution& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScreenResolution::SharedCtor() {
  _cached_size_ = 0;
  client_width_ = 0;
  client_height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScreenResolution::~ScreenResolution() {
  SharedDtor();
}

void ScreenResolution::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScreenResolution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScreenResolution::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScreenResolution_descriptor_;
}

const ScreenResolution& ScreenResolution::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

ScreenResolution* ScreenResolution::default_instance_ = NULL;

ScreenResolution* ScreenResolution::New() const {
  return new ScreenResolution;
}

void ScreenResolution::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_width_ = 0;
    client_height_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScreenResolution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 CLIENT_WIDTH = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_width_)));
          set_has_client_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CLIENT_HEIGHT;
        break;
      }

      // optional int32 CLIENT_HEIGHT = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CLIENT_HEIGHT:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_height_)));
          set_has_client_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScreenResolution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 CLIENT_WIDTH = 1;
  if (has_client_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_width(), output);
  }

  // optional int32 CLIENT_HEIGHT = 2;
  if (has_client_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->client_height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScreenResolution::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 CLIENT_WIDTH = 1;
  if (has_client_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_width(), target);
  }

  // optional int32 CLIENT_HEIGHT = 2;
  if (has_client_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->client_height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScreenResolution::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 CLIENT_WIDTH = 1;
    if (has_client_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_width());
    }

    // optional int32 CLIENT_HEIGHT = 2;
    if (has_client_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScreenResolution::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScreenResolution* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScreenResolution*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScreenResolution::MergeFrom(const ScreenResolution& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_width()) {
      set_client_width(from.client_width());
    }
    if (from.has_client_height()) {
      set_client_height(from.client_height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScreenResolution::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScreenResolution::CopyFrom(const ScreenResolution& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScreenResolution::IsInitialized() const {

  return true;
}

void ScreenResolution::Swap(ScreenResolution* other) {
  if (other != this) {
    std::swap(client_width_, other->client_width_);
    std::swap(client_height_, other->client_height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScreenResolution::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScreenResolution_descriptor_;
  metadata.reflection = ScreenResolution_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameChatSection::kSectionTypeFieldNumber;
const int GameChatSection::kSectionWordsFieldNumber;
#endif  // !_MSC_VER

GameChatSection::GameChatSection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameChatSection::InitAsDefaultInstance() {
}

GameChatSection::GameChatSection(const GameChatSection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameChatSection::SharedCtor() {
  _cached_size_ = 0;
  section_type_ = 0;
  section_words_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameChatSection::~GameChatSection() {
  SharedDtor();
}

void GameChatSection::SharedDtor() {
  if (section_words_ != &::google::protobuf::internal::kEmptyString) {
    delete section_words_;
  }
  if (this != default_instance_) {
  }
}

void GameChatSection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameChatSection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameChatSection_descriptor_;
}

const GameChatSection& GameChatSection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

GameChatSection* GameChatSection::default_instance_ = NULL;

GameChatSection* GameChatSection::New() const {
  return new GameChatSection;
}

void GameChatSection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    section_type_ = 0;
    if (has_section_words()) {
      if (section_words_ != &::google::protobuf::internal::kEmptyString) {
        section_words_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameChatSection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 section_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &section_type_)));
          set_has_section_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_section_words;
        break;
      }

      // optional string section_words = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_section_words:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_section_words()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->section_words().data(), this->section_words().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameChatSection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 section_type = 1;
  if (has_section_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->section_type(), output);
  }

  // optional string section_words = 2;
  if (has_section_words()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->section_words().data(), this->section_words().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->section_words(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameChatSection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 section_type = 1;
  if (has_section_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->section_type(), target);
  }

  // optional string section_words = 2;
  if (has_section_words()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->section_words().data(), this->section_words().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->section_words(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameChatSection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 section_type = 1;
    if (has_section_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->section_type());
    }

    // optional string section_words = 2;
    if (has_section_words()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->section_words());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameChatSection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameChatSection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameChatSection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameChatSection::MergeFrom(const GameChatSection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_section_type()) {
      set_section_type(from.section_type());
    }
    if (from.has_section_words()) {
      set_section_words(from.section_words());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameChatSection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameChatSection::CopyFrom(const GameChatSection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameChatSection::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GameChatSection::Swap(GameChatSection* other) {
  if (other != this) {
    std::swap(section_type_, other->section_type_);
    std::swap(section_words_, other->section_words_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameChatSection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameChatSection_descriptor_;
  metadata.reflection = GameChatSection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameTelevisonResult::kContentTypeFieldNumber;
const int GameTelevisonResult::kGameIdFieldNumber;
const int GameTelevisonResult::kContentInfoFieldNumber;
#endif  // !_MSC_VER

GameTelevisonResult::GameTelevisonResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameTelevisonResult::InitAsDefaultInstance() {
}

GameTelevisonResult::GameTelevisonResult(const GameTelevisonResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameTelevisonResult::SharedCtor() {
  _cached_size_ = 0;
  content_type_ = 0;
  game_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameTelevisonResult::~GameTelevisonResult() {
  SharedDtor();
}

void GameTelevisonResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameTelevisonResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameTelevisonResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameTelevisonResult_descriptor_;
}

const GameTelevisonResult& GameTelevisonResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

GameTelevisonResult* GameTelevisonResult::default_instance_ = NULL;

GameTelevisonResult* GameTelevisonResult::New() const {
  return new GameTelevisonResult;
}

void GameTelevisonResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    content_type_ = 0;
    game_id_ = 0;
  }
  content_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameTelevisonResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 content_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &content_type_)));
          set_has_content_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // required int32 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content_info;
        break;
      }

      // repeated .SY.GameChatSection content_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_content_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameTelevisonResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 content_type = 1;
  if (has_content_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->content_type(), output);
  }

  // required int32 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->game_id(), output);
  }

  // repeated .SY.GameChatSection content_info = 3;
  for (int i = 0; i < this->content_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->content_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameTelevisonResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 content_type = 1;
  if (has_content_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->content_type(), target);
  }

  // required int32 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->game_id(), target);
  }

  // repeated .SY.GameChatSection content_info = 3;
  for (int i = 0; i < this->content_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->content_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameTelevisonResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 content_type = 1;
    if (has_content_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->content_type());
    }

    // required int32 game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_id());
    }

  }
  // repeated .SY.GameChatSection content_info = 3;
  total_size += 1 * this->content_info_size();
  for (int i = 0; i < this->content_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->content_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameTelevisonResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameTelevisonResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameTelevisonResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameTelevisonResult::MergeFrom(const GameTelevisonResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  content_info_.MergeFrom(from.content_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content_type()) {
      set_content_type(from.content_type());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameTelevisonResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameTelevisonResult::CopyFrom(const GameTelevisonResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameTelevisonResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < content_info_size(); i++) {
    if (!this->content_info(i).IsInitialized()) return false;
  }
  return true;
}

void GameTelevisonResult::Swap(GameTelevisonResult* other) {
  if (other != this) {
    std::swap(content_type_, other->content_type_);
    std::swap(game_id_, other->game_id_);
    content_info_.Swap(&other->content_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameTelevisonResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameTelevisonResult_descriptor_;
  metadata.reflection = GameTelevisonResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserMoneySync::kChairIDFieldNumber;
const int UserMoneySync::kUserMoneyNumFieldNumber;
const int UserMoneySync::kUserTicketNumFieldNumber;
const int UserMoneySync::kLevelFieldNumber;
const int UserMoneySync::kExpFieldNumber;
#endif  // !_MSC_VER

UserMoneySync::UserMoneySync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserMoneySync::InitAsDefaultInstance() {
}

UserMoneySync::UserMoneySync(const UserMoneySync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserMoneySync::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  usermoneynum_ = GOOGLE_LONGLONG(0);
  userticketnum_ = GOOGLE_LONGLONG(0);
  level_ = 0;
  exp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserMoneySync::~UserMoneySync() {
  SharedDtor();
}

void UserMoneySync::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserMoneySync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserMoneySync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserMoneySync_descriptor_;
}

const UserMoneySync& UserMoneySync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

UserMoneySync* UserMoneySync::default_instance_ = NULL;

UserMoneySync* UserMoneySync::New() const {
  return new UserMoneySync;
}

void UserMoneySync::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    usermoneynum_ = GOOGLE_LONGLONG(0);
    userticketnum_ = GOOGLE_LONGLONG(0);
    level_ = 0;
    exp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserMoneySync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_UserMoneyNum;
        break;
      }

      // optional int64 UserMoneyNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserMoneyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &usermoneynum_)));
          set_has_usermoneynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_UserTicketNum;
        break;
      }

      // optional int64 UserTicketNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserTicketNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userticketnum_)));
          set_has_userticketnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_exp;
        break;
      }

      // optional uint64 exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserMoneySync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int64 UserMoneyNum = 2;
  if (has_usermoneynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->usermoneynum(), output);
  }

  // optional int64 UserTicketNum = 3;
  if (has_userticketnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->userticketnum(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional uint64 exp = 5;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserMoneySync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int64 UserMoneyNum = 2;
  if (has_usermoneynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->usermoneynum(), target);
  }

  // optional int64 UserTicketNum = 3;
  if (has_userticketnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->userticketnum(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional uint64 exp = 5;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserMoneySync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int64 UserMoneyNum = 2;
    if (has_usermoneynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->usermoneynum());
    }

    // optional int64 UserTicketNum = 3;
    if (has_userticketnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userticketnum());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint64 exp = 5;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserMoneySync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserMoneySync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserMoneySync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserMoneySync::MergeFrom(const UserMoneySync& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_usermoneynum()) {
      set_usermoneynum(from.usermoneynum());
    }
    if (from.has_userticketnum()) {
      set_userticketnum(from.userticketnum());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserMoneySync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserMoneySync::CopyFrom(const UserMoneySync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMoneySync::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserMoneySync::Swap(UserMoneySync* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(usermoneynum_, other->usermoneynum_);
    std::swap(userticketnum_, other->userticketnum_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserMoneySync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserMoneySync_descriptor_;
  metadata.reflection = UserMoneySync_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeWeaponReq::kChairIDFieldNumber;
const int ChangeWeaponReq::kWeaponIDFieldNumber;
#endif  // !_MSC_VER

ChangeWeaponReq::ChangeWeaponReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeWeaponReq::InitAsDefaultInstance() {
}

ChangeWeaponReq::ChangeWeaponReq(const ChangeWeaponReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeWeaponReq::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  weaponid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeWeaponReq::~ChangeWeaponReq() {
  SharedDtor();
}

void ChangeWeaponReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeWeaponReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeWeaponReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeWeaponReq_descriptor_;
}

const ChangeWeaponReq& ChangeWeaponReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

ChangeWeaponReq* ChangeWeaponReq::default_instance_ = NULL;

ChangeWeaponReq* ChangeWeaponReq::New() const {
  return new ChangeWeaponReq;
}

void ChangeWeaponReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    weaponid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeWeaponReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_WeaponID;
        break;
      }

      // optional int32 WeaponID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weaponid_)));
          set_has_weaponid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeWeaponReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 WeaponID = 2;
  if (has_weaponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->weaponid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeWeaponReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 WeaponID = 2;
  if (has_weaponid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->weaponid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeWeaponReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 WeaponID = 2;
    if (has_weaponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weaponid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeWeaponReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeWeaponReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeWeaponReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeWeaponReq::MergeFrom(const ChangeWeaponReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_weaponid()) {
      set_weaponid(from.weaponid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeWeaponReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeWeaponReq::CopyFrom(const ChangeWeaponReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeWeaponReq::IsInitialized() const {

  return true;
}

void ChangeWeaponReq::Swap(ChangeWeaponReq* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(weaponid_, other->weaponid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeWeaponReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeWeaponReq_descriptor_;
  metadata.reflection = ChangeWeaponReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeWeaponRsp::kChairIDFieldNumber;
const int ChangeWeaponRsp::kWeaponIDFieldNumber;
const int ChangeWeaponRsp::kResultFieldNumber;
#endif  // !_MSC_VER

ChangeWeaponRsp::ChangeWeaponRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeWeaponRsp::InitAsDefaultInstance() {
}

ChangeWeaponRsp::ChangeWeaponRsp(const ChangeWeaponRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeWeaponRsp::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  weaponid_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeWeaponRsp::~ChangeWeaponRsp() {
  SharedDtor();
}

void ChangeWeaponRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeWeaponRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeWeaponRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeWeaponRsp_descriptor_;
}

const ChangeWeaponRsp& ChangeWeaponRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

ChangeWeaponRsp* ChangeWeaponRsp::default_instance_ = NULL;

ChangeWeaponRsp* ChangeWeaponRsp::New() const {
  return new ChangeWeaponRsp;
}

void ChangeWeaponRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    weaponid_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeWeaponRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_WeaponID;
        break;
      }

      // optional int32 WeaponID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weaponid_)));
          set_has_weaponid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Result;
        break;
      }

      // optional int32 Result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeWeaponRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 WeaponID = 2;
  if (has_weaponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->weaponid(), output);
  }

  // optional int32 Result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeWeaponRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 WeaponID = 2;
  if (has_weaponid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->weaponid(), target);
  }

  // optional int32 Result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeWeaponRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 WeaponID = 2;
    if (has_weaponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weaponid());
    }

    // optional int32 Result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeWeaponRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeWeaponRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeWeaponRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeWeaponRsp::MergeFrom(const ChangeWeaponRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_weaponid()) {
      set_weaponid(from.weaponid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeWeaponRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeWeaponRsp::CopyFrom(const ChangeWeaponRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeWeaponRsp::IsInitialized() const {

  return true;
}

void ChangeWeaponRsp::Swap(ChangeWeaponRsp* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(weaponid_, other->weaponid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeWeaponRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeWeaponRsp_descriptor_;
  metadata.reflection = ChangeWeaponRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuySkillReq::kChairIDFieldNumber;
const int BuySkillReq::kSkillIDFieldNumber;
#endif  // !_MSC_VER

BuySkillReq::BuySkillReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuySkillReq::InitAsDefaultInstance() {
}

BuySkillReq::BuySkillReq(const BuySkillReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuySkillReq::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  skillid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuySkillReq::~BuySkillReq() {
  SharedDtor();
}

void BuySkillReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuySkillReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuySkillReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuySkillReq_descriptor_;
}

const BuySkillReq& BuySkillReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

BuySkillReq* BuySkillReq::default_instance_ = NULL;

BuySkillReq* BuySkillReq::New() const {
  return new BuySkillReq;
}

void BuySkillReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    skillid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuySkillReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SkillID;
        break;
      }

      // optional int32 SkillID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuySkillReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 SkillID = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuySkillReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 SkillID = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuySkillReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 SkillID = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuySkillReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuySkillReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuySkillReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuySkillReq::MergeFrom(const BuySkillReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuySkillReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuySkillReq::CopyFrom(const BuySkillReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuySkillReq::IsInitialized() const {

  return true;
}

void BuySkillReq::Swap(BuySkillReq* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuySkillReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuySkillReq_descriptor_;
  metadata.reflection = BuySkillReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuySkillRsp::kChairIDFieldNumber;
const int BuySkillRsp::kSkillIDFieldNumber;
const int BuySkillRsp::kResultFieldNumber;
#endif  // !_MSC_VER

BuySkillRsp::BuySkillRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuySkillRsp::InitAsDefaultInstance() {
}

BuySkillRsp::BuySkillRsp(const BuySkillRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuySkillRsp::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  skillid_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuySkillRsp::~BuySkillRsp() {
  SharedDtor();
}

void BuySkillRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuySkillRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuySkillRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuySkillRsp_descriptor_;
}

const BuySkillRsp& BuySkillRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

BuySkillRsp* BuySkillRsp::default_instance_ = NULL;

BuySkillRsp* BuySkillRsp::New() const {
  return new BuySkillRsp;
}

void BuySkillRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    skillid_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuySkillRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SkillID;
        break;
      }

      // optional int32 SkillID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Result;
        break;
      }

      // optional int32 Result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuySkillRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 SkillID = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skillid(), output);
  }

  // optional int32 Result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuySkillRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 SkillID = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skillid(), target);
  }

  // optional int32 Result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuySkillRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 SkillID = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional int32 Result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuySkillRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuySkillRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuySkillRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuySkillRsp::MergeFrom(const BuySkillRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuySkillRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuySkillRsp::CopyFrom(const BuySkillRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuySkillRsp::IsInitialized() const {

  return true;
}

void BuySkillRsp::Swap(BuySkillRsp* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(skillid_, other->skillid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuySkillRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuySkillRsp_descriptor_;
  metadata.reflection = BuySkillRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyAutoAttackReq::kChairIDFieldNumber;
const int BuyAutoAttackReq::kAutoAttackLevelFieldNumber;
#endif  // !_MSC_VER

BuyAutoAttackReq::BuyAutoAttackReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuyAutoAttackReq::InitAsDefaultInstance() {
}

BuyAutoAttackReq::BuyAutoAttackReq(const BuyAutoAttackReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuyAutoAttackReq::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  autoattacklevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyAutoAttackReq::~BuyAutoAttackReq() {
  SharedDtor();
}

void BuyAutoAttackReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyAutoAttackReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyAutoAttackReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyAutoAttackReq_descriptor_;
}

const BuyAutoAttackReq& BuyAutoAttackReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

BuyAutoAttackReq* BuyAutoAttackReq::default_instance_ = NULL;

BuyAutoAttackReq* BuyAutoAttackReq::New() const {
  return new BuyAutoAttackReq;
}

void BuyAutoAttackReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    autoattacklevel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyAutoAttackReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_AutoAttackLevel;
        break;
      }

      // optional int32 AutoAttackLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AutoAttackLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autoattacklevel_)));
          set_has_autoattacklevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuyAutoAttackReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 AutoAttackLevel = 2;
  if (has_autoattacklevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->autoattacklevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuyAutoAttackReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 AutoAttackLevel = 2;
  if (has_autoattacklevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->autoattacklevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuyAutoAttackReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 AutoAttackLevel = 2;
    if (has_autoattacklevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autoattacklevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyAutoAttackReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyAutoAttackReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyAutoAttackReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyAutoAttackReq::MergeFrom(const BuyAutoAttackReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_autoattacklevel()) {
      set_autoattacklevel(from.autoattacklevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyAutoAttackReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyAutoAttackReq::CopyFrom(const BuyAutoAttackReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyAutoAttackReq::IsInitialized() const {

  return true;
}

void BuyAutoAttackReq::Swap(BuyAutoAttackReq* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(autoattacklevel_, other->autoattacklevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyAutoAttackReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyAutoAttackReq_descriptor_;
  metadata.reflection = BuyAutoAttackReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyHammerLevelReq::kChairIDFieldNumber;
const int BuyHammerLevelReq::kHammerLevelFieldNumber;
#endif  // !_MSC_VER

BuyHammerLevelReq::BuyHammerLevelReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuyHammerLevelReq::InitAsDefaultInstance() {
}

BuyHammerLevelReq::BuyHammerLevelReq(const BuyHammerLevelReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuyHammerLevelReq::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  hammerlevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyHammerLevelReq::~BuyHammerLevelReq() {
  SharedDtor();
}

void BuyHammerLevelReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyHammerLevelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyHammerLevelReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyHammerLevelReq_descriptor_;
}

const BuyHammerLevelReq& BuyHammerLevelReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

BuyHammerLevelReq* BuyHammerLevelReq::default_instance_ = NULL;

BuyHammerLevelReq* BuyHammerLevelReq::New() const {
  return new BuyHammerLevelReq;
}

void BuyHammerLevelReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    hammerlevel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyHammerLevelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HammerLevel;
        break;
      }

      // optional int32 HammerLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HammerLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hammerlevel_)));
          set_has_hammerlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuyHammerLevelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 HammerLevel = 2;
  if (has_hammerlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hammerlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuyHammerLevelReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 HammerLevel = 2;
  if (has_hammerlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hammerlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuyHammerLevelReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 HammerLevel = 2;
    if (has_hammerlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hammerlevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyHammerLevelReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyHammerLevelReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyHammerLevelReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyHammerLevelReq::MergeFrom(const BuyHammerLevelReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_hammerlevel()) {
      set_hammerlevel(from.hammerlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyHammerLevelReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyHammerLevelReq::CopyFrom(const BuyHammerLevelReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyHammerLevelReq::IsInitialized() const {

  return true;
}

void BuyHammerLevelReq::Swap(BuyHammerLevelReq* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(hammerlevel_, other->hammerlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyHammerLevelReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyHammerLevelReq_descriptor_;
  metadata.reflection = BuyHammerLevelReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyHammerLevelRsp::kChairIDFieldNumber;
const int BuyHammerLevelRsp::kHammerLevelFieldNumber;
const int BuyHammerLevelRsp::kResultFieldNumber;
#endif  // !_MSC_VER

BuyHammerLevelRsp::BuyHammerLevelRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuyHammerLevelRsp::InitAsDefaultInstance() {
}

BuyHammerLevelRsp::BuyHammerLevelRsp(const BuyHammerLevelRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuyHammerLevelRsp::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  hammerlevel_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyHammerLevelRsp::~BuyHammerLevelRsp() {
  SharedDtor();
}

void BuyHammerLevelRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyHammerLevelRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyHammerLevelRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyHammerLevelRsp_descriptor_;
}

const BuyHammerLevelRsp& BuyHammerLevelRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

BuyHammerLevelRsp* BuyHammerLevelRsp::default_instance_ = NULL;

BuyHammerLevelRsp* BuyHammerLevelRsp::New() const {
  return new BuyHammerLevelRsp;
}

void BuyHammerLevelRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    hammerlevel_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyHammerLevelRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HammerLevel;
        break;
      }

      // optional int32 HammerLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HammerLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hammerlevel_)));
          set_has_hammerlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Result;
        break;
      }

      // optional int32 Result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuyHammerLevelRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 HammerLevel = 2;
  if (has_hammerlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hammerlevel(), output);
  }

  // optional int32 Result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuyHammerLevelRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 HammerLevel = 2;
  if (has_hammerlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hammerlevel(), target);
  }

  // optional int32 Result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuyHammerLevelRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 HammerLevel = 2;
    if (has_hammerlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hammerlevel());
    }

    // optional int32 Result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyHammerLevelRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyHammerLevelRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyHammerLevelRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyHammerLevelRsp::MergeFrom(const BuyHammerLevelRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_hammerlevel()) {
      set_hammerlevel(from.hammerlevel());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyHammerLevelRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyHammerLevelRsp::CopyFrom(const BuyHammerLevelRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyHammerLevelRsp::IsInitialized() const {

  return true;
}

void BuyHammerLevelRsp::Swap(BuyHammerLevelRsp* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(hammerlevel_, other->hammerlevel_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyHammerLevelRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyHammerLevelRsp_descriptor_;
  metadata.reflection = BuyHammerLevelRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KingCriticalHit::kChairIDFieldNumber;
const int KingCriticalHit::kIsCriticalHitFieldNumber;
const int KingCriticalHit::kWeaponIDFieldNumber;
const int KingCriticalHit::kMonsterIDListFieldNumber;
const int KingCriticalHit::kUserMoneyGainFieldNumber;
const int KingCriticalHit::kUserTicketGainFieldNumber;
const int KingCriticalHit::kUserMoneyNumFieldNumber;
const int KingCriticalHit::kUserTicketNumFieldNumber;
const int KingCriticalHit::kAnimMidLastFieldNumber;
const int KingCriticalHit::kAnimEndLastFieldNumber;
#endif  // !_MSC_VER

KingCriticalHit::KingCriticalHit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KingCriticalHit::InitAsDefaultInstance() {
}

KingCriticalHit::KingCriticalHit(const KingCriticalHit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KingCriticalHit::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  iscriticalhit_ = 0;
  weaponid_ = 0;
  usermoneygain_ = GOOGLE_LONGLONG(0);
  userticketgain_ = GOOGLE_LONGLONG(0);
  usermoneynum_ = GOOGLE_LONGLONG(0);
  userticketnum_ = GOOGLE_LONGLONG(0);
  animmidlast_ = 0;
  animendlast_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KingCriticalHit::~KingCriticalHit() {
  SharedDtor();
}

void KingCriticalHit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KingCriticalHit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KingCriticalHit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KingCriticalHit_descriptor_;
}

const KingCriticalHit& KingCriticalHit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

KingCriticalHit* KingCriticalHit::default_instance_ = NULL;

KingCriticalHit* KingCriticalHit::New() const {
  return new KingCriticalHit;
}

void KingCriticalHit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    iscriticalhit_ = 0;
    weaponid_ = 0;
    usermoneygain_ = GOOGLE_LONGLONG(0);
    userticketgain_ = GOOGLE_LONGLONG(0);
    usermoneynum_ = GOOGLE_LONGLONG(0);
    userticketnum_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    animmidlast_ = 0;
    animendlast_ = 0;
  }
  monsteridlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KingCriticalHit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isCriticalHit;
        break;
      }

      // required int32 isCriticalHit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCriticalHit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscriticalhit_)));
          set_has_iscriticalhit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_WeaponID;
        break;
      }

      // optional int32 WeaponID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weaponid_)));
          set_has_weaponid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_MonsterIDList;
        break;
      }

      // repeated int32 MonsterIDList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MonsterIDList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_monsteridlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_monsteridlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_MonsterIDList;
        if (input->ExpectTag(40)) goto parse_UserMoneyGain;
        break;
      }

      // optional int64 UserMoneyGain = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserMoneyGain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &usermoneygain_)));
          set_has_usermoneygain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_UserTicketGain;
        break;
      }

      // optional int64 UserTicketGain = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserTicketGain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userticketgain_)));
          set_has_userticketgain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_UserMoneyNum;
        break;
      }

      // optional int64 UserMoneyNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserMoneyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &usermoneynum_)));
          set_has_usermoneynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_UserTicketNum;
        break;
      }

      // optional int64 UserTicketNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserTicketNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userticketnum_)));
          set_has_userticketnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_AnimMidLast;
        break;
      }

      // optional int32 AnimMidLast = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AnimMidLast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &animmidlast_)));
          set_has_animmidlast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_AnimEndLast;
        break;
      }

      // optional int32 AnimEndLast = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AnimEndLast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &animendlast_)));
          set_has_animendlast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KingCriticalHit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // required int32 isCriticalHit = 2;
  if (has_iscriticalhit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iscriticalhit(), output);
  }

  // optional int32 WeaponID = 3;
  if (has_weaponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->weaponid(), output);
  }

  // repeated int32 MonsterIDList = 4;
  for (int i = 0; i < this->monsteridlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->monsteridlist(i), output);
  }

  // optional int64 UserMoneyGain = 5;
  if (has_usermoneygain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->usermoneygain(), output);
  }

  // optional int64 UserTicketGain = 6;
  if (has_userticketgain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->userticketgain(), output);
  }

  // optional int64 UserMoneyNum = 7;
  if (has_usermoneynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->usermoneynum(), output);
  }

  // optional int64 UserTicketNum = 8;
  if (has_userticketnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->userticketnum(), output);
  }

  // optional int32 AnimMidLast = 9;
  if (has_animmidlast()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->animmidlast(), output);
  }

  // optional int32 AnimEndLast = 10;
  if (has_animendlast()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->animendlast(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KingCriticalHit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // required int32 isCriticalHit = 2;
  if (has_iscriticalhit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iscriticalhit(), target);
  }

  // optional int32 WeaponID = 3;
  if (has_weaponid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->weaponid(), target);
  }

  // repeated int32 MonsterIDList = 4;
  for (int i = 0; i < this->monsteridlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->monsteridlist(i), target);
  }

  // optional int64 UserMoneyGain = 5;
  if (has_usermoneygain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->usermoneygain(), target);
  }

  // optional int64 UserTicketGain = 6;
  if (has_userticketgain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->userticketgain(), target);
  }

  // optional int64 UserMoneyNum = 7;
  if (has_usermoneynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->usermoneynum(), target);
  }

  // optional int64 UserTicketNum = 8;
  if (has_userticketnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->userticketnum(), target);
  }

  // optional int32 AnimMidLast = 9;
  if (has_animmidlast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->animmidlast(), target);
  }

  // optional int32 AnimEndLast = 10;
  if (has_animendlast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->animendlast(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KingCriticalHit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // required int32 isCriticalHit = 2;
    if (has_iscriticalhit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscriticalhit());
    }

    // optional int32 WeaponID = 3;
    if (has_weaponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weaponid());
    }

    // optional int64 UserMoneyGain = 5;
    if (has_usermoneygain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->usermoneygain());
    }

    // optional int64 UserTicketGain = 6;
    if (has_userticketgain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userticketgain());
    }

    // optional int64 UserMoneyNum = 7;
    if (has_usermoneynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->usermoneynum());
    }

    // optional int64 UserTicketNum = 8;
    if (has_userticketnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userticketnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 AnimMidLast = 9;
    if (has_animmidlast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->animmidlast());
    }

    // optional int32 AnimEndLast = 10;
    if (has_animendlast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->animendlast());
    }

  }
  // repeated int32 MonsterIDList = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->monsteridlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->monsteridlist(i));
    }
    total_size += 1 * this->monsteridlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KingCriticalHit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KingCriticalHit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KingCriticalHit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KingCriticalHit::MergeFrom(const KingCriticalHit& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsteridlist_.MergeFrom(from.monsteridlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_iscriticalhit()) {
      set_iscriticalhit(from.iscriticalhit());
    }
    if (from.has_weaponid()) {
      set_weaponid(from.weaponid());
    }
    if (from.has_usermoneygain()) {
      set_usermoneygain(from.usermoneygain());
    }
    if (from.has_userticketgain()) {
      set_userticketgain(from.userticketgain());
    }
    if (from.has_usermoneynum()) {
      set_usermoneynum(from.usermoneynum());
    }
    if (from.has_userticketnum()) {
      set_userticketnum(from.userticketnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_animmidlast()) {
      set_animmidlast(from.animmidlast());
    }
    if (from.has_animendlast()) {
      set_animendlast(from.animendlast());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KingCriticalHit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KingCriticalHit::CopyFrom(const KingCriticalHit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KingCriticalHit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void KingCriticalHit::Swap(KingCriticalHit* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(iscriticalhit_, other->iscriticalhit_);
    std::swap(weaponid_, other->weaponid_);
    monsteridlist_.Swap(&other->monsteridlist_);
    std::swap(usermoneygain_, other->usermoneygain_);
    std::swap(userticketgain_, other->userticketgain_);
    std::swap(usermoneynum_, other->usermoneynum_);
    std::swap(userticketnum_, other->userticketnum_);
    std::swap(animmidlast_, other->animmidlast_);
    std::swap(animendlast_, other->animendlast_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KingCriticalHit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KingCriticalHit_descriptor_;
  metadata.reflection = KingCriticalHit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyAutoAttackRsp::kChairIDFieldNumber;
const int BuyAutoAttackRsp::kAutoAttackLevelFieldNumber;
const int BuyAutoAttackRsp::kResultFieldNumber;
#endif  // !_MSC_VER

BuyAutoAttackRsp::BuyAutoAttackRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuyAutoAttackRsp::InitAsDefaultInstance() {
}

BuyAutoAttackRsp::BuyAutoAttackRsp(const BuyAutoAttackRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuyAutoAttackRsp::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  autoattacklevel_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyAutoAttackRsp::~BuyAutoAttackRsp() {
  SharedDtor();
}

void BuyAutoAttackRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyAutoAttackRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyAutoAttackRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyAutoAttackRsp_descriptor_;
}

const BuyAutoAttackRsp& BuyAutoAttackRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

BuyAutoAttackRsp* BuyAutoAttackRsp::default_instance_ = NULL;

BuyAutoAttackRsp* BuyAutoAttackRsp::New() const {
  return new BuyAutoAttackRsp;
}

void BuyAutoAttackRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    autoattacklevel_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyAutoAttackRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_AutoAttackLevel;
        break;
      }

      // optional int32 AutoAttackLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AutoAttackLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autoattacklevel_)));
          set_has_autoattacklevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Result;
        break;
      }

      // optional int32 Result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuyAutoAttackRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 AutoAttackLevel = 2;
  if (has_autoattacklevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->autoattacklevel(), output);
  }

  // optional int32 Result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuyAutoAttackRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 AutoAttackLevel = 2;
  if (has_autoattacklevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->autoattacklevel(), target);
  }

  // optional int32 Result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuyAutoAttackRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 AutoAttackLevel = 2;
    if (has_autoattacklevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autoattacklevel());
    }

    // optional int32 Result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyAutoAttackRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyAutoAttackRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyAutoAttackRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyAutoAttackRsp::MergeFrom(const BuyAutoAttackRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_autoattacklevel()) {
      set_autoattacklevel(from.autoattacklevel());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyAutoAttackRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyAutoAttackRsp::CopyFrom(const BuyAutoAttackRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyAutoAttackRsp::IsInitialized() const {

  return true;
}

void BuyAutoAttackRsp::Swap(BuyAutoAttackRsp* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(autoattacklevel_, other->autoattacklevel_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyAutoAttackRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyAutoAttackRsp_descriptor_;
  metadata.reflection = BuyAutoAttackRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeSkillStatus::kChairIDFieldNumber;
const int ChangeSkillStatus::kSkillInfFieldNumber;
#endif  // !_MSC_VER

ChangeSkillStatus::ChangeSkillStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeSkillStatus::InitAsDefaultInstance() {
}

ChangeSkillStatus::ChangeSkillStatus(const ChangeSkillStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeSkillStatus::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeSkillStatus::~ChangeSkillStatus() {
  SharedDtor();
}

void ChangeSkillStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeSkillStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeSkillStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeSkillStatus_descriptor_;
}

const ChangeSkillStatus& ChangeSkillStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

ChangeSkillStatus* ChangeSkillStatus::default_instance_ = NULL;

ChangeSkillStatus* ChangeSkillStatus::New() const {
  return new ChangeSkillStatus;
}

void ChangeSkillStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
  }
  skillinf_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeSkillStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SkillInf;
        break;
      }

      // repeated .SY.SkillInfo SkillInf = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SkillInf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skillinf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SkillInf;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeSkillStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // repeated .SY.SkillInfo SkillInf = 2;
  for (int i = 0; i < this->skillinf_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->skillinf(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeSkillStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // repeated .SY.SkillInfo SkillInf = 2;
  for (int i = 0; i < this->skillinf_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->skillinf(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeSkillStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

  }
  // repeated .SY.SkillInfo SkillInf = 2;
  total_size += 1 * this->skillinf_size();
  for (int i = 0; i < this->skillinf_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skillinf(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeSkillStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeSkillStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeSkillStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeSkillStatus::MergeFrom(const ChangeSkillStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillinf_.MergeFrom(from.skillinf_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeSkillStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeSkillStatus::CopyFrom(const ChangeSkillStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeSkillStatus::IsInitialized() const {

  return true;
}

void ChangeSkillStatus::Swap(ChangeSkillStatus* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    skillinf_.Swap(&other->skillinf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeSkillStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeSkillStatus_descriptor_;
  metadata.reflection = ChangeSkillStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillHit::kTriggerSkillIDFieldNumber;
const int SkillHit::kMonsterIDFieldNumber;
#endif  // !_MSC_VER

SkillHit::SkillHit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillHit::InitAsDefaultInstance() {
}

SkillHit::SkillHit(const SkillHit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillHit::SharedCtor() {
  _cached_size_ = 0;
  triggerskillid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillHit::~SkillHit() {
  SharedDtor();
}

void SkillHit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillHit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillHit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillHit_descriptor_;
}

const SkillHit& SkillHit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

SkillHit* SkillHit::default_instance_ = NULL;

SkillHit* SkillHit::New() const {
  return new SkillHit;
}

void SkillHit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    triggerskillid_ = 0;
  }
  monsterid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillHit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 TriggerSkillID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &triggerskillid_)));
          set_has_triggerskillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MonsterID;
        break;
      }

      // repeated int32 MonsterID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MonsterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_monsterid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_monsterid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MonsterID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillHit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 TriggerSkillID = 1;
  if (has_triggerskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->triggerskillid(), output);
  }

  // repeated int32 MonsterID = 2;
  for (int i = 0; i < this->monsterid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->monsterid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillHit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 TriggerSkillID = 1;
  if (has_triggerskillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->triggerskillid(), target);
  }

  // repeated int32 MonsterID = 2;
  for (int i = 0; i < this->monsterid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->monsterid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillHit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 TriggerSkillID = 1;
    if (has_triggerskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->triggerskillid());
    }

  }
  // repeated int32 MonsterID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->monsterid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->monsterid(i));
    }
    total_size += 1 * this->monsterid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillHit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillHit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillHit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillHit::MergeFrom(const SkillHit& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsterid_.MergeFrom(from.monsterid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_triggerskillid()) {
      set_triggerskillid(from.triggerskillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillHit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillHit::CopyFrom(const SkillHit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillHit::IsInitialized() const {

  return true;
}

void SkillHit::Swap(SkillHit* other) {
  if (other != this) {
    std::swap(triggerskillid_, other->triggerskillid_);
    monsterid_.Swap(&other->monsterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillHit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillHit_descriptor_;
  metadata.reflection = SkillHit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerHit::kChairIDFieldNumber;
const int PlayerHit::kMonsterIDFieldNumber;
const int PlayerHit::kWeaponIDFieldNumber;
const int PlayerHit::kSkillListFieldNumber;
const int PlayerHit::kIsRobotFieldNumber;
const int PlayerHit::kHasPayWeaponCostFieldNumber;
const int PlayerHit::kMonsterIDListFieldNumber;
const int PlayerHit::kSkillHitListHasPayFieldNumber;
#endif  // !_MSC_VER

PlayerHit::PlayerHit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerHit::InitAsDefaultInstance() {
}

PlayerHit::PlayerHit(const PlayerHit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerHit::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  monsterid_ = 0;
  weaponid_ = 0;
  isrobot_ = false;
  haspayweaponcost_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerHit::~PlayerHit() {
  SharedDtor();
}

void PlayerHit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerHit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerHit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerHit_descriptor_;
}

const PlayerHit& PlayerHit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

PlayerHit* PlayerHit::default_instance_ = NULL;

PlayerHit* PlayerHit::New() const {
  return new PlayerHit;
}

void PlayerHit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    monsterid_ = 0;
    weaponid_ = 0;
    isrobot_ = false;
    haspayweaponcost_ = false;
  }
  skilllist_.Clear();
  monsteridlist_.Clear();
  skillhitlisthaspay_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerHit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MonsterID;
        break;
      }

      // optional int32 MonsterID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MonsterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_WeaponID;
        break;
      }

      // optional int32 WeaponID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weaponid_)));
          set_has_weaponid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_SkillList;
        break;
      }

      // repeated .SY.SkillHit SkillList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SkillList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skilllist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_SkillList;
        if (input->ExpectTag(40)) goto parse_IsRobot;
        break;
      }

      // optional bool IsRobot = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsRobot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrobot_)));
          set_has_isrobot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_HasPayWeaponCost;
        break;
      }

      // optional bool HasPayWeaponCost = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HasPayWeaponCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &haspayweaponcost_)));
          set_has_haspayweaponcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_MonsterIDList;
        break;
      }

      // repeated int32 MonsterIDList = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MonsterIDList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_monsteridlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_monsteridlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_MonsterIDList;
        if (input->ExpectTag(64)) goto parse_SkillHitListHasPay;
        break;
      }

      // repeated int32 SkillHitListHasPay = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkillHitListHasPay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_skillhitlisthaspay())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skillhitlisthaspay())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_SkillHitListHasPay;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerHit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 MonsterID = 2;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->monsterid(), output);
  }

  // optional int32 WeaponID = 3;
  if (has_weaponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->weaponid(), output);
  }

  // repeated .SY.SkillHit SkillList = 4;
  for (int i = 0; i < this->skilllist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->skilllist(i), output);
  }

  // optional bool IsRobot = 5;
  if (has_isrobot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isrobot(), output);
  }

  // optional bool HasPayWeaponCost = 6;
  if (has_haspayweaponcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->haspayweaponcost(), output);
  }

  // repeated int32 MonsterIDList = 7;
  for (int i = 0; i < this->monsteridlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->monsteridlist(i), output);
  }

  // repeated int32 SkillHitListHasPay = 8;
  for (int i = 0; i < this->skillhitlisthaspay_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->skillhitlisthaspay(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerHit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 MonsterID = 2;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->monsterid(), target);
  }

  // optional int32 WeaponID = 3;
  if (has_weaponid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->weaponid(), target);
  }

  // repeated .SY.SkillHit SkillList = 4;
  for (int i = 0; i < this->skilllist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->skilllist(i), target);
  }

  // optional bool IsRobot = 5;
  if (has_isrobot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isrobot(), target);
  }

  // optional bool HasPayWeaponCost = 6;
  if (has_haspayweaponcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->haspayweaponcost(), target);
  }

  // repeated int32 MonsterIDList = 7;
  for (int i = 0; i < this->monsteridlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->monsteridlist(i), target);
  }

  // repeated int32 SkillHitListHasPay = 8;
  for (int i = 0; i < this->skillhitlisthaspay_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->skillhitlisthaspay(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerHit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 MonsterID = 2;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monsterid());
    }

    // optional int32 WeaponID = 3;
    if (has_weaponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weaponid());
    }

    // optional bool IsRobot = 5;
    if (has_isrobot()) {
      total_size += 1 + 1;
    }

    // optional bool HasPayWeaponCost = 6;
    if (has_haspayweaponcost()) {
      total_size += 1 + 1;
    }

  }
  // repeated .SY.SkillHit SkillList = 4;
  total_size += 1 * this->skilllist_size();
  for (int i = 0; i < this->skilllist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skilllist(i));
  }

  // repeated int32 MonsterIDList = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->monsteridlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->monsteridlist(i));
    }
    total_size += 1 * this->monsteridlist_size() + data_size;
  }

  // repeated int32 SkillHitListHasPay = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillhitlisthaspay_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skillhitlisthaspay(i));
    }
    total_size += 1 * this->skillhitlisthaspay_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerHit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerHit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerHit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerHit::MergeFrom(const PlayerHit& from) {
  GOOGLE_CHECK_NE(&from, this);
  skilllist_.MergeFrom(from.skilllist_);
  monsteridlist_.MergeFrom(from.monsteridlist_);
  skillhitlisthaspay_.MergeFrom(from.skillhitlisthaspay_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_weaponid()) {
      set_weaponid(from.weaponid());
    }
    if (from.has_isrobot()) {
      set_isrobot(from.isrobot());
    }
    if (from.has_haspayweaponcost()) {
      set_haspayweaponcost(from.haspayweaponcost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerHit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerHit::CopyFrom(const PlayerHit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerHit::IsInitialized() const {

  return true;
}

void PlayerHit::Swap(PlayerHit* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(monsterid_, other->monsterid_);
    std::swap(weaponid_, other->weaponid_);
    skilllist_.Swap(&other->skilllist_);
    std::swap(isrobot_, other->isrobot_);
    std::swap(haspayweaponcost_, other->haspayweaponcost_);
    monsteridlist_.Swap(&other->monsteridlist_);
    skillhitlisthaspay_.Swap(&other->skillhitlisthaspay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerHit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerHit_descriptor_;
  metadata.reflection = PlayerHit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerHitSync::kChairIDFieldNumber;
const int PlayerHitSync::kMonsterIDFieldNumber;
const int PlayerHitSync::kWeaponIDFieldNumber;
const int PlayerHitSync::kSkillListFieldNumber;
const int PlayerHitSync::kUserMoneyNumFieldNumber;
const int PlayerHitSync::kUserTicketNumFieldNumber;
#endif  // !_MSC_VER

PlayerHitSync::PlayerHitSync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerHitSync::InitAsDefaultInstance() {
}

PlayerHitSync::PlayerHitSync(const PlayerHitSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerHitSync::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  monsterid_ = 0;
  weaponid_ = 0;
  usermoneynum_ = GOOGLE_LONGLONG(0);
  userticketnum_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerHitSync::~PlayerHitSync() {
  SharedDtor();
}

void PlayerHitSync::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerHitSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerHitSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerHitSync_descriptor_;
}

const PlayerHitSync& PlayerHitSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

PlayerHitSync* PlayerHitSync::default_instance_ = NULL;

PlayerHitSync* PlayerHitSync::New() const {
  return new PlayerHitSync;
}

void PlayerHitSync::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    monsterid_ = 0;
    weaponid_ = 0;
    usermoneynum_ = GOOGLE_LONGLONG(0);
    userticketnum_ = GOOGLE_LONGLONG(0);
  }
  skilllist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerHitSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MonsterID;
        break;
      }

      // optional int32 MonsterID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MonsterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_WeaponID;
        break;
      }

      // optional int32 WeaponID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weaponid_)));
          set_has_weaponid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_SkillList;
        break;
      }

      // repeated .SY.SkillHit SkillList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SkillList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skilllist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_SkillList;
        if (input->ExpectTag(40)) goto parse_UserMoneyNum;
        break;
      }

      // optional int64 UserMoneyNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserMoneyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &usermoneynum_)));
          set_has_usermoneynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_UserTicketNum;
        break;
      }

      // optional int64 UserTicketNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserTicketNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userticketnum_)));
          set_has_userticketnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerHitSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional int32 MonsterID = 2;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->monsterid(), output);
  }

  // optional int32 WeaponID = 3;
  if (has_weaponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->weaponid(), output);
  }

  // repeated .SY.SkillHit SkillList = 4;
  for (int i = 0; i < this->skilllist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->skilllist(i), output);
  }

  // optional int64 UserMoneyNum = 5;
  if (has_usermoneynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->usermoneynum(), output);
  }

  // optional int64 UserTicketNum = 6;
  if (has_userticketnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->userticketnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerHitSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional int32 MonsterID = 2;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->monsterid(), target);
  }

  // optional int32 WeaponID = 3;
  if (has_weaponid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->weaponid(), target);
  }

  // repeated .SY.SkillHit SkillList = 4;
  for (int i = 0; i < this->skilllist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->skilllist(i), target);
  }

  // optional int64 UserMoneyNum = 5;
  if (has_usermoneynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->usermoneynum(), target);
  }

  // optional int64 UserTicketNum = 6;
  if (has_userticketnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->userticketnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerHitSync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional int32 MonsterID = 2;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monsterid());
    }

    // optional int32 WeaponID = 3;
    if (has_weaponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weaponid());
    }

    // optional int64 UserMoneyNum = 5;
    if (has_usermoneynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->usermoneynum());
    }

    // optional int64 UserTicketNum = 6;
    if (has_userticketnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->userticketnum());
    }

  }
  // repeated .SY.SkillHit SkillList = 4;
  total_size += 1 * this->skilllist_size();
  for (int i = 0; i < this->skilllist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skilllist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerHitSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerHitSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerHitSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerHitSync::MergeFrom(const PlayerHitSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  skilllist_.MergeFrom(from.skilllist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_weaponid()) {
      set_weaponid(from.weaponid());
    }
    if (from.has_usermoneynum()) {
      set_usermoneynum(from.usermoneynum());
    }
    if (from.has_userticketnum()) {
      set_userticketnum(from.userticketnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerHitSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerHitSync::CopyFrom(const PlayerHitSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerHitSync::IsInitialized() const {

  return true;
}

void PlayerHitSync::Swap(PlayerHitSync* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(monsterid_, other->monsterid_);
    std::swap(weaponid_, other->weaponid_);
    skilllist_.Swap(&other->skilllist_);
    std::swap(usermoneynum_, other->usermoneynum_);
    std::swap(userticketnum_, other->userticketnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerHitSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerHitSync_descriptor_;
  metadata.reflection = PlayerHitSync_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonsterIncoming::kMonsterIDFieldNumber;
const int MonsterIncoming::kKillRateFieldNumber;
const int MonsterIncoming::kUserMoneyNumFieldNumber;
const int MonsterIncoming::kUserTicketNumFieldNumber;
const int MonsterIncoming::kWeaponCostExFieldNumber;
#endif  // !_MSC_VER

MonsterIncoming::MonsterIncoming()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonsterIncoming::InitAsDefaultInstance() {
}

MonsterIncoming::MonsterIncoming(const MonsterIncoming& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonsterIncoming::SharedCtor() {
  _cached_size_ = 0;
  monsterid_ = 0;
  killrate_ = 0;
  usermoneynum_ = 0;
  userticketnum_ = 0;
  weaponcostex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonsterIncoming::~MonsterIncoming() {
  SharedDtor();
}

void MonsterIncoming::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MonsterIncoming::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonsterIncoming::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonsterIncoming_descriptor_;
}

const MonsterIncoming& MonsterIncoming::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

MonsterIncoming* MonsterIncoming::default_instance_ = NULL;

MonsterIncoming* MonsterIncoming::New() const {
  return new MonsterIncoming;
}

void MonsterIncoming::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monsterid_ = 0;
    killrate_ = 0;
    usermoneynum_ = 0;
    userticketnum_ = 0;
    weaponcostex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonsterIncoming::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 MonsterID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_KillRate;
        break;
      }

      // optional int32 KillRate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_KillRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killrate_)));
          set_has_killrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_UserMoneyNum;
        break;
      }

      // optional int32 UserMoneyNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserMoneyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usermoneynum_)));
          set_has_usermoneynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_UserTicketNum;
        break;
      }

      // optional int32 UserTicketNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserTicketNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userticketnum_)));
          set_has_userticketnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_WeaponCostEx;
        break;
      }

      // optional int32 WeaponCostEx = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponCostEx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weaponcostex_)));
          set_has_weaponcostex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonsterIncoming::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 MonsterID = 1;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->monsterid(), output);
  }

  // optional int32 KillRate = 2;
  if (has_killrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->killrate(), output);
  }

  // optional int32 UserMoneyNum = 3;
  if (has_usermoneynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->usermoneynum(), output);
  }

  // optional int32 UserTicketNum = 4;
  if (has_userticketnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->userticketnum(), output);
  }

  // optional int32 WeaponCostEx = 5;
  if (has_weaponcostex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->weaponcostex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonsterIncoming::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 MonsterID = 1;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->monsterid(), target);
  }

  // optional int32 KillRate = 2;
  if (has_killrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->killrate(), target);
  }

  // optional int32 UserMoneyNum = 3;
  if (has_usermoneynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->usermoneynum(), target);
  }

  // optional int32 UserTicketNum = 4;
  if (has_userticketnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->userticketnum(), target);
  }

  // optional int32 WeaponCostEx = 5;
  if (has_weaponcostex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->weaponcostex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonsterIncoming::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 MonsterID = 1;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monsterid());
    }

    // optional int32 KillRate = 2;
    if (has_killrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killrate());
    }

    // optional int32 UserMoneyNum = 3;
    if (has_usermoneynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usermoneynum());
    }

    // optional int32 UserTicketNum = 4;
    if (has_userticketnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userticketnum());
    }

    // optional int32 WeaponCostEx = 5;
    if (has_weaponcostex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weaponcostex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonsterIncoming::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonsterIncoming* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonsterIncoming*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonsterIncoming::MergeFrom(const MonsterIncoming& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_killrate()) {
      set_killrate(from.killrate());
    }
    if (from.has_usermoneynum()) {
      set_usermoneynum(from.usermoneynum());
    }
    if (from.has_userticketnum()) {
      set_userticketnum(from.userticketnum());
    }
    if (from.has_weaponcostex()) {
      set_weaponcostex(from.weaponcostex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonsterIncoming::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterIncoming::CopyFrom(const MonsterIncoming& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterIncoming::IsInitialized() const {

  return true;
}

void MonsterIncoming::Swap(MonsterIncoming* other) {
  if (other != this) {
    std::swap(monsterid_, other->monsterid_);
    std::swap(killrate_, other->killrate_);
    std::swap(usermoneynum_, other->usermoneynum_);
    std::swap(userticketnum_, other->userticketnum_);
    std::swap(weaponcostex_, other->weaponcostex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonsterIncoming::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonsterIncoming_descriptor_;
  metadata.reflection = MonsterIncoming_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerHitIncoming::kChairIDFieldNumber;
const int PlayerHitIncoming::kIncomingListFieldNumber;
#endif  // !_MSC_VER

PlayerHitIncoming::PlayerHitIncoming()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerHitIncoming::InitAsDefaultInstance() {
}

PlayerHitIncoming::PlayerHitIncoming(const PlayerHitIncoming& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerHitIncoming::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerHitIncoming::~PlayerHitIncoming() {
  SharedDtor();
}

void PlayerHitIncoming::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerHitIncoming::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerHitIncoming::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerHitIncoming_descriptor_;
}

const PlayerHitIncoming& PlayerHitIncoming::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

PlayerHitIncoming* PlayerHitIncoming::default_instance_ = NULL;

PlayerHitIncoming* PlayerHitIncoming::New() const {
  return new PlayerHitIncoming;
}

void PlayerHitIncoming::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
  }
  incominglist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerHitIncoming::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_IncomingList;
        break;
      }

      // repeated .SY.MonsterIncoming IncomingList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IncomingList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_incominglist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_IncomingList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerHitIncoming::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // repeated .SY.MonsterIncoming IncomingList = 2;
  for (int i = 0; i < this->incominglist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->incominglist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerHitIncoming::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // repeated .SY.MonsterIncoming IncomingList = 2;
  for (int i = 0; i < this->incominglist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->incominglist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerHitIncoming::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

  }
  // repeated .SY.MonsterIncoming IncomingList = 2;
  total_size += 1 * this->incominglist_size();
  for (int i = 0; i < this->incominglist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->incominglist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerHitIncoming::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerHitIncoming* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerHitIncoming*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerHitIncoming::MergeFrom(const PlayerHitIncoming& from) {
  GOOGLE_CHECK_NE(&from, this);
  incominglist_.MergeFrom(from.incominglist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerHitIncoming::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerHitIncoming::CopyFrom(const PlayerHitIncoming& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerHitIncoming::IsInitialized() const {

  return true;
}

void PlayerHitIncoming::Swap(PlayerHitIncoming* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    incominglist_.Swap(&other->incominglist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerHitIncoming::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerHitIncoming_descriptor_;
  metadata.reflection = PlayerHitIncoming_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
#endif  // !_MSC_VER

Point::Point()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Point::InitAsDefaultInstance() {
}

Point::Point(const Point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point::~Point() {
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New() const {
  return new Point;
}

void Point::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Point::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {

  return true;
}

void Point::Swap(Point* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonsterTrace::kMonsterIDFieldNumber;
const int MonsterTrace::kTypeIDFieldNumber;
const int MonsterTrace::kCurHPFieldNumber;
const int MonsterTrace::kMaxHPFieldNumber;
const int MonsterTrace::kSpeedFieldNumber;
const int MonsterTrace::kRespawnIndexFieldNumber;
const int MonsterTrace::kRespawnPositionFieldNumber;
const int MonsterTrace::kMoveDestinationFieldNumber;
const int MonsterTrace::kEscapseDestinationFieldNumber;
const int MonsterTrace::kDelayMoveTimeFieldNumber;
const int MonsterTrace::kDelayEscapeTimeFieldNumber;
const int MonsterTrace::kSpeedRateFieldNumber;
#endif  // !_MSC_VER

MonsterTrace::MonsterTrace()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonsterTrace::InitAsDefaultInstance() {
}

MonsterTrace::MonsterTrace(const MonsterTrace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonsterTrace::SharedCtor() {
  _cached_size_ = 0;
  monsterid_ = 0;
  typeid__ = 0;
  curhp_ = 0;
  maxhp_ = 0;
  speed_ = 0;
  respawnindex_ = 0;
  delaymovetime_ = 0;
  delayescapetime_ = 0;
  speedrate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonsterTrace::~MonsterTrace() {
  SharedDtor();
}

void MonsterTrace::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MonsterTrace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonsterTrace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonsterTrace_descriptor_;
}

const MonsterTrace& MonsterTrace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

MonsterTrace* MonsterTrace::default_instance_ = NULL;

MonsterTrace* MonsterTrace::New() const {
  return new MonsterTrace;
}

void MonsterTrace::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monsterid_ = 0;
    typeid__ = 0;
    curhp_ = 0;
    maxhp_ = 0;
    speed_ = 0;
    respawnindex_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    delaymovetime_ = 0;
    delayescapetime_ = 0;
    speedrate_ = 0;
  }
  respawnposition_.Clear();
  movedestination_.Clear();
  escapsedestination_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonsterTrace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 MonsterID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TypeID;
        break;
      }

      // optional int32 TypeID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
          set_has_typeid_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_CurHP;
        break;
      }

      // optional int32 CurHP = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_MaxHP;
        break;
      }

      // optional int32 MaxHP = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_Speed;
        break;
      }

      // optional float Speed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_RespawnIndex;
        break;
      }

      // optional int32 RespawnIndex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RespawnIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &respawnindex_)));
          set_has_respawnindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_RespawnPosition;
        break;
      }

      // repeated .SY.Point RespawnPosition = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RespawnPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_respawnposition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_RespawnPosition;
        if (input->ExpectTag(66)) goto parse_MoveDestination;
        break;
      }

      // repeated .SY.Point MoveDestination = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MoveDestination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_movedestination()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_MoveDestination;
        if (input->ExpectTag(74)) goto parse_EscapseDestination;
        break;
      }

      // repeated .SY.Point EscapseDestination = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EscapseDestination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_escapsedestination()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_EscapseDestination;
        if (input->ExpectTag(85)) goto parse_DelayMoveTime;
        break;
      }

      // optional float DelayMoveTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_DelayMoveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delaymovetime_)));
          set_has_delaymovetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_DelayEscapeTime;
        break;
      }

      // optional float DelayEscapeTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_DelayEscapeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delayescapetime_)));
          set_has_delayescapetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_SpeedRate;
        break;
      }

      // optional float SpeedRate = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_SpeedRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speedrate_)));
          set_has_speedrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonsterTrace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 MonsterID = 1;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->monsterid(), output);
  }

  // optional int32 TypeID = 2;
  if (has_typeid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->typeid_(), output);
  }

  // optional int32 CurHP = 3;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->curhp(), output);
  }

  // optional int32 MaxHP = 4;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxhp(), output);
  }

  // optional float Speed = 5;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->speed(), output);
  }

  // optional int32 RespawnIndex = 6;
  if (has_respawnindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->respawnindex(), output);
  }

  // repeated .SY.Point RespawnPosition = 7;
  for (int i = 0; i < this->respawnposition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->respawnposition(i), output);
  }

  // repeated .SY.Point MoveDestination = 8;
  for (int i = 0; i < this->movedestination_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->movedestination(i), output);
  }

  // repeated .SY.Point EscapseDestination = 9;
  for (int i = 0; i < this->escapsedestination_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->escapsedestination(i), output);
  }

  // optional float DelayMoveTime = 10;
  if (has_delaymovetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->delaymovetime(), output);
  }

  // optional float DelayEscapeTime = 11;
  if (has_delayescapetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->delayescapetime(), output);
  }

  // optional float SpeedRate = 12;
  if (has_speedrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->speedrate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonsterTrace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 MonsterID = 1;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->monsterid(), target);
  }

  // optional int32 TypeID = 2;
  if (has_typeid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->typeid_(), target);
  }

  // optional int32 CurHP = 3;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->curhp(), target);
  }

  // optional int32 MaxHP = 4;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxhp(), target);
  }

  // optional float Speed = 5;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->speed(), target);
  }

  // optional int32 RespawnIndex = 6;
  if (has_respawnindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->respawnindex(), target);
  }

  // repeated .SY.Point RespawnPosition = 7;
  for (int i = 0; i < this->respawnposition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->respawnposition(i), target);
  }

  // repeated .SY.Point MoveDestination = 8;
  for (int i = 0; i < this->movedestination_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->movedestination(i), target);
  }

  // repeated .SY.Point EscapseDestination = 9;
  for (int i = 0; i < this->escapsedestination_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->escapsedestination(i), target);
  }

  // optional float DelayMoveTime = 10;
  if (has_delaymovetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->delaymovetime(), target);
  }

  // optional float DelayEscapeTime = 11;
  if (has_delayescapetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->delayescapetime(), target);
  }

  // optional float SpeedRate = 12;
  if (has_speedrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->speedrate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonsterTrace::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 MonsterID = 1;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monsterid());
    }

    // optional int32 TypeID = 2;
    if (has_typeid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typeid_());
    }

    // optional int32 CurHP = 3;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curhp());
    }

    // optional int32 MaxHP = 4;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxhp());
    }

    // optional float Speed = 5;
    if (has_speed()) {
      total_size += 1 + 4;
    }

    // optional int32 RespawnIndex = 6;
    if (has_respawnindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->respawnindex());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional float DelayMoveTime = 10;
    if (has_delaymovetime()) {
      total_size += 1 + 4;
    }

    // optional float DelayEscapeTime = 11;
    if (has_delayescapetime()) {
      total_size += 1 + 4;
    }

    // optional float SpeedRate = 12;
    if (has_speedrate()) {
      total_size += 1 + 4;
    }

  }
  // repeated .SY.Point RespawnPosition = 7;
  total_size += 1 * this->respawnposition_size();
  for (int i = 0; i < this->respawnposition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->respawnposition(i));
  }

  // repeated .SY.Point MoveDestination = 8;
  total_size += 1 * this->movedestination_size();
  for (int i = 0; i < this->movedestination_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->movedestination(i));
  }

  // repeated .SY.Point EscapseDestination = 9;
  total_size += 1 * this->escapsedestination_size();
  for (int i = 0; i < this->escapsedestination_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->escapsedestination(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonsterTrace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonsterTrace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonsterTrace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonsterTrace::MergeFrom(const MonsterTrace& from) {
  GOOGLE_CHECK_NE(&from, this);
  respawnposition_.MergeFrom(from.respawnposition_);
  movedestination_.MergeFrom(from.movedestination_);
  escapsedestination_.MergeFrom(from.escapsedestination_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_typeid_()) {
      set_typeid_(from.typeid_());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_respawnindex()) {
      set_respawnindex(from.respawnindex());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_delaymovetime()) {
      set_delaymovetime(from.delaymovetime());
    }
    if (from.has_delayescapetime()) {
      set_delayescapetime(from.delayescapetime());
    }
    if (from.has_speedrate()) {
      set_speedrate(from.speedrate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonsterTrace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterTrace::CopyFrom(const MonsterTrace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterTrace::IsInitialized() const {

  return true;
}

void MonsterTrace::Swap(MonsterTrace* other) {
  if (other != this) {
    std::swap(monsterid_, other->monsterid_);
    std::swap(typeid__, other->typeid__);
    std::swap(curhp_, other->curhp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(speed_, other->speed_);
    std::swap(respawnindex_, other->respawnindex_);
    respawnposition_.Swap(&other->respawnposition_);
    movedestination_.Swap(&other->movedestination_);
    escapsedestination_.Swap(&other->escapsedestination_);
    std::swap(delaymovetime_, other->delaymovetime_);
    std::swap(delayescapetime_, other->delayescapetime_);
    std::swap(speedrate_, other->speedrate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonsterTrace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonsterTrace_descriptor_;
  metadata.reflection = MonsterTrace_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonsterTraces::kIsGroupFieldNumber;
const int MonsterTraces::kTracesFieldNumber;
#endif  // !_MSC_VER

MonsterTraces::MonsterTraces()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonsterTraces::InitAsDefaultInstance() {
}

MonsterTraces::MonsterTraces(const MonsterTraces& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonsterTraces::SharedCtor() {
  _cached_size_ = 0;
  isgroup_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonsterTraces::~MonsterTraces() {
  SharedDtor();
}

void MonsterTraces::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MonsterTraces::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonsterTraces::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonsterTraces_descriptor_;
}

const MonsterTraces& MonsterTraces::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

MonsterTraces* MonsterTraces::default_instance_ = NULL;

MonsterTraces* MonsterTraces::New() const {
  return new MonsterTraces;
}

void MonsterTraces::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isgroup_ = false;
  }
  traces_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonsterTraces::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool IsGroup = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isgroup_)));
          set_has_isgroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Traces;
        break;
      }

      // repeated .SY.MonsterTrace Traces = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Traces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_traces()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Traces;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonsterTraces::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool IsGroup = 1;
  if (has_isgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isgroup(), output);
  }

  // repeated .SY.MonsterTrace Traces = 2;
  for (int i = 0; i < this->traces_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->traces(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonsterTraces::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool IsGroup = 1;
  if (has_isgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isgroup(), target);
  }

  // repeated .SY.MonsterTrace Traces = 2;
  for (int i = 0; i < this->traces_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->traces(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonsterTraces::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool IsGroup = 1;
    if (has_isgroup()) {
      total_size += 1 + 1;
    }

  }
  // repeated .SY.MonsterTrace Traces = 2;
  total_size += 1 * this->traces_size();
  for (int i = 0; i < this->traces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->traces(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonsterTraces::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonsterTraces* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonsterTraces*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonsterTraces::MergeFrom(const MonsterTraces& from) {
  GOOGLE_CHECK_NE(&from, this);
  traces_.MergeFrom(from.traces_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isgroup()) {
      set_isgroup(from.isgroup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonsterTraces::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterTraces::CopyFrom(const MonsterTraces& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterTraces::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MonsterTraces::Swap(MonsterTraces* other) {
  if (other != this) {
    std::swap(isgroup_, other->isgroup_);
    traces_.Swap(&other->traces_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonsterTraces::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonsterTraces_descriptor_;
  metadata.reflection = MonsterTraces_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeScene::kSceneIndexFieldNumber;
#endif  // !_MSC_VER

ChangeScene::ChangeScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeScene::InitAsDefaultInstance() {
}

ChangeScene::ChangeScene(const ChangeScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeScene::SharedCtor() {
  _cached_size_ = 0;
  sceneindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeScene::~ChangeScene() {
  SharedDtor();
}

void ChangeScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeScene_descriptor_;
}

const ChangeScene& ChangeScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

ChangeScene* ChangeScene::default_instance_ = NULL;

ChangeScene* ChangeScene::New() const {
  return new ChangeScene;
}

void ChangeScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 SceneIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sceneindex_)));
          set_has_sceneindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 SceneIndex = 1;
  if (has_sceneindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sceneindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 SceneIndex = 1;
  if (has_sceneindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sceneindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 SceneIndex = 1;
    if (has_sceneindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sceneindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeScene::MergeFrom(const ChangeScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneindex()) {
      set_sceneindex(from.sceneindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeScene::CopyFrom(const ChangeScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChangeScene::Swap(ChangeScene* other) {
  if (other != this) {
    std::swap(sceneindex_, other->sceneindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeScene_descriptor_;
  metadata.reflection = ChangeScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllMonsterId::kIdFieldNumber;
#endif  // !_MSC_VER

AllMonsterId::AllMonsterId()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllMonsterId::InitAsDefaultInstance() {
}

AllMonsterId::AllMonsterId(const AllMonsterId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllMonsterId::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllMonsterId::~AllMonsterId() {
  SharedDtor();
}

void AllMonsterId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllMonsterId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllMonsterId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllMonsterId_descriptor_;
}

const AllMonsterId& AllMonsterId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

AllMonsterId* AllMonsterId::default_instance_ = NULL;

AllMonsterId* AllMonsterId::New() const {
  return new AllMonsterId;
}

void AllMonsterId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllMonsterId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllMonsterId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllMonsterId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllMonsterId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllMonsterId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllMonsterId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllMonsterId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllMonsterId::MergeFrom(const AllMonsterId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllMonsterId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllMonsterId::CopyFrom(const AllMonsterId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllMonsterId::IsInitialized() const {

  return true;
}

void AllMonsterId::Swap(AllMonsterId* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllMonsterId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllMonsterId_descriptor_;
  metadata.reflection = AllMonsterId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WildSkillStatus::kWildSkillStatusFieldNumber;
const int WildSkillStatus::kRemainTimeFieldNumber;
const int WildSkillStatus::kWildSkillCostRateFieldNumber;
const int WildSkillStatus::kWildMonsterIdFieldNumber;
#endif  // !_MSC_VER

WildSkillStatus::WildSkillStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WildSkillStatus::InitAsDefaultInstance() {
}

WildSkillStatus::WildSkillStatus(const WildSkillStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WildSkillStatus::SharedCtor() {
  _cached_size_ = 0;
  wild_skill_status_ = 0;
  remain_time_ = 0;
  wild_skill_cost_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WildSkillStatus::~WildSkillStatus() {
  SharedDtor();
}

void WildSkillStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WildSkillStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WildSkillStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WildSkillStatus_descriptor_;
}

const WildSkillStatus& WildSkillStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

WildSkillStatus* WildSkillStatus::default_instance_ = NULL;

WildSkillStatus* WildSkillStatus::New() const {
  return new WildSkillStatus;
}

void WildSkillStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wild_skill_status_ = 0;
    remain_time_ = 0;
    wild_skill_cost_rate_ = 0;
  }
  wild_monster_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WildSkillStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 wild_skill_status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wild_skill_status_)));
          set_has_wild_skill_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_remain_time;
        break;
      }

      // optional int32 remain_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_time_)));
          set_has_remain_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_wild_skill_cost_rate;
        break;
      }

      // optional float wild_skill_cost_rate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wild_skill_cost_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wild_skill_cost_rate_)));
          set_has_wild_skill_cost_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_wild_monster_id;
        break;
      }

      // repeated .SY.AllMonsterId wild_monster_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wild_monster_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wild_monster_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_wild_monster_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WildSkillStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 wild_skill_status = 1;
  if (has_wild_skill_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wild_skill_status(), output);
  }

  // optional int32 remain_time = 2;
  if (has_remain_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->remain_time(), output);
  }

  // optional float wild_skill_cost_rate = 3;
  if (has_wild_skill_cost_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->wild_skill_cost_rate(), output);
  }

  // repeated .SY.AllMonsterId wild_monster_id = 4;
  for (int i = 0; i < this->wild_monster_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->wild_monster_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WildSkillStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 wild_skill_status = 1;
  if (has_wild_skill_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wild_skill_status(), target);
  }

  // optional int32 remain_time = 2;
  if (has_remain_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->remain_time(), target);
  }

  // optional float wild_skill_cost_rate = 3;
  if (has_wild_skill_cost_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->wild_skill_cost_rate(), target);
  }

  // repeated .SY.AllMonsterId wild_monster_id = 4;
  for (int i = 0; i < this->wild_monster_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->wild_monster_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WildSkillStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 wild_skill_status = 1;
    if (has_wild_skill_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wild_skill_status());
    }

    // optional int32 remain_time = 2;
    if (has_remain_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_time());
    }

    // optional float wild_skill_cost_rate = 3;
    if (has_wild_skill_cost_rate()) {
      total_size += 1 + 4;
    }

  }
  // repeated .SY.AllMonsterId wild_monster_id = 4;
  total_size += 1 * this->wild_monster_id_size();
  for (int i = 0; i < this->wild_monster_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wild_monster_id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WildSkillStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WildSkillStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WildSkillStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WildSkillStatus::MergeFrom(const WildSkillStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  wild_monster_id_.MergeFrom(from.wild_monster_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wild_skill_status()) {
      set_wild_skill_status(from.wild_skill_status());
    }
    if (from.has_remain_time()) {
      set_remain_time(from.remain_time());
    }
    if (from.has_wild_skill_cost_rate()) {
      set_wild_skill_cost_rate(from.wild_skill_cost_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WildSkillStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WildSkillStatus::CopyFrom(const WildSkillStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WildSkillStatus::IsInitialized() const {

  return true;
}

void WildSkillStatus::Swap(WildSkillStatus* other) {
  if (other != this) {
    std::swap(wild_skill_status_, other->wild_skill_status_);
    std::swap(remain_time_, other->remain_time_);
    std::swap(wild_skill_cost_rate_, other->wild_skill_cost_rate_);
    wild_monster_id_.Swap(&other->wild_monster_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WildSkillStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WildSkillStatus_descriptor_;
  metadata.reflection = WildSkillStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WildSkillWeaponCostModify::kWildSkillWeaponCostModifyFieldNumber;
#endif  // !_MSC_VER

WildSkillWeaponCostModify::WildSkillWeaponCostModify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WildSkillWeaponCostModify::InitAsDefaultInstance() {
}

WildSkillWeaponCostModify::WildSkillWeaponCostModify(const WildSkillWeaponCostModify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WildSkillWeaponCostModify::SharedCtor() {
  _cached_size_ = 0;
  wild_skill_weapon_cost_modify_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WildSkillWeaponCostModify::~WildSkillWeaponCostModify() {
  SharedDtor();
}

void WildSkillWeaponCostModify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WildSkillWeaponCostModify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WildSkillWeaponCostModify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WildSkillWeaponCostModify_descriptor_;
}

const WildSkillWeaponCostModify& WildSkillWeaponCostModify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

WildSkillWeaponCostModify* WildSkillWeaponCostModify::default_instance_ = NULL;

WildSkillWeaponCostModify* WildSkillWeaponCostModify::New() const {
  return new WildSkillWeaponCostModify;
}

void WildSkillWeaponCostModify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wild_skill_weapon_cost_modify_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WildSkillWeaponCostModify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 wild_skill_weapon_cost_modify = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wild_skill_weapon_cost_modify_)));
          set_has_wild_skill_weapon_cost_modify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WildSkillWeaponCostModify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 wild_skill_weapon_cost_modify = 1;
  if (has_wild_skill_weapon_cost_modify()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wild_skill_weapon_cost_modify(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WildSkillWeaponCostModify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 wild_skill_weapon_cost_modify = 1;
  if (has_wild_skill_weapon_cost_modify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wild_skill_weapon_cost_modify(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WildSkillWeaponCostModify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 wild_skill_weapon_cost_modify = 1;
    if (has_wild_skill_weapon_cost_modify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wild_skill_weapon_cost_modify());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WildSkillWeaponCostModify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WildSkillWeaponCostModify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WildSkillWeaponCostModify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WildSkillWeaponCostModify::MergeFrom(const WildSkillWeaponCostModify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wild_skill_weapon_cost_modify()) {
      set_wild_skill_weapon_cost_modify(from.wild_skill_weapon_cost_modify());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WildSkillWeaponCostModify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WildSkillWeaponCostModify::CopyFrom(const WildSkillWeaponCostModify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WildSkillWeaponCostModify::IsInitialized() const {

  return true;
}

void WildSkillWeaponCostModify::Swap(WildSkillWeaponCostModify* other) {
  if (other != this) {
    std::swap(wild_skill_weapon_cost_modify_, other->wild_skill_weapon_cost_modify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WildSkillWeaponCostModify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WildSkillWeaponCostModify_descriptor_;
  metadata.reflection = WildSkillWeaponCostModify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadcastS2C::kTextFieldNumber;
const int BroadcastS2C::kUserNameFieldNumber;
const int BroadcastS2C::kWeaponIDFieldNumber;
const int BroadcastS2C::kMonsterNameFieldNumber;
const int BroadcastS2C::kRewardMoneyNumFieldNumber;
const int BroadcastS2C::kRewardTicketNumFieldNumber;
#endif  // !_MSC_VER

BroadcastS2C::BroadcastS2C()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BroadcastS2C::InitAsDefaultInstance() {
}

BroadcastS2C::BroadcastS2C(const BroadcastS2C& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BroadcastS2C::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weaponid_ = 0;
  monstername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rewardmoneynum_ = 0;
  rewardticketnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadcastS2C::~BroadcastS2C() {
  SharedDtor();
}

void BroadcastS2C::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (monstername_ != &::google::protobuf::internal::kEmptyString) {
    delete monstername_;
  }
  if (this != default_instance_) {
  }
}

void BroadcastS2C::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadcastS2C::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadcastS2C_descriptor_;
}

const BroadcastS2C& BroadcastS2C::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

BroadcastS2C* BroadcastS2C::default_instance_ = NULL;

BroadcastS2C* BroadcastS2C::New() const {
  return new BroadcastS2C;
}

void BroadcastS2C::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    weaponid_ = 0;
    if (has_monstername()) {
      if (monstername_ != &::google::protobuf::internal::kEmptyString) {
        monstername_->clear();
      }
    }
    rewardmoneynum_ = 0;
    rewardticketnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadcastS2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_UserName;
        break;
      }

      // optional string UserName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_WeaponID;
        break;
      }

      // optional int32 WeaponID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weaponid_)));
          set_has_weaponid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_MonsterName;
        break;
      }

      // optional string MonsterName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MonsterName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monstername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->monstername().data(), this->monstername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_RewardMoneyNum;
        break;
      }

      // optional int32 RewardMoneyNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RewardMoneyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardmoneynum_)));
          set_has_rewardmoneynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_RewardTicketNum;
        break;
      }

      // optional int32 RewardTicketNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RewardTicketNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardticketnum_)));
          set_has_rewardticketnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BroadcastS2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }

  // optional string UserName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }

  // optional int32 WeaponID = 3;
  if (has_weaponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->weaponid(), output);
  }

  // optional string MonsterName = 4;
  if (has_monstername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->monstername().data(), this->monstername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->monstername(), output);
  }

  // optional int32 RewardMoneyNum = 5;
  if (has_rewardmoneynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rewardmoneynum(), output);
  }

  // optional int32 RewardTicketNum = 6;
  if (has_rewardticketnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rewardticketnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BroadcastS2C::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  // optional string UserName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional int32 WeaponID = 3;
  if (has_weaponid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->weaponid(), target);
  }

  // optional string MonsterName = 4;
  if (has_monstername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->monstername().data(), this->monstername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->monstername(), target);
  }

  // optional int32 RewardMoneyNum = 5;
  if (has_rewardmoneynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rewardmoneynum(), target);
  }

  // optional int32 RewardTicketNum = 6;
  if (has_rewardticketnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rewardticketnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BroadcastS2C::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional string UserName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional int32 WeaponID = 3;
    if (has_weaponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weaponid());
    }

    // optional string MonsterName = 4;
    if (has_monstername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->monstername());
    }

    // optional int32 RewardMoneyNum = 5;
    if (has_rewardmoneynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardmoneynum());
    }

    // optional int32 RewardTicketNum = 6;
    if (has_rewardticketnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardticketnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadcastS2C::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadcastS2C* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadcastS2C*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadcastS2C::MergeFrom(const BroadcastS2C& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_weaponid()) {
      set_weaponid(from.weaponid());
    }
    if (from.has_monstername()) {
      set_monstername(from.monstername());
    }
    if (from.has_rewardmoneynum()) {
      set_rewardmoneynum(from.rewardmoneynum());
    }
    if (from.has_rewardticketnum()) {
      set_rewardticketnum(from.rewardticketnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadcastS2C::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastS2C::CopyFrom(const BroadcastS2C& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastS2C::IsInitialized() const {

  return true;
}

void BroadcastS2C::Swap(BroadcastS2C* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(username_, other->username_);
    std::swap(weaponid_, other->weaponid_);
    std::swap(monstername_, other->monstername_);
    std::swap(rewardmoneynum_, other->rewardmoneynum_);
    std::swap(rewardticketnum_, other->rewardticketnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadcastS2C::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadcastS2C_descriptor_;
  metadata.reflection = BroadcastS2C_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnUserMoney::kChairIDFieldNumber;
const int ReturnUserMoney::kReturnReasonFieldNumber;
const int ReturnUserMoney::kReturnDataFieldNumber;
const int ReturnUserMoney::kReturnUserMoneyNumFieldNumber;
#endif  // !_MSC_VER

ReturnUserMoney::ReturnUserMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReturnUserMoney::InitAsDefaultInstance() {
}

ReturnUserMoney::ReturnUserMoney(const ReturnUserMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReturnUserMoney::SharedCtor() {
  _cached_size_ = 0;
  chairid_ = 0;
  returnreason_ = 0;
  returndata_ = 0;
  returnusermoneynum_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnUserMoney::~ReturnUserMoney() {
  SharedDtor();
}

void ReturnUserMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReturnUserMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnUserMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnUserMoney_descriptor_;
}

const ReturnUserMoney& ReturnUserMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

ReturnUserMoney* ReturnUserMoney::default_instance_ = NULL;

ReturnUserMoney* ReturnUserMoney::New() const {
  return new ReturnUserMoney;
}

void ReturnUserMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chairid_ = 0;
    returnreason_ = 0;
    returndata_ = 0;
    returnusermoneynum_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnUserMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ChairID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chairid_)));
          set_has_chairid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ReturnReason;
        break;
      }

      // optional .SY.ReturnReasonType ReturnReason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReturnReason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SY::ReturnReasonType_IsValid(value)) {
            set_returnreason(static_cast< ::SY::ReturnReasonType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ReturnData;
        break;
      }

      // optional int32 ReturnData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReturnData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &returndata_)));
          set_has_returndata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ReturnUserMoneyNum;
        break;
      }

      // optional int64 ReturnUserMoneyNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReturnUserMoneyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &returnusermoneynum_)));
          set_has_returnusermoneynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReturnUserMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ChairID = 1;
  if (has_chairid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chairid(), output);
  }

  // optional .SY.ReturnReasonType ReturnReason = 2;
  if (has_returnreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->returnreason(), output);
  }

  // optional int32 ReturnData = 3;
  if (has_returndata()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->returndata(), output);
  }

  // optional int64 ReturnUserMoneyNum = 4;
  if (has_returnusermoneynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->returnusermoneynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReturnUserMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ChairID = 1;
  if (has_chairid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chairid(), target);
  }

  // optional .SY.ReturnReasonType ReturnReason = 2;
  if (has_returnreason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->returnreason(), target);
  }

  // optional int32 ReturnData = 3;
  if (has_returndata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->returndata(), target);
  }

  // optional int64 ReturnUserMoneyNum = 4;
  if (has_returnusermoneynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->returnusermoneynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReturnUserMoney::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ChairID = 1;
    if (has_chairid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chairid());
    }

    // optional .SY.ReturnReasonType ReturnReason = 2;
    if (has_returnreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->returnreason());
    }

    // optional int32 ReturnData = 3;
    if (has_returndata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->returndata());
    }

    // optional int64 ReturnUserMoneyNum = 4;
    if (has_returnusermoneynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->returnusermoneynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnUserMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnUserMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnUserMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnUserMoney::MergeFrom(const ReturnUserMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chairid()) {
      set_chairid(from.chairid());
    }
    if (from.has_returnreason()) {
      set_returnreason(from.returnreason());
    }
    if (from.has_returndata()) {
      set_returndata(from.returndata());
    }
    if (from.has_returnusermoneynum()) {
      set_returnusermoneynum(from.returnusermoneynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnUserMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnUserMoney::CopyFrom(const ReturnUserMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnUserMoney::IsInitialized() const {

  return true;
}

void ReturnUserMoney::Swap(ReturnUserMoney* other) {
  if (other != this) {
    std::swap(chairid_, other->chairid_);
    std::swap(returnreason_, other->returnreason_);
    std::swap(returndata_, other->returndata_);
    std::swap(returnusermoneynum_, other->returnusermoneynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnUserMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnUserMoney_descriptor_;
  metadata.reflection = ReturnUserMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HallGsAdditionalGameData1Rsp::kIndexFieldNumber;
const int HallGsAdditionalGameData1Rsp::kUserDbidFieldNumber;
const int HallGsAdditionalGameData1Rsp::kTypeFieldNumber;
const int HallGsAdditionalGameData1Rsp::kSizeFieldNumber;
const int HallGsAdditionalGameData1Rsp::kAddGameDataFieldNumber;
#endif  // !_MSC_VER

HallGsAdditionalGameData1Rsp::HallGsAdditionalGameData1Rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HallGsAdditionalGameData1Rsp::InitAsDefaultInstance() {
}

HallGsAdditionalGameData1Rsp::HallGsAdditionalGameData1Rsp(const HallGsAdditionalGameData1Rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HallGsAdditionalGameData1Rsp::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  user_dbid_ = 0;
  type_ = 0;
  size_ = 0;
  add_game_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HallGsAdditionalGameData1Rsp::~HallGsAdditionalGameData1Rsp() {
  SharedDtor();
}

void HallGsAdditionalGameData1Rsp::SharedDtor() {
  if (add_game_data_ != &::google::protobuf::internal::kEmptyString) {
    delete add_game_data_;
  }
  if (this != default_instance_) {
  }
}

void HallGsAdditionalGameData1Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HallGsAdditionalGameData1Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HallGsAdditionalGameData1Rsp_descriptor_;
}

const HallGsAdditionalGameData1Rsp& HallGsAdditionalGameData1Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

HallGsAdditionalGameData1Rsp* HallGsAdditionalGameData1Rsp::default_instance_ = NULL;

HallGsAdditionalGameData1Rsp* HallGsAdditionalGameData1Rsp::New() const {
  return new HallGsAdditionalGameData1Rsp;
}

void HallGsAdditionalGameData1Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    user_dbid_ = 0;
    type_ = 0;
    size_ = 0;
    if (has_add_game_data()) {
      if (add_game_data_ != &::google::protobuf::internal::kEmptyString) {
        add_game_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HallGsAdditionalGameData1Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_dbid;
        break;
      }

      // required int32 user_dbid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_dbid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_dbid_)));
          set_has_user_dbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }

      // optional int32 size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_add_game_data;
        break;
      }

      // optional string add_game_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_add_game_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_add_game_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->add_game_data().data(), this->add_game_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HallGsAdditionalGameData1Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // required int32 user_dbid = 2;
  if (has_user_dbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_dbid(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int32 size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->size(), output);
  }

  // optional string add_game_data = 5;
  if (has_add_game_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->add_game_data().data(), this->add_game_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->add_game_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HallGsAdditionalGameData1Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // required int32 user_dbid = 2;
  if (has_user_dbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_dbid(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional int32 size = 4;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->size(), target);
  }

  // optional string add_game_data = 5;
  if (has_add_game_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->add_game_data().data(), this->add_game_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->add_game_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HallGsAdditionalGameData1Rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required int32 user_dbid = 2;
    if (has_user_dbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_dbid());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 size = 4;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional string add_game_data = 5;
    if (has_add_game_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->add_game_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HallGsAdditionalGameData1Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HallGsAdditionalGameData1Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HallGsAdditionalGameData1Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HallGsAdditionalGameData1Rsp::MergeFrom(const HallGsAdditionalGameData1Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_user_dbid()) {
      set_user_dbid(from.user_dbid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_add_game_data()) {
      set_add_game_data(from.add_game_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HallGsAdditionalGameData1Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HallGsAdditionalGameData1Rsp::CopyFrom(const HallGsAdditionalGameData1Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HallGsAdditionalGameData1Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HallGsAdditionalGameData1Rsp::Swap(HallGsAdditionalGameData1Rsp* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(user_dbid_, other->user_dbid_);
    std::swap(type_, other->type_);
    std::swap(size_, other->size_);
    std::swap(add_game_data_, other->add_game_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HallGsAdditionalGameData1Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HallGsAdditionalGameData1Rsp_descriptor_;
  metadata.reflection = HallGsAdditionalGameData1Rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdditionalGameDataRsp::kResultFieldNumber;
const int AdditionalGameDataRsp::kGameIdFieldNumber;
const int AdditionalGameDataRsp::kUserDbidFieldNumber;
const int AdditionalGameDataRsp::kAdditionalDataFieldNumber;
#endif  // !_MSC_VER

AdditionalGameDataRsp::AdditionalGameDataRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AdditionalGameDataRsp::InitAsDefaultInstance() {
}

AdditionalGameDataRsp::AdditionalGameDataRsp(const AdditionalGameDataRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AdditionalGameDataRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  game_id_ = 0;
  user_dbid_ = 0;
  additional_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdditionalGameDataRsp::~AdditionalGameDataRsp() {
  SharedDtor();
}

void AdditionalGameDataRsp::SharedDtor() {
  if (additional_data_ != &::google::protobuf::internal::kEmptyString) {
    delete additional_data_;
  }
  if (this != default_instance_) {
  }
}

void AdditionalGameDataRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdditionalGameDataRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdditionalGameDataRsp_descriptor_;
}

const AdditionalGameDataRsp& AdditionalGameDataRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

AdditionalGameDataRsp* AdditionalGameDataRsp::default_instance_ = NULL;

AdditionalGameDataRsp* AdditionalGameDataRsp::New() const {
  return new AdditionalGameDataRsp;
}

void AdditionalGameDataRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    game_id_ = 0;
    user_dbid_ = 0;
    if (has_additional_data()) {
      if (additional_data_ != &::google::protobuf::internal::kEmptyString) {
        additional_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdditionalGameDataRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // required int32 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_dbid;
        break;
      }

      // required int32 user_dbid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_dbid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_dbid_)));
          set_has_user_dbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_additional_data;
        break;
      }

      // optional string additional_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_additional_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_additional_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->additional_data().data(), this->additional_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AdditionalGameDataRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->game_id(), output);
  }

  // required int32 user_dbid = 3;
  if (has_user_dbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->user_dbid(), output);
  }

  // optional string additional_data = 4;
  if (has_additional_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->additional_data().data(), this->additional_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->additional_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AdditionalGameDataRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->game_id(), target);
  }

  // required int32 user_dbid = 3;
  if (has_user_dbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->user_dbid(), target);
  }

  // optional string additional_data = 4;
  if (has_additional_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->additional_data().data(), this->additional_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->additional_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AdditionalGameDataRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_id());
    }

    // required int32 user_dbid = 3;
    if (has_user_dbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_dbid());
    }

    // optional string additional_data = 4;
    if (has_additional_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->additional_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdditionalGameDataRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdditionalGameDataRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdditionalGameDataRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdditionalGameDataRsp::MergeFrom(const AdditionalGameDataRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_user_dbid()) {
      set_user_dbid(from.user_dbid());
    }
    if (from.has_additional_data()) {
      set_additional_data(from.additional_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdditionalGameDataRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdditionalGameDataRsp::CopyFrom(const AdditionalGameDataRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdditionalGameDataRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AdditionalGameDataRsp::Swap(AdditionalGameDataRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(game_id_, other->game_id_);
    std::swap(user_dbid_, other->user_dbid_);
    std::swap(additional_data_, other->additional_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdditionalGameDataRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdditionalGameDataRsp_descriptor_;
  metadata.reflection = AdditionalGameDataRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RefreshUserFishExp::kUserIDFieldNumber;
const int RefreshUserFishExp::kLevelFieldNumber;
const int RefreshUserFishExp::kExpFieldNumber;
#endif  // !_MSC_VER

RefreshUserFishExp::RefreshUserFishExp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RefreshUserFishExp::InitAsDefaultInstance() {
}

RefreshUserFishExp::RefreshUserFishExp(const RefreshUserFishExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RefreshUserFishExp::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  level_ = 0;
  exp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefreshUserFishExp::~RefreshUserFishExp() {
  SharedDtor();
}

void RefreshUserFishExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RefreshUserFishExp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefreshUserFishExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefreshUserFishExp_descriptor_;
}

const RefreshUserFishExp& RefreshUserFishExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

RefreshUserFishExp* RefreshUserFishExp::default_instance_ = NULL;

RefreshUserFishExp* RefreshUserFishExp::New() const {
  return new RefreshUserFishExp;
}

void RefreshUserFishExp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    level_ = 0;
    exp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefreshUserFishExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional uint64 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RefreshUserFishExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 userID = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional uint64 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RefreshUserFishExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 userID = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional uint64 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RefreshUserFishExp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint64 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefreshUserFishExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefreshUserFishExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefreshUserFishExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefreshUserFishExp::MergeFrom(const RefreshUserFishExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefreshUserFishExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshUserFishExp::CopyFrom(const RefreshUserFishExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshUserFishExp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RefreshUserFishExp::Swap(RefreshUserFishExp* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefreshUserFishExp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefreshUserFishExp_descriptor_;
  metadata.reflection = RefreshUserFishExp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaInfo::kIdFieldNumber;
const int ArenaInfo::kGameIdFieldNumber;
const int ArenaInfo::kTypeFieldNumber;
const int ArenaInfo::kMinMoneyFieldNumber;
const int ArenaInfo::kRuleFieldNumber;
const int ArenaInfo::kLevelFieldNumber;
const int ArenaInfo::kNameFieldNumber;
#endif  // !_MSC_VER

ArenaInfo::ArenaInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaInfo::InitAsDefaultInstance() {
}

ArenaInfo::ArenaInfo(const ArenaInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  game_id_ = 0;
  type_ = 0;
  min_money_ = 0;
  rule_ = GOOGLE_LONGLONG(0);
  level_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaInfo::~ArenaInfo() {
  SharedDtor();
}

void ArenaInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ArenaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaInfo_descriptor_;
}

const ArenaInfo& ArenaInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

ArenaInfo* ArenaInfo::default_instance_ = NULL;

ArenaInfo* ArenaInfo::New() const {
  return new ArenaInfo;
}

void ArenaInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    game_id_ = 0;
    type_ = 0;
    min_money_ = 0;
    rule_ = GOOGLE_LONGLONG(0);
    level_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_id;
        break;
      }

      // required int32 game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_min_money;
        break;
      }

      // optional int32 min_money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_money_)));
          set_has_min_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rule;
        break;
      }

      // optional int64 rule = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rule:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rule_)));
          set_has_rule();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional string name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 game_id = 2;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->game_id(), output);
  }

  // required int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int32 min_money = 4;
  if (has_min_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->min_money(), output);
  }

  // optional int64 rule = 5;
  if (has_rule()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->rule(), output);
  }

  // optional int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 game_id = 2;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->game_id(), target);
  }

  // required int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional int32 min_money = 4;
  if (has_min_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->min_money(), target);
  }

  // optional int64 rule = 5;
  if (has_rule()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->rule(), target);
  }

  // optional int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_id());
    }

    // required int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 min_money = 4;
    if (has_min_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_money());
    }

    // optional int64 rule = 5;
    if (has_rule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rule());
    }

    // optional int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaInfo::MergeFrom(const ArenaInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_min_money()) {
      set_min_money(from.min_money());
    }
    if (from.has_rule()) {
      set_rule(from.rule());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaInfo::CopyFrom(const ArenaInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ArenaInfo::Swap(ArenaInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(game_id_, other->game_id_);
    std::swap(type_, other->type_);
    std::swap(min_money_, other->min_money_);
    std::swap(rule_, other->rule_);
    std::swap(level_, other->level_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaInfo_descriptor_;
  metadata.reflection = ArenaInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SY

// @@protoc_insertion_point(global_scope)
