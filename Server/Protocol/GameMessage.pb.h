// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameMessage.proto

#ifndef PROTOBUF_GameMessage_2eproto__INCLUDED
#define PROTOBUF_GameMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace SY {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GameMessage_2eproto();
void protobuf_AssignDesc_GameMessage_2eproto();
void protobuf_ShutdownFile_GameMessage_2eproto();

class GameDataReq;
class SkillInfo;
class GameStationBase;
class ServerPersonalSceneRsp;
class ClientConfirmStartReq;
class ServerFirstSceneRsp;
class ScreenResolution;
class GameChatSection;
class GameTelevisonResult;
class UserMoneySync;
class ChangeWeaponReq;
class ChangeWeaponRsp;
class BuySkillReq;
class BuySkillRsp;
class BuyAutoAttackReq;
class BuyHammerLevelReq;
class BuyHammerLevelRsp;
class KingCriticalHit;
class BuyAutoAttackRsp;
class ChangeSkillStatus;
class SkillHit;
class PlayerHit;
class PlayerHitSync;
class MonsterIncoming;
class PlayerHitIncoming;
class Point;
class MonsterTrace;
class MonsterTraces;
class ChangeScene;
class AllMonsterId;
class WildSkillStatus;
class WildSkillWeaponCostModify;
class BroadcastS2C;
class ReturnUserMoney;
class HallGsAdditionalGameData1Rsp;
class AdditionalGameDataRsp;
class RefreshUserFishExp;
class ArenaInfo;

enum SkillStatus {
  InActive = 0,
  Actived = 1,
  Disabled = 2
};
bool SkillStatus_IsValid(int value);
const SkillStatus SkillStatus_MIN = InActive;
const SkillStatus SkillStatus_MAX = Disabled;
const int SkillStatus_ARRAYSIZE = SkillStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SkillStatus_descriptor();
inline const ::std::string& SkillStatus_Name(SkillStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SkillStatus_descriptor(), value);
}
inline bool SkillStatus_Parse(
    const ::std::string& name, SkillStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SkillStatus>(
    SkillStatus_descriptor(), name, value);
}
enum ReturnReasonType {
  RRT_None = 0,
  RRT_BuySkill = 1
};
bool ReturnReasonType_IsValid(int value);
const ReturnReasonType ReturnReasonType_MIN = RRT_None;
const ReturnReasonType ReturnReasonType_MAX = RRT_BuySkill;
const int ReturnReasonType_ARRAYSIZE = ReturnReasonType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReturnReasonType_descriptor();
inline const ::std::string& ReturnReasonType_Name(ReturnReasonType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReturnReasonType_descriptor(), value);
}
inline bool ReturnReasonType_Parse(
    const ::std::string& name, ReturnReasonType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReturnReasonType>(
    ReturnReasonType_descriptor(), name, value);
}
// ===================================================================

class GameDataReq : public ::google::protobuf::Message {
 public:
  GameDataReq();
  virtual ~GameDataReq();

  GameDataReq(const GameDataReq& from);

  inline GameDataReq& operator=(const GameDataReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameDataReq& default_instance();

  void Swap(GameDataReq* other);

  // implements Message ----------------------------------------------

  GameDataReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameDataReq& from);
  void MergeFrom(const GameDataReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 reg_type = 1;
  inline bool has_reg_type() const;
  inline void clear_reg_type();
  static const int kRegTypeFieldNumber = 1;
  inline ::google::protobuf::int32 reg_type() const;
  inline void set_reg_type(::google::protobuf::int32 value);

  // optional uint32 remote_ip = 2;
  inline bool has_remote_ip() const;
  inline void clear_remote_ip();
  static const int kRemoteIpFieldNumber = 2;
  inline ::google::protobuf::uint32 remote_ip() const;
  inline void set_remote_ip(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SY.GameDataReq)
 private:
  inline void set_has_reg_type();
  inline void clear_has_reg_type();
  inline void set_has_remote_ip();
  inline void clear_has_remote_ip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 reg_type_;
  ::google::protobuf::uint32 remote_ip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static GameDataReq* default_instance_;
};
// -------------------------------------------------------------------

class SkillInfo : public ::google::protobuf::Message {
 public:
  SkillInfo();
  virtual ~SkillInfo();

  SkillInfo(const SkillInfo& from);

  inline SkillInfo& operator=(const SkillInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillInfo& default_instance();

  void Swap(SkillInfo* other);

  // implements Message ----------------------------------------------

  SkillInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillInfo& from);
  void MergeFrom(const SkillInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 SkillID = 1;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 1;
  inline ::google::protobuf::int32 skillid() const;
  inline void set_skillid(::google::protobuf::int32 value);

  // optional .SY.SkillStatus Status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::SY::SkillStatus status() const;
  inline void set_status(::SY::SkillStatus value);

  // @@protoc_insertion_point(class_scope:SY.SkillInfo)
 private:
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 skillid_;
  int status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static SkillInfo* default_instance_;
};
// -------------------------------------------------------------------

class GameStationBase : public ::google::protobuf::Message {
 public:
  GameStationBase();
  virtual ~GameStationBase();

  GameStationBase(const GameStationBase& from);

  inline GameStationBase& operator=(const GameStationBase& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameStationBase& default_instance();

  void Swap(GameStationBase* other);

  // implements Message ----------------------------------------------

  GameStationBase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameStationBase& from);
  void MergeFrom(const GameStationBase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Playing = 1;
  inline bool has_playing() const;
  inline void clear_playing();
  static const int kPlayingFieldNumber = 1;
  inline bool playing() const;
  inline void set_playing(bool value);

  // optional int32 SceneIndex = 2;
  inline bool has_sceneindex() const;
  inline void clear_sceneindex();
  static const int kSceneIndexFieldNumber = 2;
  inline ::google::protobuf::int32 sceneindex() const;
  inline void set_sceneindex(::google::protobuf::int32 value);

  // repeated bool OnLineChair = 3;
  inline int onlinechair_size() const;
  inline void clear_onlinechair();
  static const int kOnLineChairFieldNumber = 3;
  inline bool onlinechair(int index) const;
  inline void set_onlinechair(int index, bool value);
  inline void add_onlinechair(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      onlinechair() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_onlinechair();

  // repeated int64 UserMoneyNum = 4;
  inline int usermoneynum_size() const;
  inline void clear_usermoneynum();
  static const int kUserMoneyNumFieldNumber = 4;
  inline ::google::protobuf::int64 usermoneynum(int index) const;
  inline void set_usermoneynum(int index, ::google::protobuf::int64 value);
  inline void add_usermoneynum(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      usermoneynum() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_usermoneynum();

  // repeated int64 UserTicketNum = 5;
  inline int userticketnum_size() const;
  inline void clear_userticketnum();
  static const int kUserTicketNumFieldNumber = 5;
  inline ::google::protobuf::int64 userticketnum(int index) const;
  inline void set_userticketnum(int index, ::google::protobuf::int64 value);
  inline void add_userticketnum(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      userticketnum() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_userticketnum();

  // repeated int32 WeaponCost = 6;
  inline int weaponcost_size() const;
  inline void clear_weaponcost();
  static const int kWeaponCostFieldNumber = 6;
  inline ::google::protobuf::int32 weaponcost(int index) const;
  inline void set_weaponcost(int index, ::google::protobuf::int32 value);
  inline void add_weaponcost(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      weaponcost() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_weaponcost();

  // repeated .SY.SkillInfo SkillInf = 7;
  inline int skillinf_size() const;
  inline void clear_skillinf();
  static const int kSkillInfFieldNumber = 7;
  inline const ::SY::SkillInfo& skillinf(int index) const;
  inline ::SY::SkillInfo* mutable_skillinf(int index);
  inline ::SY::SkillInfo* add_skillinf();
  inline const ::google::protobuf::RepeatedPtrField< ::SY::SkillInfo >&
      skillinf() const;
  inline ::google::protobuf::RepeatedPtrField< ::SY::SkillInfo >*
      mutable_skillinf();

  // @@protoc_insertion_point(class_scope:SY.GameStationBase)
 private:
  inline void set_has_playing();
  inline void clear_has_playing();
  inline void set_has_sceneindex();
  inline void clear_has_sceneindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool playing_;
  ::google::protobuf::int32 sceneindex_;
  ::google::protobuf::RepeatedField< bool > onlinechair_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > usermoneynum_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > userticketnum_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > weaponcost_;
  ::google::protobuf::RepeatedPtrField< ::SY::SkillInfo > skillinf_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static GameStationBase* default_instance_;
};
// -------------------------------------------------------------------

class ServerPersonalSceneRsp : public ::google::protobuf::Message {
 public:
  ServerPersonalSceneRsp();
  virtual ~ServerPersonalSceneRsp();

  ServerPersonalSceneRsp(const ServerPersonalSceneRsp& from);

  inline ServerPersonalSceneRsp& operator=(const ServerPersonalSceneRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerPersonalSceneRsp& default_instance();

  void Swap(ServerPersonalSceneRsp* other);

  // implements Message ----------------------------------------------

  ServerPersonalSceneRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerPersonalSceneRsp& from);
  void MergeFrom(const ServerPersonalSceneRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 reg_type = 1;
  inline bool has_reg_type() const;
  inline void clear_reg_type();
  static const int kRegTypeFieldNumber = 1;
  inline ::google::protobuf::int32 reg_type() const;
  inline void set_reg_type(::google::protobuf::int32 value);

  // required .SY.GameStationBase StationBase = 2;
  inline bool has_stationbase() const;
  inline void clear_stationbase();
  static const int kStationBaseFieldNumber = 2;
  inline const ::SY::GameStationBase& stationbase() const;
  inline ::SY::GameStationBase* mutable_stationbase();
  inline ::SY::GameStationBase* release_stationbase();
  inline void set_allocated_stationbase(::SY::GameStationBase* stationbase);

  // @@protoc_insertion_point(class_scope:SY.ServerPersonalSceneRsp)
 private:
  inline void set_has_reg_type();
  inline void clear_has_reg_type();
  inline void set_has_stationbase();
  inline void clear_has_stationbase();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SY::GameStationBase* stationbase_;
  ::google::protobuf::int32 reg_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static ServerPersonalSceneRsp* default_instance_;
};
// -------------------------------------------------------------------

class ClientConfirmStartReq : public ::google::protobuf::Message {
 public:
  ClientConfirmStartReq();
  virtual ~ClientConfirmStartReq();

  ClientConfirmStartReq(const ClientConfirmStartReq& from);

  inline ClientConfirmStartReq& operator=(const ClientConfirmStartReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientConfirmStartReq& default_instance();

  void Swap(ClientConfirmStartReq* other);

  // implements Message ----------------------------------------------

  ClientConfirmStartReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientConfirmStartReq& from);
  void MergeFrom(const ClientConfirmStartReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ConfirmStart = 1;
  inline bool has_confirmstart() const;
  inline void clear_confirmstart();
  static const int kConfirmStartFieldNumber = 1;
  inline ::google::protobuf::int32 confirmstart() const;
  inline void set_confirmstart(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SY.ClientConfirmStartReq)
 private:
  inline void set_has_confirmstart();
  inline void clear_has_confirmstart();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 confirmstart_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static ClientConfirmStartReq* default_instance_;
};
// -------------------------------------------------------------------

class ServerFirstSceneRsp : public ::google::protobuf::Message {
 public:
  ServerFirstSceneRsp();
  virtual ~ServerFirstSceneRsp();

  ServerFirstSceneRsp(const ServerFirstSceneRsp& from);

  inline ServerFirstSceneRsp& operator=(const ServerFirstSceneRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerFirstSceneRsp& default_instance();

  void Swap(ServerFirstSceneRsp* other);

  // implements Message ----------------------------------------------

  ServerFirstSceneRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerFirstSceneRsp& from);
  void MergeFrom(const ServerFirstSceneRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SY.ServerPersonalSceneRsp first_scene = 1;
  inline bool has_first_scene() const;
  inline void clear_first_scene();
  static const int kFirstSceneFieldNumber = 1;
  inline const ::SY::ServerPersonalSceneRsp& first_scene() const;
  inline ::SY::ServerPersonalSceneRsp* mutable_first_scene();
  inline ::SY::ServerPersonalSceneRsp* release_first_scene();
  inline void set_allocated_first_scene(::SY::ServerPersonalSceneRsp* first_scene);

  // @@protoc_insertion_point(class_scope:SY.ServerFirstSceneRsp)
 private:
  inline void set_has_first_scene();
  inline void clear_has_first_scene();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SY::ServerPersonalSceneRsp* first_scene_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static ServerFirstSceneRsp* default_instance_;
};
// -------------------------------------------------------------------

class ScreenResolution : public ::google::protobuf::Message {
 public:
  ScreenResolution();
  virtual ~ScreenResolution();

  ScreenResolution(const ScreenResolution& from);

  inline ScreenResolution& operator=(const ScreenResolution& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScreenResolution& default_instance();

  void Swap(ScreenResolution* other);

  // implements Message ----------------------------------------------

  ScreenResolution* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScreenResolution& from);
  void MergeFrom(const ScreenResolution& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 CLIENT_WIDTH = 1;
  inline bool has_client_width() const;
  inline void clear_client_width();
  static const int kCLIENTWIDTHFieldNumber = 1;
  inline ::google::protobuf::int32 client_width() const;
  inline void set_client_width(::google::protobuf::int32 value);

  // optional int32 CLIENT_HEIGHT = 2;
  inline bool has_client_height() const;
  inline void clear_client_height();
  static const int kCLIENTHEIGHTFieldNumber = 2;
  inline ::google::protobuf::int32 client_height() const;
  inline void set_client_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SY.ScreenResolution)
 private:
  inline void set_has_client_width();
  inline void clear_has_client_width();
  inline void set_has_client_height();
  inline void clear_has_client_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 client_width_;
  ::google::protobuf::int32 client_height_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static ScreenResolution* default_instance_;
};
// -------------------------------------------------------------------

class GameChatSection : public ::google::protobuf::Message {
 public:
  GameChatSection();
  virtual ~GameChatSection();

  GameChatSection(const GameChatSection& from);

  inline GameChatSection& operator=(const GameChatSection& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameChatSection& default_instance();

  void Swap(GameChatSection* other);

  // implements Message ----------------------------------------------

  GameChatSection* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameChatSection& from);
  void MergeFrom(const GameChatSection& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 section_type = 1;
  inline bool has_section_type() const;
  inline void clear_section_type();
  static const int kSectionTypeFieldNumber = 1;
  inline ::google::protobuf::int32 section_type() const;
  inline void set_section_type(::google::protobuf::int32 value);

  // optional string section_words = 2;
  inline bool has_section_words() const;
  inline void clear_section_words();
  static const int kSectionWordsFieldNumber = 2;
  inline const ::std::string& section_words() const;
  inline void set_section_words(const ::std::string& value);
  inline void set_section_words(const char* value);
  inline void set_section_words(const char* value, size_t size);
  inline ::std::string* mutable_section_words();
  inline ::std::string* release_section_words();
  inline void set_allocated_section_words(::std::string* section_words);

  // @@protoc_insertion_point(class_scope:SY.GameChatSection)
 private:
  inline void set_has_section_type();
  inline void clear_has_section_type();
  inline void set_has_section_words();
  inline void clear_has_section_words();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* section_words_;
  ::google::protobuf::int32 section_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static GameChatSection* default_instance_;
};
// -------------------------------------------------------------------

class GameTelevisonResult : public ::google::protobuf::Message {
 public:
  GameTelevisonResult();
  virtual ~GameTelevisonResult();

  GameTelevisonResult(const GameTelevisonResult& from);

  inline GameTelevisonResult& operator=(const GameTelevisonResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameTelevisonResult& default_instance();

  void Swap(GameTelevisonResult* other);

  // implements Message ----------------------------------------------

  GameTelevisonResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameTelevisonResult& from);
  void MergeFrom(const GameTelevisonResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 content_type = 1;
  inline bool has_content_type() const;
  inline void clear_content_type();
  static const int kContentTypeFieldNumber = 1;
  inline ::google::protobuf::int32 content_type() const;
  inline void set_content_type(::google::protobuf::int32 value);

  // required int32 game_id = 2;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 2;
  inline ::google::protobuf::int32 game_id() const;
  inline void set_game_id(::google::protobuf::int32 value);

  // repeated .SY.GameChatSection content_info = 3;
  inline int content_info_size() const;
  inline void clear_content_info();
  static const int kContentInfoFieldNumber = 3;
  inline const ::SY::GameChatSection& content_info(int index) const;
  inline ::SY::GameChatSection* mutable_content_info(int index);
  inline ::SY::GameChatSection* add_content_info();
  inline const ::google::protobuf::RepeatedPtrField< ::SY::GameChatSection >&
      content_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::SY::GameChatSection >*
      mutable_content_info();

  // @@protoc_insertion_point(class_scope:SY.GameTelevisonResult)
 private:
  inline void set_has_content_type();
  inline void clear_has_content_type();
  inline void set_has_game_id();
  inline void clear_has_game_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 content_type_;
  ::google::protobuf::int32 game_id_;
  ::google::protobuf::RepeatedPtrField< ::SY::GameChatSection > content_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static GameTelevisonResult* default_instance_;
};
// -------------------------------------------------------------------

class UserMoneySync : public ::google::protobuf::Message {
 public:
  UserMoneySync();
  virtual ~UserMoneySync();

  UserMoneySync(const UserMoneySync& from);

  inline UserMoneySync& operator=(const UserMoneySync& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserMoneySync& default_instance();

  void Swap(UserMoneySync* other);

  // implements Message ----------------------------------------------

  UserMoneySync* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserMoneySync& from);
  void MergeFrom(const UserMoneySync& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ChairID = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int64 UserMoneyNum = 2;
  inline bool has_usermoneynum() const;
  inline void clear_usermoneynum();
  static const int kUserMoneyNumFieldNumber = 2;
  inline ::google::protobuf::int64 usermoneynum() const;
  inline void set_usermoneynum(::google::protobuf::int64 value);

  // optional int64 UserTicketNum = 3;
  inline bool has_userticketnum() const;
  inline void clear_userticketnum();
  static const int kUserTicketNumFieldNumber = 3;
  inline ::google::protobuf::int64 userticketnum() const;
  inline void set_userticketnum(::google::protobuf::int64 value);

  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional uint64 exp = 5;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 5;
  inline ::google::protobuf::uint64 exp() const;
  inline void set_exp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SY.UserMoneySync)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_usermoneynum();
  inline void clear_has_usermoneynum();
  inline void set_has_userticketnum();
  inline void clear_has_userticketnum();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 usermoneynum_;
  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int64 userticketnum_;
  ::google::protobuf::uint64 exp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static UserMoneySync* default_instance_;
};
// -------------------------------------------------------------------

class ChangeWeaponReq : public ::google::protobuf::Message {
 public:
  ChangeWeaponReq();
  virtual ~ChangeWeaponReq();

  ChangeWeaponReq(const ChangeWeaponReq& from);

  inline ChangeWeaponReq& operator=(const ChangeWeaponReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeWeaponReq& default_instance();

  void Swap(ChangeWeaponReq* other);

  // implements Message ----------------------------------------------

  ChangeWeaponReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangeWeaponReq& from);
  void MergeFrom(const ChangeWeaponReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ChairID = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 WeaponID = 2;
  inline bool has_weaponid() const;
  inline void clear_weaponid();
  static const int kWeaponIDFieldNumber = 2;
  inline ::google::protobuf::int32 weaponid() const;
  inline void set_weaponid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SY.ChangeWeaponReq)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_weaponid();
  inline void clear_has_weaponid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 weaponid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static ChangeWeaponReq* default_instance_;
};
// -------------------------------------------------------------------

class ChangeWeaponRsp : public ::google::protobuf::Message {
 public:
  ChangeWeaponRsp();
  virtual ~ChangeWeaponRsp();

  ChangeWeaponRsp(const ChangeWeaponRsp& from);

  inline ChangeWeaponRsp& operator=(const ChangeWeaponRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeWeaponRsp& default_instance();

  void Swap(ChangeWeaponRsp* other);

  // implements Message ----------------------------------------------

  ChangeWeaponRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangeWeaponRsp& from);
  void MergeFrom(const ChangeWeaponRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ChairID = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 WeaponID = 2;
  inline bool has_weaponid() const;
  inline void clear_weaponid();
  static const int kWeaponIDFieldNumber = 2;
  inline ::google::protobuf::int32 weaponid() const;
  inline void set_weaponid(::google::protobuf::int32 value);

  // optional int32 Result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SY.ChangeWeaponRsp)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_weaponid();
  inline void clear_has_weaponid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 weaponid_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static ChangeWeaponRsp* default_instance_;
};
// -------------------------------------------------------------------

class BuySkillReq : public ::google::protobuf::Message {
 public:
  BuySkillReq();
  virtual ~BuySkillReq();

  BuySkillReq(const BuySkillReq& from);

  inline BuySkillReq& operator=(const BuySkillReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuySkillReq& default_instance();

  void Swap(BuySkillReq* other);

  // implements Message ----------------------------------------------

  BuySkillReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuySkillReq& from);
  void MergeFrom(const BuySkillReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ChairID = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 SkillID = 2;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 2;
  inline ::google::protobuf::int32 skillid() const;
  inline void set_skillid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SY.BuySkillReq)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_skillid();
  inline void clear_has_skillid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 skillid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static BuySkillReq* default_instance_;
};
// -------------------------------------------------------------------

class BuySkillRsp : public ::google::protobuf::Message {
 public:
  BuySkillRsp();
  virtual ~BuySkillRsp();

  BuySkillRsp(const BuySkillRsp& from);

  inline BuySkillRsp& operator=(const BuySkillRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuySkillRsp& default_instance();

  void Swap(BuySkillRsp* other);

  // implements Message ----------------------------------------------

  BuySkillRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuySkillRsp& from);
  void MergeFrom(const BuySkillRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ChairID = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 SkillID = 2;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 2;
  inline ::google::protobuf::int32 skillid() const;
  inline void set_skillid(::google::protobuf::int32 value);

  // optional int32 Result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SY.BuySkillRsp)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 skillid_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static BuySkillRsp* default_instance_;
};
// -------------------------------------------------------------------

class BuyAutoAttackReq : public ::google::protobuf::Message {
 public:
  BuyAutoAttackReq();
  virtual ~BuyAutoAttackReq();

  BuyAutoAttackReq(const BuyAutoAttackReq& from);

  inline BuyAutoAttackReq& operator=(const BuyAutoAttackReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuyAutoAttackReq& default_instance();

  void Swap(BuyAutoAttackReq* other);

  // implements Message ----------------------------------------------

  BuyAutoAttackReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuyAutoAttackReq& from);
  void MergeFrom(const BuyAutoAttackReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ChairID = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 AutoAttackLevel = 2;
  inline bool has_autoattacklevel() const;
  inline void clear_autoattacklevel();
  static const int kAutoAttackLevelFieldNumber = 2;
  inline ::google::protobuf::int32 autoattacklevel() const;
  inline void set_autoattacklevel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SY.BuyAutoAttackReq)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_autoattacklevel();
  inline void clear_has_autoattacklevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 autoattacklevel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static BuyAutoAttackReq* default_instance_;
};
// -------------------------------------------------------------------

class BuyHammerLevelReq : public ::google::protobuf::Message {
 public:
  BuyHammerLevelReq();
  virtual ~BuyHammerLevelReq();

  BuyHammerLevelReq(const BuyHammerLevelReq& from);

  inline BuyHammerLevelReq& operator=(const BuyHammerLevelReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuyHammerLevelReq& default_instance();

  void Swap(BuyHammerLevelReq* other);

  // implements Message ----------------------------------------------

  BuyHammerLevelReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuyHammerLevelReq& from);
  void MergeFrom(const BuyHammerLevelReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ChairID = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 HammerLevel = 2;
  inline bool has_hammerlevel() const;
  inline void clear_hammerlevel();
  static const int kHammerLevelFieldNumber = 2;
  inline ::google::protobuf::int32 hammerlevel() const;
  inline void set_hammerlevel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SY.BuyHammerLevelReq)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_hammerlevel();
  inline void clear_has_hammerlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 hammerlevel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static BuyHammerLevelReq* default_instance_;
};
// -------------------------------------------------------------------

class BuyHammerLevelRsp : public ::google::protobuf::Message {
 public:
  BuyHammerLevelRsp();
  virtual ~BuyHammerLevelRsp();

  BuyHammerLevelRsp(const BuyHammerLevelRsp& from);

  inline BuyHammerLevelRsp& operator=(const BuyHammerLevelRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuyHammerLevelRsp& default_instance();

  void Swap(BuyHammerLevelRsp* other);

  // implements Message ----------------------------------------------

  BuyHammerLevelRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuyHammerLevelRsp& from);
  void MergeFrom(const BuyHammerLevelRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ChairID = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 HammerLevel = 2;
  inline bool has_hammerlevel() const;
  inline void clear_hammerlevel();
  static const int kHammerLevelFieldNumber = 2;
  inline ::google::protobuf::int32 hammerlevel() const;
  inline void set_hammerlevel(::google::protobuf::int32 value);

  // optional int32 Result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SY.BuyHammerLevelRsp)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_hammerlevel();
  inline void clear_has_hammerlevel();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 hammerlevel_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static BuyHammerLevelRsp* default_instance_;
};
// -------------------------------------------------------------------

class KingCriticalHit : public ::google::protobuf::Message {
 public:
  KingCriticalHit();
  virtual ~KingCriticalHit();

  KingCriticalHit(const KingCriticalHit& from);

  inline KingCriticalHit& operator=(const KingCriticalHit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KingCriticalHit& default_instance();

  void Swap(KingCriticalHit* other);

  // implements Message ----------------------------------------------

  KingCriticalHit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KingCriticalHit& from);
  void MergeFrom(const KingCriticalHit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ChairID = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // required int32 isCriticalHit = 2;
  inline bool has_iscriticalhit() const;
  inline void clear_iscriticalhit();
  static const int kIsCriticalHitFieldNumber = 2;
  inline ::google::protobuf::int32 iscriticalhit() const;
  inline void set_iscriticalhit(::google::protobuf::int32 value);

  // optional int32 WeaponID = 3;
  inline bool has_weaponid() const;
  inline void clear_weaponid();
  static const int kWeaponIDFieldNumber = 3;
  inline ::google::protobuf::int32 weaponid() const;
  inline void set_weaponid(::google::protobuf::int32 value);

  // repeated int32 MonsterIDList = 4;
  inline int monsteridlist_size() const;
  inline void clear_monsteridlist();
  static const int kMonsterIDListFieldNumber = 4;
  inline ::google::protobuf::int32 monsteridlist(int index) const;
  inline void set_monsteridlist(int index, ::google::protobuf::int32 value);
  inline void add_monsteridlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      monsteridlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_monsteridlist();

  // optional int64 UserMoneyGain = 5;
  inline bool has_usermoneygain() const;
  inline void clear_usermoneygain();
  static const int kUserMoneyGainFieldNumber = 5;
  inline ::google::protobuf::int64 usermoneygain() const;
  inline void set_usermoneygain(::google::protobuf::int64 value);

  // optional int64 UserTicketGain = 6;
  inline bool has_userticketgain() const;
  inline void clear_userticketgain();
  static const int kUserTicketGainFieldNumber = 6;
  inline ::google::protobuf::int64 userticketgain() const;
  inline void set_userticketgain(::google::protobuf::int64 value);

  // optional int64 UserMoneyNum = 7;
  inline bool has_usermoneynum() const;
  inline void clear_usermoneynum();
  static const int kUserMoneyNumFieldNumber = 7;
  inline ::google::protobuf::int64 usermoneynum() const;
  inline void set_usermoneynum(::google::protobuf::int64 value);

  // optional int64 UserTicketNum = 8;
  inline bool has_userticketnum() const;
  inline void clear_userticketnum();
  static const int kUserTicketNumFieldNumber = 8;
  inline ::google::protobuf::int64 userticketnum() const;
  inline void set_userticketnum(::google::protobuf::int64 value);

  // optional int32 AnimMidLast = 9;
  inline bool has_animmidlast() const;
  inline void clear_animmidlast();
  static const int kAnimMidLastFieldNumber = 9;
  inline ::google::protobuf::int32 animmidlast() const;
  inline void set_animmidlast(::google::protobuf::int32 value);

  // optional int32 AnimEndLast = 10;
  inline bool has_animendlast() const;
  inline void clear_animendlast();
  static const int kAnimEndLastFieldNumber = 10;
  inline ::google::protobuf::int32 animendlast() const;
  inline void set_animendlast(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SY.KingCriticalHit)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_iscriticalhit();
  inline void clear_has_iscriticalhit();
  inline void set_has_weaponid();
  inline void clear_has_weaponid();
  inline void set_has_usermoneygain();
  inline void clear_has_usermoneygain();
  inline void set_has_userticketgain();
  inline void clear_has_userticketgain();
  inline void set_has_usermoneynum();
  inline void clear_has_usermoneynum();
  inline void set_has_userticketnum();
  inline void clear_has_userticketnum();
  inline void set_has_animmidlast();
  inline void clear_has_animmidlast();
  inline void set_has_animendlast();
  inline void clear_has_animendlast();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 iscriticalhit_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > monsteridlist_;
  ::google::protobuf::int64 usermoneygain_;
  ::google::protobuf::int64 userticketgain_;
  ::google::protobuf::int32 weaponid_;
  ::google::protobuf::int32 animmidlast_;
  ::google::protobuf::int64 usermoneynum_;
  ::google::protobuf::int64 userticketnum_;
  ::google::protobuf::int32 animendlast_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static KingCriticalHit* default_instance_;
};
// -------------------------------------------------------------------

class BuyAutoAttackRsp : public ::google::protobuf::Message {
 public:
  BuyAutoAttackRsp();
  virtual ~BuyAutoAttackRsp();

  BuyAutoAttackRsp(const BuyAutoAttackRsp& from);

  inline BuyAutoAttackRsp& operator=(const BuyAutoAttackRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuyAutoAttackRsp& default_instance();

  void Swap(BuyAutoAttackRsp* other);

  // implements Message ----------------------------------------------

  BuyAutoAttackRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuyAutoAttackRsp& from);
  void MergeFrom(const BuyAutoAttackRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ChairID = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 AutoAttackLevel = 2;
  inline bool has_autoattacklevel() const;
  inline void clear_autoattacklevel();
  static const int kAutoAttackLevelFieldNumber = 2;
  inline ::google::protobuf::int32 autoattacklevel() const;
  inline void set_autoattacklevel(::google::protobuf::int32 value);

  // optional int32 Result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SY.BuyAutoAttackRsp)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_autoattacklevel();
  inline void clear_has_autoattacklevel();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 autoattacklevel_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static BuyAutoAttackRsp* default_instance_;
};
// -------------------------------------------------------------------

class ChangeSkillStatus : public ::google::protobuf::Message {
 public:
  ChangeSkillStatus();
  virtual ~ChangeSkillStatus();

  ChangeSkillStatus(const ChangeSkillStatus& from);

  inline ChangeSkillStatus& operator=(const ChangeSkillStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeSkillStatus& default_instance();

  void Swap(ChangeSkillStatus* other);

  // implements Message ----------------------------------------------

  ChangeSkillStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangeSkillStatus& from);
  void MergeFrom(const ChangeSkillStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ChairID = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // repeated .SY.SkillInfo SkillInf = 2;
  inline int skillinf_size() const;
  inline void clear_skillinf();
  static const int kSkillInfFieldNumber = 2;
  inline const ::SY::SkillInfo& skillinf(int index) const;
  inline ::SY::SkillInfo* mutable_skillinf(int index);
  inline ::SY::SkillInfo* add_skillinf();
  inline const ::google::protobuf::RepeatedPtrField< ::SY::SkillInfo >&
      skillinf() const;
  inline ::google::protobuf::RepeatedPtrField< ::SY::SkillInfo >*
      mutable_skillinf();

  // @@protoc_insertion_point(class_scope:SY.ChangeSkillStatus)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SY::SkillInfo > skillinf_;
  ::google::protobuf::int32 chairid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static ChangeSkillStatus* default_instance_;
};
// -------------------------------------------------------------------

class SkillHit : public ::google::protobuf::Message {
 public:
  SkillHit();
  virtual ~SkillHit();

  SkillHit(const SkillHit& from);

  inline SkillHit& operator=(const SkillHit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillHit& default_instance();

  void Swap(SkillHit* other);

  // implements Message ----------------------------------------------

  SkillHit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillHit& from);
  void MergeFrom(const SkillHit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 TriggerSkillID = 1;
  inline bool has_triggerskillid() const;
  inline void clear_triggerskillid();
  static const int kTriggerSkillIDFieldNumber = 1;
  inline ::google::protobuf::int32 triggerskillid() const;
  inline void set_triggerskillid(::google::protobuf::int32 value);

  // repeated int32 MonsterID = 2;
  inline int monsterid_size() const;
  inline void clear_monsterid();
  static const int kMonsterIDFieldNumber = 2;
  inline ::google::protobuf::int32 monsterid(int index) const;
  inline void set_monsterid(int index, ::google::protobuf::int32 value);
  inline void add_monsterid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      monsterid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_monsterid();

  // @@protoc_insertion_point(class_scope:SY.SkillHit)
 private:
  inline void set_has_triggerskillid();
  inline void clear_has_triggerskillid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > monsterid_;
  ::google::protobuf::int32 triggerskillid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static SkillHit* default_instance_;
};
// -------------------------------------------------------------------

class PlayerHit : public ::google::protobuf::Message {
 public:
  PlayerHit();
  virtual ~PlayerHit();

  PlayerHit(const PlayerHit& from);

  inline PlayerHit& operator=(const PlayerHit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerHit& default_instance();

  void Swap(PlayerHit* other);

  // implements Message ----------------------------------------------

  PlayerHit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerHit& from);
  void MergeFrom(const PlayerHit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ChairID = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 MonsterID = 2;
  inline bool has_monsterid() const;
  inline void clear_monsterid();
  static const int kMonsterIDFieldNumber = 2;
  inline ::google::protobuf::int32 monsterid() const;
  inline void set_monsterid(::google::protobuf::int32 value);

  // optional int32 WeaponID = 3;
  inline bool has_weaponid() const;
  inline void clear_weaponid();
  static const int kWeaponIDFieldNumber = 3;
  inline ::google::protobuf::int32 weaponid() const;
  inline void set_weaponid(::google::protobuf::int32 value);

  // repeated .SY.SkillHit SkillList = 4;
  inline int skilllist_size() const;
  inline void clear_skilllist();
  static const int kSkillListFieldNumber = 4;
  inline const ::SY::SkillHit& skilllist(int index) const;
  inline ::SY::SkillHit* mutable_skilllist(int index);
  inline ::SY::SkillHit* add_skilllist();
  inline const ::google::protobuf::RepeatedPtrField< ::SY::SkillHit >&
      skilllist() const;
  inline ::google::protobuf::RepeatedPtrField< ::SY::SkillHit >*
      mutable_skilllist();

  // optional bool IsRobot = 5;
  inline bool has_isrobot() const;
  inline void clear_isrobot();
  static const int kIsRobotFieldNumber = 5;
  inline bool isrobot() const;
  inline void set_isrobot(bool value);

  // optional bool HasPayWeaponCost = 6;
  inline bool has_haspayweaponcost() const;
  inline void clear_haspayweaponcost();
  static const int kHasPayWeaponCostFieldNumber = 6;
  inline bool haspayweaponcost() const;
  inline void set_haspayweaponcost(bool value);

  // repeated int32 MonsterIDList = 7;
  inline int monsteridlist_size() const;
  inline void clear_monsteridlist();
  static const int kMonsterIDListFieldNumber = 7;
  inline ::google::protobuf::int32 monsteridlist(int index) const;
  inline void set_monsteridlist(int index, ::google::protobuf::int32 value);
  inline void add_monsteridlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      monsteridlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_monsteridlist();

  // repeated int32 SkillHitListHasPay = 8;
  inline int skillhitlisthaspay_size() const;
  inline void clear_skillhitlisthaspay();
  static const int kSkillHitListHasPayFieldNumber = 8;
  inline ::google::protobuf::int32 skillhitlisthaspay(int index) const;
  inline void set_skillhitlisthaspay(int index, ::google::protobuf::int32 value);
  inline void add_skillhitlisthaspay(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      skillhitlisthaspay() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_skillhitlisthaspay();

  // @@protoc_insertion_point(class_scope:SY.PlayerHit)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_monsterid();
  inline void clear_has_monsterid();
  inline void set_has_weaponid();
  inline void clear_has_weaponid();
  inline void set_has_isrobot();
  inline void clear_has_isrobot();
  inline void set_has_haspayweaponcost();
  inline void clear_has_haspayweaponcost();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 monsterid_;
  ::google::protobuf::RepeatedPtrField< ::SY::SkillHit > skilllist_;
  ::google::protobuf::int32 weaponid_;
  bool isrobot_;
  bool haspayweaponcost_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > monsteridlist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > skillhitlisthaspay_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static PlayerHit* default_instance_;
};
// -------------------------------------------------------------------

class PlayerHitSync : public ::google::protobuf::Message {
 public:
  PlayerHitSync();
  virtual ~PlayerHitSync();

  PlayerHitSync(const PlayerHitSync& from);

  inline PlayerHitSync& operator=(const PlayerHitSync& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerHitSync& default_instance();

  void Swap(PlayerHitSync* other);

  // implements Message ----------------------------------------------

  PlayerHitSync* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerHitSync& from);
  void MergeFrom(const PlayerHitSync& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ChairID = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional int32 MonsterID = 2;
  inline bool has_monsterid() const;
  inline void clear_monsterid();
  static const int kMonsterIDFieldNumber = 2;
  inline ::google::protobuf::int32 monsterid() const;
  inline void set_monsterid(::google::protobuf::int32 value);

  // optional int32 WeaponID = 3;
  inline bool has_weaponid() const;
  inline void clear_weaponid();
  static const int kWeaponIDFieldNumber = 3;
  inline ::google::protobuf::int32 weaponid() const;
  inline void set_weaponid(::google::protobuf::int32 value);

  // repeated .SY.SkillHit SkillList = 4;
  inline int skilllist_size() const;
  inline void clear_skilllist();
  static const int kSkillListFieldNumber = 4;
  inline const ::SY::SkillHit& skilllist(int index) const;
  inline ::SY::SkillHit* mutable_skilllist(int index);
  inline ::SY::SkillHit* add_skilllist();
  inline const ::google::protobuf::RepeatedPtrField< ::SY::SkillHit >&
      skilllist() const;
  inline ::google::protobuf::RepeatedPtrField< ::SY::SkillHit >*
      mutable_skilllist();

  // optional int64 UserMoneyNum = 5;
  inline bool has_usermoneynum() const;
  inline void clear_usermoneynum();
  static const int kUserMoneyNumFieldNumber = 5;
  inline ::google::protobuf::int64 usermoneynum() const;
  inline void set_usermoneynum(::google::protobuf::int64 value);

  // optional int64 UserTicketNum = 6;
  inline bool has_userticketnum() const;
  inline void clear_userticketnum();
  static const int kUserTicketNumFieldNumber = 6;
  inline ::google::protobuf::int64 userticketnum() const;
  inline void set_userticketnum(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:SY.PlayerHitSync)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_monsterid();
  inline void clear_has_monsterid();
  inline void set_has_weaponid();
  inline void clear_has_weaponid();
  inline void set_has_usermoneynum();
  inline void clear_has_usermoneynum();
  inline void set_has_userticketnum();
  inline void clear_has_userticketnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chairid_;
  ::google::protobuf::int32 monsterid_;
  ::google::protobuf::RepeatedPtrField< ::SY::SkillHit > skilllist_;
  ::google::protobuf::int64 usermoneynum_;
  ::google::protobuf::int64 userticketnum_;
  ::google::protobuf::int32 weaponid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static PlayerHitSync* default_instance_;
};
// -------------------------------------------------------------------

class MonsterIncoming : public ::google::protobuf::Message {
 public:
  MonsterIncoming();
  virtual ~MonsterIncoming();

  MonsterIncoming(const MonsterIncoming& from);

  inline MonsterIncoming& operator=(const MonsterIncoming& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MonsterIncoming& default_instance();

  void Swap(MonsterIncoming* other);

  // implements Message ----------------------------------------------

  MonsterIncoming* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MonsterIncoming& from);
  void MergeFrom(const MonsterIncoming& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 MonsterID = 1;
  inline bool has_monsterid() const;
  inline void clear_monsterid();
  static const int kMonsterIDFieldNumber = 1;
  inline ::google::protobuf::int32 monsterid() const;
  inline void set_monsterid(::google::protobuf::int32 value);

  // optional int32 KillRate = 2;
  inline bool has_killrate() const;
  inline void clear_killrate();
  static const int kKillRateFieldNumber = 2;
  inline ::google::protobuf::int32 killrate() const;
  inline void set_killrate(::google::protobuf::int32 value);

  // optional int32 UserMoneyNum = 3;
  inline bool has_usermoneynum() const;
  inline void clear_usermoneynum();
  static const int kUserMoneyNumFieldNumber = 3;
  inline ::google::protobuf::int32 usermoneynum() const;
  inline void set_usermoneynum(::google::protobuf::int32 value);

  // optional int32 UserTicketNum = 4;
  inline bool has_userticketnum() const;
  inline void clear_userticketnum();
  static const int kUserTicketNumFieldNumber = 4;
  inline ::google::protobuf::int32 userticketnum() const;
  inline void set_userticketnum(::google::protobuf::int32 value);

  // optional int32 WeaponCostEx = 5;
  inline bool has_weaponcostex() const;
  inline void clear_weaponcostex();
  static const int kWeaponCostExFieldNumber = 5;
  inline ::google::protobuf::int32 weaponcostex() const;
  inline void set_weaponcostex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SY.MonsterIncoming)
 private:
  inline void set_has_monsterid();
  inline void clear_has_monsterid();
  inline void set_has_killrate();
  inline void clear_has_killrate();
  inline void set_has_usermoneynum();
  inline void clear_has_usermoneynum();
  inline void set_has_userticketnum();
  inline void clear_has_userticketnum();
  inline void set_has_weaponcostex();
  inline void clear_has_weaponcostex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 monsterid_;
  ::google::protobuf::int32 killrate_;
  ::google::protobuf::int32 usermoneynum_;
  ::google::protobuf::int32 userticketnum_;
  ::google::protobuf::int32 weaponcostex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static MonsterIncoming* default_instance_;
};
// -------------------------------------------------------------------

class PlayerHitIncoming : public ::google::protobuf::Message {
 public:
  PlayerHitIncoming();
  virtual ~PlayerHitIncoming();

  PlayerHitIncoming(const PlayerHitIncoming& from);

  inline PlayerHitIncoming& operator=(const PlayerHitIncoming& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerHitIncoming& default_instance();

  void Swap(PlayerHitIncoming* other);

  // implements Message ----------------------------------------------

  PlayerHitIncoming* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerHitIncoming& from);
  void MergeFrom(const PlayerHitIncoming& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ChairID = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // repeated .SY.MonsterIncoming IncomingList = 2;
  inline int incominglist_size() const;
  inline void clear_incominglist();
  static const int kIncomingListFieldNumber = 2;
  inline const ::SY::MonsterIncoming& incominglist(int index) const;
  inline ::SY::MonsterIncoming* mutable_incominglist(int index);
  inline ::SY::MonsterIncoming* add_incominglist();
  inline const ::google::protobuf::RepeatedPtrField< ::SY::MonsterIncoming >&
      incominglist() const;
  inline ::google::protobuf::RepeatedPtrField< ::SY::MonsterIncoming >*
      mutable_incominglist();

  // @@protoc_insertion_point(class_scope:SY.PlayerHitIncoming)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SY::MonsterIncoming > incominglist_;
  ::google::protobuf::int32 chairid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static PlayerHitIncoming* default_instance_;
};
// -------------------------------------------------------------------

class Point : public ::google::protobuf::Message {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  void Swap(Point* other);

  // implements Message ----------------------------------------------

  Point* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // optional int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SY.Point)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static Point* default_instance_;
};
// -------------------------------------------------------------------

class MonsterTrace : public ::google::protobuf::Message {
 public:
  MonsterTrace();
  virtual ~MonsterTrace();

  MonsterTrace(const MonsterTrace& from);

  inline MonsterTrace& operator=(const MonsterTrace& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MonsterTrace& default_instance();

  void Swap(MonsterTrace* other);

  // implements Message ----------------------------------------------

  MonsterTrace* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MonsterTrace& from);
  void MergeFrom(const MonsterTrace& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 MonsterID = 1;
  inline bool has_monsterid() const;
  inline void clear_monsterid();
  static const int kMonsterIDFieldNumber = 1;
  inline ::google::protobuf::int32 monsterid() const;
  inline void set_monsterid(::google::protobuf::int32 value);

  // optional int32 TypeID = 2;
  inline bool has_typeid_() const;
  inline void clear_typeid_();
  static const int kTypeIDFieldNumber = 2;
  inline ::google::protobuf::int32 typeid_() const;
  inline void set_typeid_(::google::protobuf::int32 value);

  // optional int32 CurHP = 3;
  inline bool has_curhp() const;
  inline void clear_curhp();
  static const int kCurHPFieldNumber = 3;
  inline ::google::protobuf::int32 curhp() const;
  inline void set_curhp(::google::protobuf::int32 value);

  // optional int32 MaxHP = 4;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHPFieldNumber = 4;
  inline ::google::protobuf::int32 maxhp() const;
  inline void set_maxhp(::google::protobuf::int32 value);

  // optional float Speed = 5;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 5;
  inline float speed() const;
  inline void set_speed(float value);

  // optional int32 RespawnIndex = 6;
  inline bool has_respawnindex() const;
  inline void clear_respawnindex();
  static const int kRespawnIndexFieldNumber = 6;
  inline ::google::protobuf::int32 respawnindex() const;
  inline void set_respawnindex(::google::protobuf::int32 value);

  // repeated .SY.Point RespawnPosition = 7;
  inline int respawnposition_size() const;
  inline void clear_respawnposition();
  static const int kRespawnPositionFieldNumber = 7;
  inline const ::SY::Point& respawnposition(int index) const;
  inline ::SY::Point* mutable_respawnposition(int index);
  inline ::SY::Point* add_respawnposition();
  inline const ::google::protobuf::RepeatedPtrField< ::SY::Point >&
      respawnposition() const;
  inline ::google::protobuf::RepeatedPtrField< ::SY::Point >*
      mutable_respawnposition();

  // repeated .SY.Point MoveDestination = 8;
  inline int movedestination_size() const;
  inline void clear_movedestination();
  static const int kMoveDestinationFieldNumber = 8;
  inline const ::SY::Point& movedestination(int index) const;
  inline ::SY::Point* mutable_movedestination(int index);
  inline ::SY::Point* add_movedestination();
  inline const ::google::protobuf::RepeatedPtrField< ::SY::Point >&
      movedestination() const;
  inline ::google::protobuf::RepeatedPtrField< ::SY::Point >*
      mutable_movedestination();

  // repeated .SY.Point EscapseDestination = 9;
  inline int escapsedestination_size() const;
  inline void clear_escapsedestination();
  static const int kEscapseDestinationFieldNumber = 9;
  inline const ::SY::Point& escapsedestination(int index) const;
  inline ::SY::Point* mutable_escapsedestination(int index);
  inline ::SY::Point* add_escapsedestination();
  inline const ::google::protobuf::RepeatedPtrField< ::SY::Point >&
      escapsedestination() const;
  inline ::google::protobuf::RepeatedPtrField< ::SY::Point >*
      mutable_escapsedestination();

  // optional float DelayMoveTime = 10;
  inline bool has_delaymovetime() const;
  inline void clear_delaymovetime();
  static const int kDelayMoveTimeFieldNumber = 10;
  inline float delaymovetime() const;
  inline void set_delaymovetime(float value);

  // optional float DelayEscapeTime = 11;
  inline bool has_delayescapetime() const;
  inline void clear_delayescapetime();
  static const int kDelayEscapeTimeFieldNumber = 11;
  inline float delayescapetime() const;
  inline void set_delayescapetime(float value);

  // optional float SpeedRate = 12;
  inline bool has_speedrate() const;
  inline void clear_speedrate();
  static const int kSpeedRateFieldNumber = 12;
  inline float speedrate() const;
  inline void set_speedrate(float value);

  // @@protoc_insertion_point(class_scope:SY.MonsterTrace)
 private:
  inline void set_has_monsterid();
  inline void clear_has_monsterid();
  inline void set_has_typeid_();
  inline void clear_has_typeid_();
  inline void set_has_curhp();
  inline void clear_has_curhp();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_respawnindex();
  inline void clear_has_respawnindex();
  inline void set_has_delaymovetime();
  inline void clear_has_delaymovetime();
  inline void set_has_delayescapetime();
  inline void clear_has_delayescapetime();
  inline void set_has_speedrate();
  inline void clear_has_speedrate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 monsterid_;
  ::google::protobuf::int32 typeid__;
  ::google::protobuf::int32 curhp_;
  ::google::protobuf::int32 maxhp_;
  float speed_;
  ::google::protobuf::int32 respawnindex_;
  ::google::protobuf::RepeatedPtrField< ::SY::Point > respawnposition_;
  ::google::protobuf::RepeatedPtrField< ::SY::Point > movedestination_;
  ::google::protobuf::RepeatedPtrField< ::SY::Point > escapsedestination_;
  float delaymovetime_;
  float delayescapetime_;
  float speedrate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static MonsterTrace* default_instance_;
};
// -------------------------------------------------------------------

class MonsterTraces : public ::google::protobuf::Message {
 public:
  MonsterTraces();
  virtual ~MonsterTraces();

  MonsterTraces(const MonsterTraces& from);

  inline MonsterTraces& operator=(const MonsterTraces& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MonsterTraces& default_instance();

  void Swap(MonsterTraces* other);

  // implements Message ----------------------------------------------

  MonsterTraces* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MonsterTraces& from);
  void MergeFrom(const MonsterTraces& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool IsGroup = 1;
  inline bool has_isgroup() const;
  inline void clear_isgroup();
  static const int kIsGroupFieldNumber = 1;
  inline bool isgroup() const;
  inline void set_isgroup(bool value);

  // repeated .SY.MonsterTrace Traces = 2;
  inline int traces_size() const;
  inline void clear_traces();
  static const int kTracesFieldNumber = 2;
  inline const ::SY::MonsterTrace& traces(int index) const;
  inline ::SY::MonsterTrace* mutable_traces(int index);
  inline ::SY::MonsterTrace* add_traces();
  inline const ::google::protobuf::RepeatedPtrField< ::SY::MonsterTrace >&
      traces() const;
  inline ::google::protobuf::RepeatedPtrField< ::SY::MonsterTrace >*
      mutable_traces();

  // @@protoc_insertion_point(class_scope:SY.MonsterTraces)
 private:
  inline void set_has_isgroup();
  inline void clear_has_isgroup();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SY::MonsterTrace > traces_;
  bool isgroup_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static MonsterTraces* default_instance_;
};
// -------------------------------------------------------------------

class ChangeScene : public ::google::protobuf::Message {
 public:
  ChangeScene();
  virtual ~ChangeScene();

  ChangeScene(const ChangeScene& from);

  inline ChangeScene& operator=(const ChangeScene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeScene& default_instance();

  void Swap(ChangeScene* other);

  // implements Message ----------------------------------------------

  ChangeScene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangeScene& from);
  void MergeFrom(const ChangeScene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 SceneIndex = 1;
  inline bool has_sceneindex() const;
  inline void clear_sceneindex();
  static const int kSceneIndexFieldNumber = 1;
  inline ::google::protobuf::int32 sceneindex() const;
  inline void set_sceneindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SY.ChangeScene)
 private:
  inline void set_has_sceneindex();
  inline void clear_has_sceneindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 sceneindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static ChangeScene* default_instance_;
};
// -------------------------------------------------------------------

class AllMonsterId : public ::google::protobuf::Message {
 public:
  AllMonsterId();
  virtual ~AllMonsterId();

  AllMonsterId(const AllMonsterId& from);

  inline AllMonsterId& operator=(const AllMonsterId& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllMonsterId& default_instance();

  void Swap(AllMonsterId* other);

  // implements Message ----------------------------------------------

  AllMonsterId* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllMonsterId& from);
  void MergeFrom(const AllMonsterId& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SY.AllMonsterId)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static AllMonsterId* default_instance_;
};
// -------------------------------------------------------------------

class WildSkillStatus : public ::google::protobuf::Message {
 public:
  WildSkillStatus();
  virtual ~WildSkillStatus();

  WildSkillStatus(const WildSkillStatus& from);

  inline WildSkillStatus& operator=(const WildSkillStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WildSkillStatus& default_instance();

  void Swap(WildSkillStatus* other);

  // implements Message ----------------------------------------------

  WildSkillStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WildSkillStatus& from);
  void MergeFrom(const WildSkillStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 wild_skill_status = 1;
  inline bool has_wild_skill_status() const;
  inline void clear_wild_skill_status();
  static const int kWildSkillStatusFieldNumber = 1;
  inline ::google::protobuf::int32 wild_skill_status() const;
  inline void set_wild_skill_status(::google::protobuf::int32 value);

  // optional int32 remain_time = 2;
  inline bool has_remain_time() const;
  inline void clear_remain_time();
  static const int kRemainTimeFieldNumber = 2;
  inline ::google::protobuf::int32 remain_time() const;
  inline void set_remain_time(::google::protobuf::int32 value);

  // optional float wild_skill_cost_rate = 3;
  inline bool has_wild_skill_cost_rate() const;
  inline void clear_wild_skill_cost_rate();
  static const int kWildSkillCostRateFieldNumber = 3;
  inline float wild_skill_cost_rate() const;
  inline void set_wild_skill_cost_rate(float value);

  // repeated .SY.AllMonsterId wild_monster_id = 4;
  inline int wild_monster_id_size() const;
  inline void clear_wild_monster_id();
  static const int kWildMonsterIdFieldNumber = 4;
  inline const ::SY::AllMonsterId& wild_monster_id(int index) const;
  inline ::SY::AllMonsterId* mutable_wild_monster_id(int index);
  inline ::SY::AllMonsterId* add_wild_monster_id();
  inline const ::google::protobuf::RepeatedPtrField< ::SY::AllMonsterId >&
      wild_monster_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::SY::AllMonsterId >*
      mutable_wild_monster_id();

  // @@protoc_insertion_point(class_scope:SY.WildSkillStatus)
 private:
  inline void set_has_wild_skill_status();
  inline void clear_has_wild_skill_status();
  inline void set_has_remain_time();
  inline void clear_has_remain_time();
  inline void set_has_wild_skill_cost_rate();
  inline void clear_has_wild_skill_cost_rate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 wild_skill_status_;
  ::google::protobuf::int32 remain_time_;
  ::google::protobuf::RepeatedPtrField< ::SY::AllMonsterId > wild_monster_id_;
  float wild_skill_cost_rate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static WildSkillStatus* default_instance_;
};
// -------------------------------------------------------------------

class WildSkillWeaponCostModify : public ::google::protobuf::Message {
 public:
  WildSkillWeaponCostModify();
  virtual ~WildSkillWeaponCostModify();

  WildSkillWeaponCostModify(const WildSkillWeaponCostModify& from);

  inline WildSkillWeaponCostModify& operator=(const WildSkillWeaponCostModify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WildSkillWeaponCostModify& default_instance();

  void Swap(WildSkillWeaponCostModify* other);

  // implements Message ----------------------------------------------

  WildSkillWeaponCostModify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WildSkillWeaponCostModify& from);
  void MergeFrom(const WildSkillWeaponCostModify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 wild_skill_weapon_cost_modify = 1;
  inline bool has_wild_skill_weapon_cost_modify() const;
  inline void clear_wild_skill_weapon_cost_modify();
  static const int kWildSkillWeaponCostModifyFieldNumber = 1;
  inline ::google::protobuf::int32 wild_skill_weapon_cost_modify() const;
  inline void set_wild_skill_weapon_cost_modify(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SY.WildSkillWeaponCostModify)
 private:
  inline void set_has_wild_skill_weapon_cost_modify();
  inline void clear_has_wild_skill_weapon_cost_modify();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 wild_skill_weapon_cost_modify_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static WildSkillWeaponCostModify* default_instance_;
};
// -------------------------------------------------------------------

class BroadcastS2C : public ::google::protobuf::Message {
 public:
  BroadcastS2C();
  virtual ~BroadcastS2C();

  BroadcastS2C(const BroadcastS2C& from);

  inline BroadcastS2C& operator=(const BroadcastS2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BroadcastS2C& default_instance();

  void Swap(BroadcastS2C* other);

  // implements Message ----------------------------------------------

  BroadcastS2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BroadcastS2C& from);
  void MergeFrom(const BroadcastS2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Text = 1;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 1;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // optional string UserName = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional int32 WeaponID = 3;
  inline bool has_weaponid() const;
  inline void clear_weaponid();
  static const int kWeaponIDFieldNumber = 3;
  inline ::google::protobuf::int32 weaponid() const;
  inline void set_weaponid(::google::protobuf::int32 value);

  // optional string MonsterName = 4;
  inline bool has_monstername() const;
  inline void clear_monstername();
  static const int kMonsterNameFieldNumber = 4;
  inline const ::std::string& monstername() const;
  inline void set_monstername(const ::std::string& value);
  inline void set_monstername(const char* value);
  inline void set_monstername(const char* value, size_t size);
  inline ::std::string* mutable_monstername();
  inline ::std::string* release_monstername();
  inline void set_allocated_monstername(::std::string* monstername);

  // optional int32 RewardMoneyNum = 5;
  inline bool has_rewardmoneynum() const;
  inline void clear_rewardmoneynum();
  static const int kRewardMoneyNumFieldNumber = 5;
  inline ::google::protobuf::int32 rewardmoneynum() const;
  inline void set_rewardmoneynum(::google::protobuf::int32 value);

  // optional int32 RewardTicketNum = 6;
  inline bool has_rewardticketnum() const;
  inline void clear_rewardticketnum();
  static const int kRewardTicketNumFieldNumber = 6;
  inline ::google::protobuf::int32 rewardticketnum() const;
  inline void set_rewardticketnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SY.BroadcastS2C)
 private:
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_weaponid();
  inline void clear_has_weaponid();
  inline void set_has_monstername();
  inline void clear_has_monstername();
  inline void set_has_rewardmoneynum();
  inline void clear_has_rewardmoneynum();
  inline void set_has_rewardticketnum();
  inline void clear_has_rewardticketnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* text_;
  ::std::string* username_;
  ::std::string* monstername_;
  ::google::protobuf::int32 weaponid_;
  ::google::protobuf::int32 rewardmoneynum_;
  ::google::protobuf::int32 rewardticketnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static BroadcastS2C* default_instance_;
};
// -------------------------------------------------------------------

class ReturnUserMoney : public ::google::protobuf::Message {
 public:
  ReturnUserMoney();
  virtual ~ReturnUserMoney();

  ReturnUserMoney(const ReturnUserMoney& from);

  inline ReturnUserMoney& operator=(const ReturnUserMoney& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReturnUserMoney& default_instance();

  void Swap(ReturnUserMoney* other);

  // implements Message ----------------------------------------------

  ReturnUserMoney* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReturnUserMoney& from);
  void MergeFrom(const ReturnUserMoney& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ChairID = 1;
  inline bool has_chairid() const;
  inline void clear_chairid();
  static const int kChairIDFieldNumber = 1;
  inline ::google::protobuf::int32 chairid() const;
  inline void set_chairid(::google::protobuf::int32 value);

  // optional .SY.ReturnReasonType ReturnReason = 2;
  inline bool has_returnreason() const;
  inline void clear_returnreason();
  static const int kReturnReasonFieldNumber = 2;
  inline ::SY::ReturnReasonType returnreason() const;
  inline void set_returnreason(::SY::ReturnReasonType value);

  // optional int32 ReturnData = 3;
  inline bool has_returndata() const;
  inline void clear_returndata();
  static const int kReturnDataFieldNumber = 3;
  inline ::google::protobuf::int32 returndata() const;
  inline void set_returndata(::google::protobuf::int32 value);

  // optional int64 ReturnUserMoneyNum = 4;
  inline bool has_returnusermoneynum() const;
  inline void clear_returnusermoneynum();
  static const int kReturnUserMoneyNumFieldNumber = 4;
  inline ::google::protobuf::int64 returnusermoneynum() const;
  inline void set_returnusermoneynum(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:SY.ReturnUserMoney)
 private:
  inline void set_has_chairid();
  inline void clear_has_chairid();
  inline void set_has_returnreason();
  inline void clear_has_returnreason();
  inline void set_has_returndata();
  inline void clear_has_returndata();
  inline void set_has_returnusermoneynum();
  inline void clear_has_returnusermoneynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 chairid_;
  int returnreason_;
  ::google::protobuf::int64 returnusermoneynum_;
  ::google::protobuf::int32 returndata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static ReturnUserMoney* default_instance_;
};
// -------------------------------------------------------------------

class HallGsAdditionalGameData1Rsp : public ::google::protobuf::Message {
 public:
  HallGsAdditionalGameData1Rsp();
  virtual ~HallGsAdditionalGameData1Rsp();

  HallGsAdditionalGameData1Rsp(const HallGsAdditionalGameData1Rsp& from);

  inline HallGsAdditionalGameData1Rsp& operator=(const HallGsAdditionalGameData1Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HallGsAdditionalGameData1Rsp& default_instance();

  void Swap(HallGsAdditionalGameData1Rsp* other);

  // implements Message ----------------------------------------------

  HallGsAdditionalGameData1Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HallGsAdditionalGameData1Rsp& from);
  void MergeFrom(const HallGsAdditionalGameData1Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // required int32 user_dbid = 2;
  inline bool has_user_dbid() const;
  inline void clear_user_dbid();
  static const int kUserDbidFieldNumber = 2;
  inline ::google::protobuf::int32 user_dbid() const;
  inline void set_user_dbid(::google::protobuf::int32 value);

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 size = 4;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 4;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // optional string add_game_data = 5;
  inline bool has_add_game_data() const;
  inline void clear_add_game_data();
  static const int kAddGameDataFieldNumber = 5;
  inline const ::std::string& add_game_data() const;
  inline void set_add_game_data(const ::std::string& value);
  inline void set_add_game_data(const char* value);
  inline void set_add_game_data(const char* value, size_t size);
  inline ::std::string* mutable_add_game_data();
  inline ::std::string* release_add_game_data();
  inline void set_allocated_add_game_data(::std::string* add_game_data);

  // @@protoc_insertion_point(class_scope:SY.HallGsAdditionalGameData1Rsp)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_user_dbid();
  inline void clear_has_user_dbid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_add_game_data();
  inline void clear_has_add_game_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 index_;
  ::google::protobuf::int32 user_dbid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 size_;
  ::std::string* add_game_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static HallGsAdditionalGameData1Rsp* default_instance_;
};
// -------------------------------------------------------------------

class AdditionalGameDataRsp : public ::google::protobuf::Message {
 public:
  AdditionalGameDataRsp();
  virtual ~AdditionalGameDataRsp();

  AdditionalGameDataRsp(const AdditionalGameDataRsp& from);

  inline AdditionalGameDataRsp& operator=(const AdditionalGameDataRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdditionalGameDataRsp& default_instance();

  void Swap(AdditionalGameDataRsp* other);

  // implements Message ----------------------------------------------

  AdditionalGameDataRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdditionalGameDataRsp& from);
  void MergeFrom(const AdditionalGameDataRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required int32 game_id = 2;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 2;
  inline ::google::protobuf::int32 game_id() const;
  inline void set_game_id(::google::protobuf::int32 value);

  // required int32 user_dbid = 3;
  inline bool has_user_dbid() const;
  inline void clear_user_dbid();
  static const int kUserDbidFieldNumber = 3;
  inline ::google::protobuf::int32 user_dbid() const;
  inline void set_user_dbid(::google::protobuf::int32 value);

  // optional string additional_data = 4;
  inline bool has_additional_data() const;
  inline void clear_additional_data();
  static const int kAdditionalDataFieldNumber = 4;
  inline const ::std::string& additional_data() const;
  inline void set_additional_data(const ::std::string& value);
  inline void set_additional_data(const char* value);
  inline void set_additional_data(const char* value, size_t size);
  inline ::std::string* mutable_additional_data();
  inline ::std::string* release_additional_data();
  inline void set_allocated_additional_data(::std::string* additional_data);

  // @@protoc_insertion_point(class_scope:SY.AdditionalGameDataRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_user_dbid();
  inline void clear_has_user_dbid();
  inline void set_has_additional_data();
  inline void clear_has_additional_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 game_id_;
  ::std::string* additional_data_;
  ::google::protobuf::int32 user_dbid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static AdditionalGameDataRsp* default_instance_;
};
// -------------------------------------------------------------------

class RefreshUserFishExp : public ::google::protobuf::Message {
 public:
  RefreshUserFishExp();
  virtual ~RefreshUserFishExp();

  RefreshUserFishExp(const RefreshUserFishExp& from);

  inline RefreshUserFishExp& operator=(const RefreshUserFishExp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RefreshUserFishExp& default_instance();

  void Swap(RefreshUserFishExp* other);

  // implements Message ----------------------------------------------

  RefreshUserFishExp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RefreshUserFishExp& from);
  void MergeFrom(const RefreshUserFishExp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 userID = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // required int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional uint64 exp = 3;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 3;
  inline ::google::protobuf::uint64 exp() const;
  inline void set_exp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SY.RefreshUserFishExp)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::uint64 exp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static RefreshUserFishExp* default_instance_;
};
// -------------------------------------------------------------------

class ArenaInfo : public ::google::protobuf::Message {
 public:
  ArenaInfo();
  virtual ~ArenaInfo();

  ArenaInfo(const ArenaInfo& from);

  inline ArenaInfo& operator=(const ArenaInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaInfo& default_instance();

  void Swap(ArenaInfo* other);

  // implements Message ----------------------------------------------

  ArenaInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaInfo& from);
  void MergeFrom(const ArenaInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 game_id = 2;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 2;
  inline ::google::protobuf::int32 game_id() const;
  inline void set_game_id(::google::protobuf::int32 value);

  // required int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 min_money = 4;
  inline bool has_min_money() const;
  inline void clear_min_money();
  static const int kMinMoneyFieldNumber = 4;
  inline ::google::protobuf::int32 min_money() const;
  inline void set_min_money(::google::protobuf::int32 value);

  // optional int64 rule = 5;
  inline bool has_rule() const;
  inline void clear_rule();
  static const int kRuleFieldNumber = 5;
  inline ::google::protobuf::int64 rule() const;
  inline void set_rule(::google::protobuf::int64 value);

  // optional int32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional string name = 7;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 7;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:SY.ArenaInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_min_money();
  inline void clear_has_min_money();
  inline void set_has_rule();
  inline void clear_has_rule();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 game_id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 min_money_;
  ::google::protobuf::int64 rule_;
  ::std::string* name_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_GameMessage_2eproto();
  friend void protobuf_AssignDesc_GameMessage_2eproto();
  friend void protobuf_ShutdownFile_GameMessage_2eproto();

  void InitAsDefaultInstance();
  static ArenaInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// GameDataReq

// required int32 reg_type = 1;
inline bool GameDataReq::has_reg_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameDataReq::set_has_reg_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameDataReq::clear_has_reg_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameDataReq::clear_reg_type() {
  reg_type_ = 0;
  clear_has_reg_type();
}
inline ::google::protobuf::int32 GameDataReq::reg_type() const {
  return reg_type_;
}
inline void GameDataReq::set_reg_type(::google::protobuf::int32 value) {
  set_has_reg_type();
  reg_type_ = value;
}

// optional uint32 remote_ip = 2;
inline bool GameDataReq::has_remote_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameDataReq::set_has_remote_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameDataReq::clear_has_remote_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameDataReq::clear_remote_ip() {
  remote_ip_ = 0u;
  clear_has_remote_ip();
}
inline ::google::protobuf::uint32 GameDataReq::remote_ip() const {
  return remote_ip_;
}
inline void GameDataReq::set_remote_ip(::google::protobuf::uint32 value) {
  set_has_remote_ip();
  remote_ip_ = value;
}

// -------------------------------------------------------------------

// SkillInfo

// optional int32 SkillID = 1;
inline bool SkillInfo::has_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillInfo::set_has_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillInfo::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillInfo::clear_skillid() {
  skillid_ = 0;
  clear_has_skillid();
}
inline ::google::protobuf::int32 SkillInfo::skillid() const {
  return skillid_;
}
inline void SkillInfo::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional .SY.SkillStatus Status = 2;
inline bool SkillInfo::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillInfo::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::SY::SkillStatus SkillInfo::status() const {
  return static_cast< ::SY::SkillStatus >(status_);
}
inline void SkillInfo::set_status(::SY::SkillStatus value) {
  assert(::SY::SkillStatus_IsValid(value));
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// GameStationBase

// optional bool Playing = 1;
inline bool GameStationBase::has_playing() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameStationBase::set_has_playing() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameStationBase::clear_has_playing() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameStationBase::clear_playing() {
  playing_ = false;
  clear_has_playing();
}
inline bool GameStationBase::playing() const {
  return playing_;
}
inline void GameStationBase::set_playing(bool value) {
  set_has_playing();
  playing_ = value;
}

// optional int32 SceneIndex = 2;
inline bool GameStationBase::has_sceneindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameStationBase::set_has_sceneindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameStationBase::clear_has_sceneindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameStationBase::clear_sceneindex() {
  sceneindex_ = 0;
  clear_has_sceneindex();
}
inline ::google::protobuf::int32 GameStationBase::sceneindex() const {
  return sceneindex_;
}
inline void GameStationBase::set_sceneindex(::google::protobuf::int32 value) {
  set_has_sceneindex();
  sceneindex_ = value;
}

// repeated bool OnLineChair = 3;
inline int GameStationBase::onlinechair_size() const {
  return onlinechair_.size();
}
inline void GameStationBase::clear_onlinechair() {
  onlinechair_.Clear();
}
inline bool GameStationBase::onlinechair(int index) const {
  return onlinechair_.Get(index);
}
inline void GameStationBase::set_onlinechair(int index, bool value) {
  onlinechair_.Set(index, value);
}
inline void GameStationBase::add_onlinechair(bool value) {
  onlinechair_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
GameStationBase::onlinechair() const {
  return onlinechair_;
}
inline ::google::protobuf::RepeatedField< bool >*
GameStationBase::mutable_onlinechair() {
  return &onlinechair_;
}

// repeated int64 UserMoneyNum = 4;
inline int GameStationBase::usermoneynum_size() const {
  return usermoneynum_.size();
}
inline void GameStationBase::clear_usermoneynum() {
  usermoneynum_.Clear();
}
inline ::google::protobuf::int64 GameStationBase::usermoneynum(int index) const {
  return usermoneynum_.Get(index);
}
inline void GameStationBase::set_usermoneynum(int index, ::google::protobuf::int64 value) {
  usermoneynum_.Set(index, value);
}
inline void GameStationBase::add_usermoneynum(::google::protobuf::int64 value) {
  usermoneynum_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GameStationBase::usermoneynum() const {
  return usermoneynum_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GameStationBase::mutable_usermoneynum() {
  return &usermoneynum_;
}

// repeated int64 UserTicketNum = 5;
inline int GameStationBase::userticketnum_size() const {
  return userticketnum_.size();
}
inline void GameStationBase::clear_userticketnum() {
  userticketnum_.Clear();
}
inline ::google::protobuf::int64 GameStationBase::userticketnum(int index) const {
  return userticketnum_.Get(index);
}
inline void GameStationBase::set_userticketnum(int index, ::google::protobuf::int64 value) {
  userticketnum_.Set(index, value);
}
inline void GameStationBase::add_userticketnum(::google::protobuf::int64 value) {
  userticketnum_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GameStationBase::userticketnum() const {
  return userticketnum_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GameStationBase::mutable_userticketnum() {
  return &userticketnum_;
}

// repeated int32 WeaponCost = 6;
inline int GameStationBase::weaponcost_size() const {
  return weaponcost_.size();
}
inline void GameStationBase::clear_weaponcost() {
  weaponcost_.Clear();
}
inline ::google::protobuf::int32 GameStationBase::weaponcost(int index) const {
  return weaponcost_.Get(index);
}
inline void GameStationBase::set_weaponcost(int index, ::google::protobuf::int32 value) {
  weaponcost_.Set(index, value);
}
inline void GameStationBase::add_weaponcost(::google::protobuf::int32 value) {
  weaponcost_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GameStationBase::weaponcost() const {
  return weaponcost_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GameStationBase::mutable_weaponcost() {
  return &weaponcost_;
}

// repeated .SY.SkillInfo SkillInf = 7;
inline int GameStationBase::skillinf_size() const {
  return skillinf_.size();
}
inline void GameStationBase::clear_skillinf() {
  skillinf_.Clear();
}
inline const ::SY::SkillInfo& GameStationBase::skillinf(int index) const {
  return skillinf_.Get(index);
}
inline ::SY::SkillInfo* GameStationBase::mutable_skillinf(int index) {
  return skillinf_.Mutable(index);
}
inline ::SY::SkillInfo* GameStationBase::add_skillinf() {
  return skillinf_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SY::SkillInfo >&
GameStationBase::skillinf() const {
  return skillinf_;
}
inline ::google::protobuf::RepeatedPtrField< ::SY::SkillInfo >*
GameStationBase::mutable_skillinf() {
  return &skillinf_;
}

// -------------------------------------------------------------------

// ServerPersonalSceneRsp

// required int32 reg_type = 1;
inline bool ServerPersonalSceneRsp::has_reg_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerPersonalSceneRsp::set_has_reg_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerPersonalSceneRsp::clear_has_reg_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerPersonalSceneRsp::clear_reg_type() {
  reg_type_ = 0;
  clear_has_reg_type();
}
inline ::google::protobuf::int32 ServerPersonalSceneRsp::reg_type() const {
  return reg_type_;
}
inline void ServerPersonalSceneRsp::set_reg_type(::google::protobuf::int32 value) {
  set_has_reg_type();
  reg_type_ = value;
}

// required .SY.GameStationBase StationBase = 2;
inline bool ServerPersonalSceneRsp::has_stationbase() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerPersonalSceneRsp::set_has_stationbase() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerPersonalSceneRsp::clear_has_stationbase() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerPersonalSceneRsp::clear_stationbase() {
  if (stationbase_ != NULL) stationbase_->::SY::GameStationBase::Clear();
  clear_has_stationbase();
}
inline const ::SY::GameStationBase& ServerPersonalSceneRsp::stationbase() const {
  return stationbase_ != NULL ? *stationbase_ : *default_instance_->stationbase_;
}
inline ::SY::GameStationBase* ServerPersonalSceneRsp::mutable_stationbase() {
  set_has_stationbase();
  if (stationbase_ == NULL) stationbase_ = new ::SY::GameStationBase;
  return stationbase_;
}
inline ::SY::GameStationBase* ServerPersonalSceneRsp::release_stationbase() {
  clear_has_stationbase();
  ::SY::GameStationBase* temp = stationbase_;
  stationbase_ = NULL;
  return temp;
}
inline void ServerPersonalSceneRsp::set_allocated_stationbase(::SY::GameStationBase* stationbase) {
  delete stationbase_;
  stationbase_ = stationbase;
  if (stationbase) {
    set_has_stationbase();
  } else {
    clear_has_stationbase();
  }
}

// -------------------------------------------------------------------

// ClientConfirmStartReq

// optional int32 ConfirmStart = 1;
inline bool ClientConfirmStartReq::has_confirmstart() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientConfirmStartReq::set_has_confirmstart() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientConfirmStartReq::clear_has_confirmstart() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientConfirmStartReq::clear_confirmstart() {
  confirmstart_ = 0;
  clear_has_confirmstart();
}
inline ::google::protobuf::int32 ClientConfirmStartReq::confirmstart() const {
  return confirmstart_;
}
inline void ClientConfirmStartReq::set_confirmstart(::google::protobuf::int32 value) {
  set_has_confirmstart();
  confirmstart_ = value;
}

// -------------------------------------------------------------------

// ServerFirstSceneRsp

// optional .SY.ServerPersonalSceneRsp first_scene = 1;
inline bool ServerFirstSceneRsp::has_first_scene() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerFirstSceneRsp::set_has_first_scene() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerFirstSceneRsp::clear_has_first_scene() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerFirstSceneRsp::clear_first_scene() {
  if (first_scene_ != NULL) first_scene_->::SY::ServerPersonalSceneRsp::Clear();
  clear_has_first_scene();
}
inline const ::SY::ServerPersonalSceneRsp& ServerFirstSceneRsp::first_scene() const {
  return first_scene_ != NULL ? *first_scene_ : *default_instance_->first_scene_;
}
inline ::SY::ServerPersonalSceneRsp* ServerFirstSceneRsp::mutable_first_scene() {
  set_has_first_scene();
  if (first_scene_ == NULL) first_scene_ = new ::SY::ServerPersonalSceneRsp;
  return first_scene_;
}
inline ::SY::ServerPersonalSceneRsp* ServerFirstSceneRsp::release_first_scene() {
  clear_has_first_scene();
  ::SY::ServerPersonalSceneRsp* temp = first_scene_;
  first_scene_ = NULL;
  return temp;
}
inline void ServerFirstSceneRsp::set_allocated_first_scene(::SY::ServerPersonalSceneRsp* first_scene) {
  delete first_scene_;
  first_scene_ = first_scene;
  if (first_scene) {
    set_has_first_scene();
  } else {
    clear_has_first_scene();
  }
}

// -------------------------------------------------------------------

// ScreenResolution

// optional int32 CLIENT_WIDTH = 1;
inline bool ScreenResolution::has_client_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScreenResolution::set_has_client_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScreenResolution::clear_has_client_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScreenResolution::clear_client_width() {
  client_width_ = 0;
  clear_has_client_width();
}
inline ::google::protobuf::int32 ScreenResolution::client_width() const {
  return client_width_;
}
inline void ScreenResolution::set_client_width(::google::protobuf::int32 value) {
  set_has_client_width();
  client_width_ = value;
}

// optional int32 CLIENT_HEIGHT = 2;
inline bool ScreenResolution::has_client_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScreenResolution::set_has_client_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScreenResolution::clear_has_client_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScreenResolution::clear_client_height() {
  client_height_ = 0;
  clear_has_client_height();
}
inline ::google::protobuf::int32 ScreenResolution::client_height() const {
  return client_height_;
}
inline void ScreenResolution::set_client_height(::google::protobuf::int32 value) {
  set_has_client_height();
  client_height_ = value;
}

// -------------------------------------------------------------------

// GameChatSection

// required int32 section_type = 1;
inline bool GameChatSection::has_section_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameChatSection::set_has_section_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameChatSection::clear_has_section_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameChatSection::clear_section_type() {
  section_type_ = 0;
  clear_has_section_type();
}
inline ::google::protobuf::int32 GameChatSection::section_type() const {
  return section_type_;
}
inline void GameChatSection::set_section_type(::google::protobuf::int32 value) {
  set_has_section_type();
  section_type_ = value;
}

// optional string section_words = 2;
inline bool GameChatSection::has_section_words() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameChatSection::set_has_section_words() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameChatSection::clear_has_section_words() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameChatSection::clear_section_words() {
  if (section_words_ != &::google::protobuf::internal::kEmptyString) {
    section_words_->clear();
  }
  clear_has_section_words();
}
inline const ::std::string& GameChatSection::section_words() const {
  return *section_words_;
}
inline void GameChatSection::set_section_words(const ::std::string& value) {
  set_has_section_words();
  if (section_words_ == &::google::protobuf::internal::kEmptyString) {
    section_words_ = new ::std::string;
  }
  section_words_->assign(value);
}
inline void GameChatSection::set_section_words(const char* value) {
  set_has_section_words();
  if (section_words_ == &::google::protobuf::internal::kEmptyString) {
    section_words_ = new ::std::string;
  }
  section_words_->assign(value);
}
inline void GameChatSection::set_section_words(const char* value, size_t size) {
  set_has_section_words();
  if (section_words_ == &::google::protobuf::internal::kEmptyString) {
    section_words_ = new ::std::string;
  }
  section_words_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameChatSection::mutable_section_words() {
  set_has_section_words();
  if (section_words_ == &::google::protobuf::internal::kEmptyString) {
    section_words_ = new ::std::string;
  }
  return section_words_;
}
inline ::std::string* GameChatSection::release_section_words() {
  clear_has_section_words();
  if (section_words_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = section_words_;
    section_words_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GameChatSection::set_allocated_section_words(::std::string* section_words) {
  if (section_words_ != &::google::protobuf::internal::kEmptyString) {
    delete section_words_;
  }
  if (section_words) {
    set_has_section_words();
    section_words_ = section_words;
  } else {
    clear_has_section_words();
    section_words_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GameTelevisonResult

// required int32 content_type = 1;
inline bool GameTelevisonResult::has_content_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameTelevisonResult::set_has_content_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameTelevisonResult::clear_has_content_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameTelevisonResult::clear_content_type() {
  content_type_ = 0;
  clear_has_content_type();
}
inline ::google::protobuf::int32 GameTelevisonResult::content_type() const {
  return content_type_;
}
inline void GameTelevisonResult::set_content_type(::google::protobuf::int32 value) {
  set_has_content_type();
  content_type_ = value;
}

// required int32 game_id = 2;
inline bool GameTelevisonResult::has_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameTelevisonResult::set_has_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameTelevisonResult::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameTelevisonResult::clear_game_id() {
  game_id_ = 0;
  clear_has_game_id();
}
inline ::google::protobuf::int32 GameTelevisonResult::game_id() const {
  return game_id_;
}
inline void GameTelevisonResult::set_game_id(::google::protobuf::int32 value) {
  set_has_game_id();
  game_id_ = value;
}

// repeated .SY.GameChatSection content_info = 3;
inline int GameTelevisonResult::content_info_size() const {
  return content_info_.size();
}
inline void GameTelevisonResult::clear_content_info() {
  content_info_.Clear();
}
inline const ::SY::GameChatSection& GameTelevisonResult::content_info(int index) const {
  return content_info_.Get(index);
}
inline ::SY::GameChatSection* GameTelevisonResult::mutable_content_info(int index) {
  return content_info_.Mutable(index);
}
inline ::SY::GameChatSection* GameTelevisonResult::add_content_info() {
  return content_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SY::GameChatSection >&
GameTelevisonResult::content_info() const {
  return content_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::SY::GameChatSection >*
GameTelevisonResult::mutable_content_info() {
  return &content_info_;
}

// -------------------------------------------------------------------

// UserMoneySync

// required int32 ChairID = 1;
inline bool UserMoneySync::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserMoneySync::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserMoneySync::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserMoneySync::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 UserMoneySync::chairid() const {
  return chairid_;
}
inline void UserMoneySync::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional int64 UserMoneyNum = 2;
inline bool UserMoneySync::has_usermoneynum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserMoneySync::set_has_usermoneynum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserMoneySync::clear_has_usermoneynum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserMoneySync::clear_usermoneynum() {
  usermoneynum_ = GOOGLE_LONGLONG(0);
  clear_has_usermoneynum();
}
inline ::google::protobuf::int64 UserMoneySync::usermoneynum() const {
  return usermoneynum_;
}
inline void UserMoneySync::set_usermoneynum(::google::protobuf::int64 value) {
  set_has_usermoneynum();
  usermoneynum_ = value;
}

// optional int64 UserTicketNum = 3;
inline bool UserMoneySync::has_userticketnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserMoneySync::set_has_userticketnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserMoneySync::clear_has_userticketnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserMoneySync::clear_userticketnum() {
  userticketnum_ = GOOGLE_LONGLONG(0);
  clear_has_userticketnum();
}
inline ::google::protobuf::int64 UserMoneySync::userticketnum() const {
  return userticketnum_;
}
inline void UserMoneySync::set_userticketnum(::google::protobuf::int64 value) {
  set_has_userticketnum();
  userticketnum_ = value;
}

// optional int32 level = 4;
inline bool UserMoneySync::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserMoneySync::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserMoneySync::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserMoneySync::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 UserMoneySync::level() const {
  return level_;
}
inline void UserMoneySync::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional uint64 exp = 5;
inline bool UserMoneySync::has_exp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserMoneySync::set_has_exp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserMoneySync::clear_has_exp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserMoneySync::clear_exp() {
  exp_ = GOOGLE_ULONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::uint64 UserMoneySync::exp() const {
  return exp_;
}
inline void UserMoneySync::set_exp(::google::protobuf::uint64 value) {
  set_has_exp();
  exp_ = value;
}

// -------------------------------------------------------------------

// ChangeWeaponReq

// optional int32 ChairID = 1;
inline bool ChangeWeaponReq::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeWeaponReq::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeWeaponReq::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeWeaponReq::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 ChangeWeaponReq::chairid() const {
  return chairid_;
}
inline void ChangeWeaponReq::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional int32 WeaponID = 2;
inline bool ChangeWeaponReq::has_weaponid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangeWeaponReq::set_has_weaponid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangeWeaponReq::clear_has_weaponid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangeWeaponReq::clear_weaponid() {
  weaponid_ = 0;
  clear_has_weaponid();
}
inline ::google::protobuf::int32 ChangeWeaponReq::weaponid() const {
  return weaponid_;
}
inline void ChangeWeaponReq::set_weaponid(::google::protobuf::int32 value) {
  set_has_weaponid();
  weaponid_ = value;
}

// -------------------------------------------------------------------

// ChangeWeaponRsp

// optional int32 ChairID = 1;
inline bool ChangeWeaponRsp::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeWeaponRsp::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeWeaponRsp::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeWeaponRsp::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 ChangeWeaponRsp::chairid() const {
  return chairid_;
}
inline void ChangeWeaponRsp::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional int32 WeaponID = 2;
inline bool ChangeWeaponRsp::has_weaponid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangeWeaponRsp::set_has_weaponid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangeWeaponRsp::clear_has_weaponid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangeWeaponRsp::clear_weaponid() {
  weaponid_ = 0;
  clear_has_weaponid();
}
inline ::google::protobuf::int32 ChangeWeaponRsp::weaponid() const {
  return weaponid_;
}
inline void ChangeWeaponRsp::set_weaponid(::google::protobuf::int32 value) {
  set_has_weaponid();
  weaponid_ = value;
}

// optional int32 Result = 3;
inline bool ChangeWeaponRsp::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChangeWeaponRsp::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChangeWeaponRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChangeWeaponRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 ChangeWeaponRsp::result() const {
  return result_;
}
inline void ChangeWeaponRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// BuySkillReq

// optional int32 ChairID = 1;
inline bool BuySkillReq::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuySkillReq::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuySkillReq::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuySkillReq::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 BuySkillReq::chairid() const {
  return chairid_;
}
inline void BuySkillReq::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional int32 SkillID = 2;
inline bool BuySkillReq::has_skillid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuySkillReq::set_has_skillid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuySkillReq::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuySkillReq::clear_skillid() {
  skillid_ = 0;
  clear_has_skillid();
}
inline ::google::protobuf::int32 BuySkillReq::skillid() const {
  return skillid_;
}
inline void BuySkillReq::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
}

// -------------------------------------------------------------------

// BuySkillRsp

// optional int32 ChairID = 1;
inline bool BuySkillRsp::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuySkillRsp::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuySkillRsp::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuySkillRsp::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 BuySkillRsp::chairid() const {
  return chairid_;
}
inline void BuySkillRsp::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional int32 SkillID = 2;
inline bool BuySkillRsp::has_skillid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuySkillRsp::set_has_skillid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuySkillRsp::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuySkillRsp::clear_skillid() {
  skillid_ = 0;
  clear_has_skillid();
}
inline ::google::protobuf::int32 BuySkillRsp::skillid() const {
  return skillid_;
}
inline void BuySkillRsp::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional int32 Result = 3;
inline bool BuySkillRsp::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuySkillRsp::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuySkillRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuySkillRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 BuySkillRsp::result() const {
  return result_;
}
inline void BuySkillRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// BuyAutoAttackReq

// optional int32 ChairID = 1;
inline bool BuyAutoAttackReq::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuyAutoAttackReq::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuyAutoAttackReq::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuyAutoAttackReq::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 BuyAutoAttackReq::chairid() const {
  return chairid_;
}
inline void BuyAutoAttackReq::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional int32 AutoAttackLevel = 2;
inline bool BuyAutoAttackReq::has_autoattacklevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuyAutoAttackReq::set_has_autoattacklevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuyAutoAttackReq::clear_has_autoattacklevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuyAutoAttackReq::clear_autoattacklevel() {
  autoattacklevel_ = 0;
  clear_has_autoattacklevel();
}
inline ::google::protobuf::int32 BuyAutoAttackReq::autoattacklevel() const {
  return autoattacklevel_;
}
inline void BuyAutoAttackReq::set_autoattacklevel(::google::protobuf::int32 value) {
  set_has_autoattacklevel();
  autoattacklevel_ = value;
}

// -------------------------------------------------------------------

// BuyHammerLevelReq

// optional int32 ChairID = 1;
inline bool BuyHammerLevelReq::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuyHammerLevelReq::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuyHammerLevelReq::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuyHammerLevelReq::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 BuyHammerLevelReq::chairid() const {
  return chairid_;
}
inline void BuyHammerLevelReq::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional int32 HammerLevel = 2;
inline bool BuyHammerLevelReq::has_hammerlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuyHammerLevelReq::set_has_hammerlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuyHammerLevelReq::clear_has_hammerlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuyHammerLevelReq::clear_hammerlevel() {
  hammerlevel_ = 0;
  clear_has_hammerlevel();
}
inline ::google::protobuf::int32 BuyHammerLevelReq::hammerlevel() const {
  return hammerlevel_;
}
inline void BuyHammerLevelReq::set_hammerlevel(::google::protobuf::int32 value) {
  set_has_hammerlevel();
  hammerlevel_ = value;
}

// -------------------------------------------------------------------

// BuyHammerLevelRsp

// optional int32 ChairID = 1;
inline bool BuyHammerLevelRsp::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuyHammerLevelRsp::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuyHammerLevelRsp::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuyHammerLevelRsp::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 BuyHammerLevelRsp::chairid() const {
  return chairid_;
}
inline void BuyHammerLevelRsp::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional int32 HammerLevel = 2;
inline bool BuyHammerLevelRsp::has_hammerlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuyHammerLevelRsp::set_has_hammerlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuyHammerLevelRsp::clear_has_hammerlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuyHammerLevelRsp::clear_hammerlevel() {
  hammerlevel_ = 0;
  clear_has_hammerlevel();
}
inline ::google::protobuf::int32 BuyHammerLevelRsp::hammerlevel() const {
  return hammerlevel_;
}
inline void BuyHammerLevelRsp::set_hammerlevel(::google::protobuf::int32 value) {
  set_has_hammerlevel();
  hammerlevel_ = value;
}

// optional int32 Result = 3;
inline bool BuyHammerLevelRsp::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuyHammerLevelRsp::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuyHammerLevelRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuyHammerLevelRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 BuyHammerLevelRsp::result() const {
  return result_;
}
inline void BuyHammerLevelRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// KingCriticalHit

// optional int32 ChairID = 1;
inline bool KingCriticalHit::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KingCriticalHit::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KingCriticalHit::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KingCriticalHit::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 KingCriticalHit::chairid() const {
  return chairid_;
}
inline void KingCriticalHit::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// required int32 isCriticalHit = 2;
inline bool KingCriticalHit::has_iscriticalhit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KingCriticalHit::set_has_iscriticalhit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KingCriticalHit::clear_has_iscriticalhit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KingCriticalHit::clear_iscriticalhit() {
  iscriticalhit_ = 0;
  clear_has_iscriticalhit();
}
inline ::google::protobuf::int32 KingCriticalHit::iscriticalhit() const {
  return iscriticalhit_;
}
inline void KingCriticalHit::set_iscriticalhit(::google::protobuf::int32 value) {
  set_has_iscriticalhit();
  iscriticalhit_ = value;
}

// optional int32 WeaponID = 3;
inline bool KingCriticalHit::has_weaponid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KingCriticalHit::set_has_weaponid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KingCriticalHit::clear_has_weaponid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KingCriticalHit::clear_weaponid() {
  weaponid_ = 0;
  clear_has_weaponid();
}
inline ::google::protobuf::int32 KingCriticalHit::weaponid() const {
  return weaponid_;
}
inline void KingCriticalHit::set_weaponid(::google::protobuf::int32 value) {
  set_has_weaponid();
  weaponid_ = value;
}

// repeated int32 MonsterIDList = 4;
inline int KingCriticalHit::monsteridlist_size() const {
  return monsteridlist_.size();
}
inline void KingCriticalHit::clear_monsteridlist() {
  monsteridlist_.Clear();
}
inline ::google::protobuf::int32 KingCriticalHit::monsteridlist(int index) const {
  return monsteridlist_.Get(index);
}
inline void KingCriticalHit::set_monsteridlist(int index, ::google::protobuf::int32 value) {
  monsteridlist_.Set(index, value);
}
inline void KingCriticalHit::add_monsteridlist(::google::protobuf::int32 value) {
  monsteridlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
KingCriticalHit::monsteridlist() const {
  return monsteridlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
KingCriticalHit::mutable_monsteridlist() {
  return &monsteridlist_;
}

// optional int64 UserMoneyGain = 5;
inline bool KingCriticalHit::has_usermoneygain() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KingCriticalHit::set_has_usermoneygain() {
  _has_bits_[0] |= 0x00000010u;
}
inline void KingCriticalHit::clear_has_usermoneygain() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void KingCriticalHit::clear_usermoneygain() {
  usermoneygain_ = GOOGLE_LONGLONG(0);
  clear_has_usermoneygain();
}
inline ::google::protobuf::int64 KingCriticalHit::usermoneygain() const {
  return usermoneygain_;
}
inline void KingCriticalHit::set_usermoneygain(::google::protobuf::int64 value) {
  set_has_usermoneygain();
  usermoneygain_ = value;
}

// optional int64 UserTicketGain = 6;
inline bool KingCriticalHit::has_userticketgain() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void KingCriticalHit::set_has_userticketgain() {
  _has_bits_[0] |= 0x00000020u;
}
inline void KingCriticalHit::clear_has_userticketgain() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void KingCriticalHit::clear_userticketgain() {
  userticketgain_ = GOOGLE_LONGLONG(0);
  clear_has_userticketgain();
}
inline ::google::protobuf::int64 KingCriticalHit::userticketgain() const {
  return userticketgain_;
}
inline void KingCriticalHit::set_userticketgain(::google::protobuf::int64 value) {
  set_has_userticketgain();
  userticketgain_ = value;
}

// optional int64 UserMoneyNum = 7;
inline bool KingCriticalHit::has_usermoneynum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void KingCriticalHit::set_has_usermoneynum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void KingCriticalHit::clear_has_usermoneynum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void KingCriticalHit::clear_usermoneynum() {
  usermoneynum_ = GOOGLE_LONGLONG(0);
  clear_has_usermoneynum();
}
inline ::google::protobuf::int64 KingCriticalHit::usermoneynum() const {
  return usermoneynum_;
}
inline void KingCriticalHit::set_usermoneynum(::google::protobuf::int64 value) {
  set_has_usermoneynum();
  usermoneynum_ = value;
}

// optional int64 UserTicketNum = 8;
inline bool KingCriticalHit::has_userticketnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void KingCriticalHit::set_has_userticketnum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void KingCriticalHit::clear_has_userticketnum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void KingCriticalHit::clear_userticketnum() {
  userticketnum_ = GOOGLE_LONGLONG(0);
  clear_has_userticketnum();
}
inline ::google::protobuf::int64 KingCriticalHit::userticketnum() const {
  return userticketnum_;
}
inline void KingCriticalHit::set_userticketnum(::google::protobuf::int64 value) {
  set_has_userticketnum();
  userticketnum_ = value;
}

// optional int32 AnimMidLast = 9;
inline bool KingCriticalHit::has_animmidlast() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void KingCriticalHit::set_has_animmidlast() {
  _has_bits_[0] |= 0x00000100u;
}
inline void KingCriticalHit::clear_has_animmidlast() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void KingCriticalHit::clear_animmidlast() {
  animmidlast_ = 0;
  clear_has_animmidlast();
}
inline ::google::protobuf::int32 KingCriticalHit::animmidlast() const {
  return animmidlast_;
}
inline void KingCriticalHit::set_animmidlast(::google::protobuf::int32 value) {
  set_has_animmidlast();
  animmidlast_ = value;
}

// optional int32 AnimEndLast = 10;
inline bool KingCriticalHit::has_animendlast() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void KingCriticalHit::set_has_animendlast() {
  _has_bits_[0] |= 0x00000200u;
}
inline void KingCriticalHit::clear_has_animendlast() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void KingCriticalHit::clear_animendlast() {
  animendlast_ = 0;
  clear_has_animendlast();
}
inline ::google::protobuf::int32 KingCriticalHit::animendlast() const {
  return animendlast_;
}
inline void KingCriticalHit::set_animendlast(::google::protobuf::int32 value) {
  set_has_animendlast();
  animendlast_ = value;
}

// -------------------------------------------------------------------

// BuyAutoAttackRsp

// optional int32 ChairID = 1;
inline bool BuyAutoAttackRsp::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuyAutoAttackRsp::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuyAutoAttackRsp::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuyAutoAttackRsp::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 BuyAutoAttackRsp::chairid() const {
  return chairid_;
}
inline void BuyAutoAttackRsp::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional int32 AutoAttackLevel = 2;
inline bool BuyAutoAttackRsp::has_autoattacklevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuyAutoAttackRsp::set_has_autoattacklevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuyAutoAttackRsp::clear_has_autoattacklevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuyAutoAttackRsp::clear_autoattacklevel() {
  autoattacklevel_ = 0;
  clear_has_autoattacklevel();
}
inline ::google::protobuf::int32 BuyAutoAttackRsp::autoattacklevel() const {
  return autoattacklevel_;
}
inline void BuyAutoAttackRsp::set_autoattacklevel(::google::protobuf::int32 value) {
  set_has_autoattacklevel();
  autoattacklevel_ = value;
}

// optional int32 Result = 3;
inline bool BuyAutoAttackRsp::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuyAutoAttackRsp::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuyAutoAttackRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuyAutoAttackRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 BuyAutoAttackRsp::result() const {
  return result_;
}
inline void BuyAutoAttackRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// ChangeSkillStatus

// optional int32 ChairID = 1;
inline bool ChangeSkillStatus::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeSkillStatus::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeSkillStatus::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeSkillStatus::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 ChangeSkillStatus::chairid() const {
  return chairid_;
}
inline void ChangeSkillStatus::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// repeated .SY.SkillInfo SkillInf = 2;
inline int ChangeSkillStatus::skillinf_size() const {
  return skillinf_.size();
}
inline void ChangeSkillStatus::clear_skillinf() {
  skillinf_.Clear();
}
inline const ::SY::SkillInfo& ChangeSkillStatus::skillinf(int index) const {
  return skillinf_.Get(index);
}
inline ::SY::SkillInfo* ChangeSkillStatus::mutable_skillinf(int index) {
  return skillinf_.Mutable(index);
}
inline ::SY::SkillInfo* ChangeSkillStatus::add_skillinf() {
  return skillinf_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SY::SkillInfo >&
ChangeSkillStatus::skillinf() const {
  return skillinf_;
}
inline ::google::protobuf::RepeatedPtrField< ::SY::SkillInfo >*
ChangeSkillStatus::mutable_skillinf() {
  return &skillinf_;
}

// -------------------------------------------------------------------

// SkillHit

// optional int32 TriggerSkillID = 1;
inline bool SkillHit::has_triggerskillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillHit::set_has_triggerskillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillHit::clear_has_triggerskillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillHit::clear_triggerskillid() {
  triggerskillid_ = 0;
  clear_has_triggerskillid();
}
inline ::google::protobuf::int32 SkillHit::triggerskillid() const {
  return triggerskillid_;
}
inline void SkillHit::set_triggerskillid(::google::protobuf::int32 value) {
  set_has_triggerskillid();
  triggerskillid_ = value;
}

// repeated int32 MonsterID = 2;
inline int SkillHit::monsterid_size() const {
  return monsterid_.size();
}
inline void SkillHit::clear_monsterid() {
  monsterid_.Clear();
}
inline ::google::protobuf::int32 SkillHit::monsterid(int index) const {
  return monsterid_.Get(index);
}
inline void SkillHit::set_monsterid(int index, ::google::protobuf::int32 value) {
  monsterid_.Set(index, value);
}
inline void SkillHit::add_monsterid(::google::protobuf::int32 value) {
  monsterid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SkillHit::monsterid() const {
  return monsterid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SkillHit::mutable_monsterid() {
  return &monsterid_;
}

// -------------------------------------------------------------------

// PlayerHit

// optional int32 ChairID = 1;
inline bool PlayerHit::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerHit::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerHit::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerHit::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 PlayerHit::chairid() const {
  return chairid_;
}
inline void PlayerHit::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional int32 MonsterID = 2;
inline bool PlayerHit::has_monsterid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerHit::set_has_monsterid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerHit::clear_has_monsterid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerHit::clear_monsterid() {
  monsterid_ = 0;
  clear_has_monsterid();
}
inline ::google::protobuf::int32 PlayerHit::monsterid() const {
  return monsterid_;
}
inline void PlayerHit::set_monsterid(::google::protobuf::int32 value) {
  set_has_monsterid();
  monsterid_ = value;
}

// optional int32 WeaponID = 3;
inline bool PlayerHit::has_weaponid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerHit::set_has_weaponid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerHit::clear_has_weaponid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerHit::clear_weaponid() {
  weaponid_ = 0;
  clear_has_weaponid();
}
inline ::google::protobuf::int32 PlayerHit::weaponid() const {
  return weaponid_;
}
inline void PlayerHit::set_weaponid(::google::protobuf::int32 value) {
  set_has_weaponid();
  weaponid_ = value;
}

// repeated .SY.SkillHit SkillList = 4;
inline int PlayerHit::skilllist_size() const {
  return skilllist_.size();
}
inline void PlayerHit::clear_skilllist() {
  skilllist_.Clear();
}
inline const ::SY::SkillHit& PlayerHit::skilllist(int index) const {
  return skilllist_.Get(index);
}
inline ::SY::SkillHit* PlayerHit::mutable_skilllist(int index) {
  return skilllist_.Mutable(index);
}
inline ::SY::SkillHit* PlayerHit::add_skilllist() {
  return skilllist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SY::SkillHit >&
PlayerHit::skilllist() const {
  return skilllist_;
}
inline ::google::protobuf::RepeatedPtrField< ::SY::SkillHit >*
PlayerHit::mutable_skilllist() {
  return &skilllist_;
}

// optional bool IsRobot = 5;
inline bool PlayerHit::has_isrobot() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerHit::set_has_isrobot() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerHit::clear_has_isrobot() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerHit::clear_isrobot() {
  isrobot_ = false;
  clear_has_isrobot();
}
inline bool PlayerHit::isrobot() const {
  return isrobot_;
}
inline void PlayerHit::set_isrobot(bool value) {
  set_has_isrobot();
  isrobot_ = value;
}

// optional bool HasPayWeaponCost = 6;
inline bool PlayerHit::has_haspayweaponcost() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerHit::set_has_haspayweaponcost() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerHit::clear_has_haspayweaponcost() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerHit::clear_haspayweaponcost() {
  haspayweaponcost_ = false;
  clear_has_haspayweaponcost();
}
inline bool PlayerHit::haspayweaponcost() const {
  return haspayweaponcost_;
}
inline void PlayerHit::set_haspayweaponcost(bool value) {
  set_has_haspayweaponcost();
  haspayweaponcost_ = value;
}

// repeated int32 MonsterIDList = 7;
inline int PlayerHit::monsteridlist_size() const {
  return monsteridlist_.size();
}
inline void PlayerHit::clear_monsteridlist() {
  monsteridlist_.Clear();
}
inline ::google::protobuf::int32 PlayerHit::monsteridlist(int index) const {
  return monsteridlist_.Get(index);
}
inline void PlayerHit::set_monsteridlist(int index, ::google::protobuf::int32 value) {
  monsteridlist_.Set(index, value);
}
inline void PlayerHit::add_monsteridlist(::google::protobuf::int32 value) {
  monsteridlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlayerHit::monsteridlist() const {
  return monsteridlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlayerHit::mutable_monsteridlist() {
  return &monsteridlist_;
}

// repeated int32 SkillHitListHasPay = 8;
inline int PlayerHit::skillhitlisthaspay_size() const {
  return skillhitlisthaspay_.size();
}
inline void PlayerHit::clear_skillhitlisthaspay() {
  skillhitlisthaspay_.Clear();
}
inline ::google::protobuf::int32 PlayerHit::skillhitlisthaspay(int index) const {
  return skillhitlisthaspay_.Get(index);
}
inline void PlayerHit::set_skillhitlisthaspay(int index, ::google::protobuf::int32 value) {
  skillhitlisthaspay_.Set(index, value);
}
inline void PlayerHit::add_skillhitlisthaspay(::google::protobuf::int32 value) {
  skillhitlisthaspay_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PlayerHit::skillhitlisthaspay() const {
  return skillhitlisthaspay_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PlayerHit::mutable_skillhitlisthaspay() {
  return &skillhitlisthaspay_;
}

// -------------------------------------------------------------------

// PlayerHitSync

// optional int32 ChairID = 1;
inline bool PlayerHitSync::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerHitSync::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerHitSync::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerHitSync::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 PlayerHitSync::chairid() const {
  return chairid_;
}
inline void PlayerHitSync::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional int32 MonsterID = 2;
inline bool PlayerHitSync::has_monsterid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerHitSync::set_has_monsterid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerHitSync::clear_has_monsterid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerHitSync::clear_monsterid() {
  monsterid_ = 0;
  clear_has_monsterid();
}
inline ::google::protobuf::int32 PlayerHitSync::monsterid() const {
  return monsterid_;
}
inline void PlayerHitSync::set_monsterid(::google::protobuf::int32 value) {
  set_has_monsterid();
  monsterid_ = value;
}

// optional int32 WeaponID = 3;
inline bool PlayerHitSync::has_weaponid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerHitSync::set_has_weaponid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerHitSync::clear_has_weaponid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerHitSync::clear_weaponid() {
  weaponid_ = 0;
  clear_has_weaponid();
}
inline ::google::protobuf::int32 PlayerHitSync::weaponid() const {
  return weaponid_;
}
inline void PlayerHitSync::set_weaponid(::google::protobuf::int32 value) {
  set_has_weaponid();
  weaponid_ = value;
}

// repeated .SY.SkillHit SkillList = 4;
inline int PlayerHitSync::skilllist_size() const {
  return skilllist_.size();
}
inline void PlayerHitSync::clear_skilllist() {
  skilllist_.Clear();
}
inline const ::SY::SkillHit& PlayerHitSync::skilllist(int index) const {
  return skilllist_.Get(index);
}
inline ::SY::SkillHit* PlayerHitSync::mutable_skilllist(int index) {
  return skilllist_.Mutable(index);
}
inline ::SY::SkillHit* PlayerHitSync::add_skilllist() {
  return skilllist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SY::SkillHit >&
PlayerHitSync::skilllist() const {
  return skilllist_;
}
inline ::google::protobuf::RepeatedPtrField< ::SY::SkillHit >*
PlayerHitSync::mutable_skilllist() {
  return &skilllist_;
}

// optional int64 UserMoneyNum = 5;
inline bool PlayerHitSync::has_usermoneynum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerHitSync::set_has_usermoneynum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerHitSync::clear_has_usermoneynum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerHitSync::clear_usermoneynum() {
  usermoneynum_ = GOOGLE_LONGLONG(0);
  clear_has_usermoneynum();
}
inline ::google::protobuf::int64 PlayerHitSync::usermoneynum() const {
  return usermoneynum_;
}
inline void PlayerHitSync::set_usermoneynum(::google::protobuf::int64 value) {
  set_has_usermoneynum();
  usermoneynum_ = value;
}

// optional int64 UserTicketNum = 6;
inline bool PlayerHitSync::has_userticketnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerHitSync::set_has_userticketnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerHitSync::clear_has_userticketnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerHitSync::clear_userticketnum() {
  userticketnum_ = GOOGLE_LONGLONG(0);
  clear_has_userticketnum();
}
inline ::google::protobuf::int64 PlayerHitSync::userticketnum() const {
  return userticketnum_;
}
inline void PlayerHitSync::set_userticketnum(::google::protobuf::int64 value) {
  set_has_userticketnum();
  userticketnum_ = value;
}

// -------------------------------------------------------------------

// MonsterIncoming

// optional int32 MonsterID = 1;
inline bool MonsterIncoming::has_monsterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MonsterIncoming::set_has_monsterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MonsterIncoming::clear_has_monsterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MonsterIncoming::clear_monsterid() {
  monsterid_ = 0;
  clear_has_monsterid();
}
inline ::google::protobuf::int32 MonsterIncoming::monsterid() const {
  return monsterid_;
}
inline void MonsterIncoming::set_monsterid(::google::protobuf::int32 value) {
  set_has_monsterid();
  monsterid_ = value;
}

// optional int32 KillRate = 2;
inline bool MonsterIncoming::has_killrate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MonsterIncoming::set_has_killrate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MonsterIncoming::clear_has_killrate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MonsterIncoming::clear_killrate() {
  killrate_ = 0;
  clear_has_killrate();
}
inline ::google::protobuf::int32 MonsterIncoming::killrate() const {
  return killrate_;
}
inline void MonsterIncoming::set_killrate(::google::protobuf::int32 value) {
  set_has_killrate();
  killrate_ = value;
}

// optional int32 UserMoneyNum = 3;
inline bool MonsterIncoming::has_usermoneynum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MonsterIncoming::set_has_usermoneynum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MonsterIncoming::clear_has_usermoneynum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MonsterIncoming::clear_usermoneynum() {
  usermoneynum_ = 0;
  clear_has_usermoneynum();
}
inline ::google::protobuf::int32 MonsterIncoming::usermoneynum() const {
  return usermoneynum_;
}
inline void MonsterIncoming::set_usermoneynum(::google::protobuf::int32 value) {
  set_has_usermoneynum();
  usermoneynum_ = value;
}

// optional int32 UserTicketNum = 4;
inline bool MonsterIncoming::has_userticketnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MonsterIncoming::set_has_userticketnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MonsterIncoming::clear_has_userticketnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MonsterIncoming::clear_userticketnum() {
  userticketnum_ = 0;
  clear_has_userticketnum();
}
inline ::google::protobuf::int32 MonsterIncoming::userticketnum() const {
  return userticketnum_;
}
inline void MonsterIncoming::set_userticketnum(::google::protobuf::int32 value) {
  set_has_userticketnum();
  userticketnum_ = value;
}

// optional int32 WeaponCostEx = 5;
inline bool MonsterIncoming::has_weaponcostex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MonsterIncoming::set_has_weaponcostex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MonsterIncoming::clear_has_weaponcostex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MonsterIncoming::clear_weaponcostex() {
  weaponcostex_ = 0;
  clear_has_weaponcostex();
}
inline ::google::protobuf::int32 MonsterIncoming::weaponcostex() const {
  return weaponcostex_;
}
inline void MonsterIncoming::set_weaponcostex(::google::protobuf::int32 value) {
  set_has_weaponcostex();
  weaponcostex_ = value;
}

// -------------------------------------------------------------------

// PlayerHitIncoming

// optional int32 ChairID = 1;
inline bool PlayerHitIncoming::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerHitIncoming::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerHitIncoming::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerHitIncoming::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 PlayerHitIncoming::chairid() const {
  return chairid_;
}
inline void PlayerHitIncoming::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// repeated .SY.MonsterIncoming IncomingList = 2;
inline int PlayerHitIncoming::incominglist_size() const {
  return incominglist_.size();
}
inline void PlayerHitIncoming::clear_incominglist() {
  incominglist_.Clear();
}
inline const ::SY::MonsterIncoming& PlayerHitIncoming::incominglist(int index) const {
  return incominglist_.Get(index);
}
inline ::SY::MonsterIncoming* PlayerHitIncoming::mutable_incominglist(int index) {
  return incominglist_.Mutable(index);
}
inline ::SY::MonsterIncoming* PlayerHitIncoming::add_incominglist() {
  return incominglist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SY::MonsterIncoming >&
PlayerHitIncoming::incominglist() const {
  return incominglist_;
}
inline ::google::protobuf::RepeatedPtrField< ::SY::MonsterIncoming >*
PlayerHitIncoming::mutable_incominglist() {
  return &incominglist_;
}

// -------------------------------------------------------------------

// Point

// optional int32 x = 1;
inline bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 Point::x() const {
  return x_;
}
inline void Point::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// optional int32 y = 2;
inline bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 Point::y() const {
  return y_;
}
inline void Point::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// MonsterTrace

// optional int32 MonsterID = 1;
inline bool MonsterTrace::has_monsterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MonsterTrace::set_has_monsterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MonsterTrace::clear_has_monsterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MonsterTrace::clear_monsterid() {
  monsterid_ = 0;
  clear_has_monsterid();
}
inline ::google::protobuf::int32 MonsterTrace::monsterid() const {
  return monsterid_;
}
inline void MonsterTrace::set_monsterid(::google::protobuf::int32 value) {
  set_has_monsterid();
  monsterid_ = value;
}

// optional int32 TypeID = 2;
inline bool MonsterTrace::has_typeid_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MonsterTrace::set_has_typeid_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MonsterTrace::clear_has_typeid_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MonsterTrace::clear_typeid_() {
  typeid__ = 0;
  clear_has_typeid_();
}
inline ::google::protobuf::int32 MonsterTrace::typeid_() const {
  return typeid__;
}
inline void MonsterTrace::set_typeid_(::google::protobuf::int32 value) {
  set_has_typeid_();
  typeid__ = value;
}

// optional int32 CurHP = 3;
inline bool MonsterTrace::has_curhp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MonsterTrace::set_has_curhp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MonsterTrace::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MonsterTrace::clear_curhp() {
  curhp_ = 0;
  clear_has_curhp();
}
inline ::google::protobuf::int32 MonsterTrace::curhp() const {
  return curhp_;
}
inline void MonsterTrace::set_curhp(::google::protobuf::int32 value) {
  set_has_curhp();
  curhp_ = value;
}

// optional int32 MaxHP = 4;
inline bool MonsterTrace::has_maxhp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MonsterTrace::set_has_maxhp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MonsterTrace::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MonsterTrace::clear_maxhp() {
  maxhp_ = 0;
  clear_has_maxhp();
}
inline ::google::protobuf::int32 MonsterTrace::maxhp() const {
  return maxhp_;
}
inline void MonsterTrace::set_maxhp(::google::protobuf::int32 value) {
  set_has_maxhp();
  maxhp_ = value;
}

// optional float Speed = 5;
inline bool MonsterTrace::has_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MonsterTrace::set_has_speed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MonsterTrace::clear_has_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MonsterTrace::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline float MonsterTrace::speed() const {
  return speed_;
}
inline void MonsterTrace::set_speed(float value) {
  set_has_speed();
  speed_ = value;
}

// optional int32 RespawnIndex = 6;
inline bool MonsterTrace::has_respawnindex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MonsterTrace::set_has_respawnindex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MonsterTrace::clear_has_respawnindex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MonsterTrace::clear_respawnindex() {
  respawnindex_ = 0;
  clear_has_respawnindex();
}
inline ::google::protobuf::int32 MonsterTrace::respawnindex() const {
  return respawnindex_;
}
inline void MonsterTrace::set_respawnindex(::google::protobuf::int32 value) {
  set_has_respawnindex();
  respawnindex_ = value;
}

// repeated .SY.Point RespawnPosition = 7;
inline int MonsterTrace::respawnposition_size() const {
  return respawnposition_.size();
}
inline void MonsterTrace::clear_respawnposition() {
  respawnposition_.Clear();
}
inline const ::SY::Point& MonsterTrace::respawnposition(int index) const {
  return respawnposition_.Get(index);
}
inline ::SY::Point* MonsterTrace::mutable_respawnposition(int index) {
  return respawnposition_.Mutable(index);
}
inline ::SY::Point* MonsterTrace::add_respawnposition() {
  return respawnposition_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SY::Point >&
MonsterTrace::respawnposition() const {
  return respawnposition_;
}
inline ::google::protobuf::RepeatedPtrField< ::SY::Point >*
MonsterTrace::mutable_respawnposition() {
  return &respawnposition_;
}

// repeated .SY.Point MoveDestination = 8;
inline int MonsterTrace::movedestination_size() const {
  return movedestination_.size();
}
inline void MonsterTrace::clear_movedestination() {
  movedestination_.Clear();
}
inline const ::SY::Point& MonsterTrace::movedestination(int index) const {
  return movedestination_.Get(index);
}
inline ::SY::Point* MonsterTrace::mutable_movedestination(int index) {
  return movedestination_.Mutable(index);
}
inline ::SY::Point* MonsterTrace::add_movedestination() {
  return movedestination_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SY::Point >&
MonsterTrace::movedestination() const {
  return movedestination_;
}
inline ::google::protobuf::RepeatedPtrField< ::SY::Point >*
MonsterTrace::mutable_movedestination() {
  return &movedestination_;
}

// repeated .SY.Point EscapseDestination = 9;
inline int MonsterTrace::escapsedestination_size() const {
  return escapsedestination_.size();
}
inline void MonsterTrace::clear_escapsedestination() {
  escapsedestination_.Clear();
}
inline const ::SY::Point& MonsterTrace::escapsedestination(int index) const {
  return escapsedestination_.Get(index);
}
inline ::SY::Point* MonsterTrace::mutable_escapsedestination(int index) {
  return escapsedestination_.Mutable(index);
}
inline ::SY::Point* MonsterTrace::add_escapsedestination() {
  return escapsedestination_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SY::Point >&
MonsterTrace::escapsedestination() const {
  return escapsedestination_;
}
inline ::google::protobuf::RepeatedPtrField< ::SY::Point >*
MonsterTrace::mutable_escapsedestination() {
  return &escapsedestination_;
}

// optional float DelayMoveTime = 10;
inline bool MonsterTrace::has_delaymovetime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MonsterTrace::set_has_delaymovetime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MonsterTrace::clear_has_delaymovetime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MonsterTrace::clear_delaymovetime() {
  delaymovetime_ = 0;
  clear_has_delaymovetime();
}
inline float MonsterTrace::delaymovetime() const {
  return delaymovetime_;
}
inline void MonsterTrace::set_delaymovetime(float value) {
  set_has_delaymovetime();
  delaymovetime_ = value;
}

// optional float DelayEscapeTime = 11;
inline bool MonsterTrace::has_delayescapetime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MonsterTrace::set_has_delayescapetime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MonsterTrace::clear_has_delayescapetime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MonsterTrace::clear_delayescapetime() {
  delayescapetime_ = 0;
  clear_has_delayescapetime();
}
inline float MonsterTrace::delayescapetime() const {
  return delayescapetime_;
}
inline void MonsterTrace::set_delayescapetime(float value) {
  set_has_delayescapetime();
  delayescapetime_ = value;
}

// optional float SpeedRate = 12;
inline bool MonsterTrace::has_speedrate() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MonsterTrace::set_has_speedrate() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MonsterTrace::clear_has_speedrate() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MonsterTrace::clear_speedrate() {
  speedrate_ = 0;
  clear_has_speedrate();
}
inline float MonsterTrace::speedrate() const {
  return speedrate_;
}
inline void MonsterTrace::set_speedrate(float value) {
  set_has_speedrate();
  speedrate_ = value;
}

// -------------------------------------------------------------------

// MonsterTraces

// required bool IsGroup = 1;
inline bool MonsterTraces::has_isgroup() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MonsterTraces::set_has_isgroup() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MonsterTraces::clear_has_isgroup() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MonsterTraces::clear_isgroup() {
  isgroup_ = false;
  clear_has_isgroup();
}
inline bool MonsterTraces::isgroup() const {
  return isgroup_;
}
inline void MonsterTraces::set_isgroup(bool value) {
  set_has_isgroup();
  isgroup_ = value;
}

// repeated .SY.MonsterTrace Traces = 2;
inline int MonsterTraces::traces_size() const {
  return traces_.size();
}
inline void MonsterTraces::clear_traces() {
  traces_.Clear();
}
inline const ::SY::MonsterTrace& MonsterTraces::traces(int index) const {
  return traces_.Get(index);
}
inline ::SY::MonsterTrace* MonsterTraces::mutable_traces(int index) {
  return traces_.Mutable(index);
}
inline ::SY::MonsterTrace* MonsterTraces::add_traces() {
  return traces_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SY::MonsterTrace >&
MonsterTraces::traces() const {
  return traces_;
}
inline ::google::protobuf::RepeatedPtrField< ::SY::MonsterTrace >*
MonsterTraces::mutable_traces() {
  return &traces_;
}

// -------------------------------------------------------------------

// ChangeScene

// required int32 SceneIndex = 1;
inline bool ChangeScene::has_sceneindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeScene::set_has_sceneindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeScene::clear_has_sceneindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeScene::clear_sceneindex() {
  sceneindex_ = 0;
  clear_has_sceneindex();
}
inline ::google::protobuf::int32 ChangeScene::sceneindex() const {
  return sceneindex_;
}
inline void ChangeScene::set_sceneindex(::google::protobuf::int32 value) {
  set_has_sceneindex();
  sceneindex_ = value;
}

// -------------------------------------------------------------------

// AllMonsterId

// optional int32 id = 1;
inline bool AllMonsterId::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllMonsterId::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllMonsterId::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllMonsterId::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 AllMonsterId::id() const {
  return id_;
}
inline void AllMonsterId::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// WildSkillStatus

// optional int32 wild_skill_status = 1;
inline bool WildSkillStatus::has_wild_skill_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WildSkillStatus::set_has_wild_skill_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WildSkillStatus::clear_has_wild_skill_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WildSkillStatus::clear_wild_skill_status() {
  wild_skill_status_ = 0;
  clear_has_wild_skill_status();
}
inline ::google::protobuf::int32 WildSkillStatus::wild_skill_status() const {
  return wild_skill_status_;
}
inline void WildSkillStatus::set_wild_skill_status(::google::protobuf::int32 value) {
  set_has_wild_skill_status();
  wild_skill_status_ = value;
}

// optional int32 remain_time = 2;
inline bool WildSkillStatus::has_remain_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WildSkillStatus::set_has_remain_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WildSkillStatus::clear_has_remain_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WildSkillStatus::clear_remain_time() {
  remain_time_ = 0;
  clear_has_remain_time();
}
inline ::google::protobuf::int32 WildSkillStatus::remain_time() const {
  return remain_time_;
}
inline void WildSkillStatus::set_remain_time(::google::protobuf::int32 value) {
  set_has_remain_time();
  remain_time_ = value;
}

// optional float wild_skill_cost_rate = 3;
inline bool WildSkillStatus::has_wild_skill_cost_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WildSkillStatus::set_has_wild_skill_cost_rate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WildSkillStatus::clear_has_wild_skill_cost_rate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WildSkillStatus::clear_wild_skill_cost_rate() {
  wild_skill_cost_rate_ = 0;
  clear_has_wild_skill_cost_rate();
}
inline float WildSkillStatus::wild_skill_cost_rate() const {
  return wild_skill_cost_rate_;
}
inline void WildSkillStatus::set_wild_skill_cost_rate(float value) {
  set_has_wild_skill_cost_rate();
  wild_skill_cost_rate_ = value;
}

// repeated .SY.AllMonsterId wild_monster_id = 4;
inline int WildSkillStatus::wild_monster_id_size() const {
  return wild_monster_id_.size();
}
inline void WildSkillStatus::clear_wild_monster_id() {
  wild_monster_id_.Clear();
}
inline const ::SY::AllMonsterId& WildSkillStatus::wild_monster_id(int index) const {
  return wild_monster_id_.Get(index);
}
inline ::SY::AllMonsterId* WildSkillStatus::mutable_wild_monster_id(int index) {
  return wild_monster_id_.Mutable(index);
}
inline ::SY::AllMonsterId* WildSkillStatus::add_wild_monster_id() {
  return wild_monster_id_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SY::AllMonsterId >&
WildSkillStatus::wild_monster_id() const {
  return wild_monster_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::SY::AllMonsterId >*
WildSkillStatus::mutable_wild_monster_id() {
  return &wild_monster_id_;
}

// -------------------------------------------------------------------

// WildSkillWeaponCostModify

// optional int32 wild_skill_weapon_cost_modify = 1;
inline bool WildSkillWeaponCostModify::has_wild_skill_weapon_cost_modify() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WildSkillWeaponCostModify::set_has_wild_skill_weapon_cost_modify() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WildSkillWeaponCostModify::clear_has_wild_skill_weapon_cost_modify() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WildSkillWeaponCostModify::clear_wild_skill_weapon_cost_modify() {
  wild_skill_weapon_cost_modify_ = 0;
  clear_has_wild_skill_weapon_cost_modify();
}
inline ::google::protobuf::int32 WildSkillWeaponCostModify::wild_skill_weapon_cost_modify() const {
  return wild_skill_weapon_cost_modify_;
}
inline void WildSkillWeaponCostModify::set_wild_skill_weapon_cost_modify(::google::protobuf::int32 value) {
  set_has_wild_skill_weapon_cost_modify();
  wild_skill_weapon_cost_modify_ = value;
}

// -------------------------------------------------------------------

// BroadcastS2C

// optional string Text = 1;
inline bool BroadcastS2C::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BroadcastS2C::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BroadcastS2C::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BroadcastS2C::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& BroadcastS2C::text() const {
  return *text_;
}
inline void BroadcastS2C::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void BroadcastS2C::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void BroadcastS2C::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BroadcastS2C::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* BroadcastS2C::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BroadcastS2C::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string UserName = 2;
inline bool BroadcastS2C::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BroadcastS2C::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BroadcastS2C::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BroadcastS2C::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& BroadcastS2C::username() const {
  return *username_;
}
inline void BroadcastS2C::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void BroadcastS2C::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void BroadcastS2C::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BroadcastS2C::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* BroadcastS2C::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BroadcastS2C::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 WeaponID = 3;
inline bool BroadcastS2C::has_weaponid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BroadcastS2C::set_has_weaponid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BroadcastS2C::clear_has_weaponid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BroadcastS2C::clear_weaponid() {
  weaponid_ = 0;
  clear_has_weaponid();
}
inline ::google::protobuf::int32 BroadcastS2C::weaponid() const {
  return weaponid_;
}
inline void BroadcastS2C::set_weaponid(::google::protobuf::int32 value) {
  set_has_weaponid();
  weaponid_ = value;
}

// optional string MonsterName = 4;
inline bool BroadcastS2C::has_monstername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BroadcastS2C::set_has_monstername() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BroadcastS2C::clear_has_monstername() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BroadcastS2C::clear_monstername() {
  if (monstername_ != &::google::protobuf::internal::kEmptyString) {
    monstername_->clear();
  }
  clear_has_monstername();
}
inline const ::std::string& BroadcastS2C::monstername() const {
  return *monstername_;
}
inline void BroadcastS2C::set_monstername(const ::std::string& value) {
  set_has_monstername();
  if (monstername_ == &::google::protobuf::internal::kEmptyString) {
    monstername_ = new ::std::string;
  }
  monstername_->assign(value);
}
inline void BroadcastS2C::set_monstername(const char* value) {
  set_has_monstername();
  if (monstername_ == &::google::protobuf::internal::kEmptyString) {
    monstername_ = new ::std::string;
  }
  monstername_->assign(value);
}
inline void BroadcastS2C::set_monstername(const char* value, size_t size) {
  set_has_monstername();
  if (monstername_ == &::google::protobuf::internal::kEmptyString) {
    monstername_ = new ::std::string;
  }
  monstername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BroadcastS2C::mutable_monstername() {
  set_has_monstername();
  if (monstername_ == &::google::protobuf::internal::kEmptyString) {
    monstername_ = new ::std::string;
  }
  return monstername_;
}
inline ::std::string* BroadcastS2C::release_monstername() {
  clear_has_monstername();
  if (monstername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = monstername_;
    monstername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BroadcastS2C::set_allocated_monstername(::std::string* monstername) {
  if (monstername_ != &::google::protobuf::internal::kEmptyString) {
    delete monstername_;
  }
  if (monstername) {
    set_has_monstername();
    monstername_ = monstername;
  } else {
    clear_has_monstername();
    monstername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 RewardMoneyNum = 5;
inline bool BroadcastS2C::has_rewardmoneynum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BroadcastS2C::set_has_rewardmoneynum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BroadcastS2C::clear_has_rewardmoneynum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BroadcastS2C::clear_rewardmoneynum() {
  rewardmoneynum_ = 0;
  clear_has_rewardmoneynum();
}
inline ::google::protobuf::int32 BroadcastS2C::rewardmoneynum() const {
  return rewardmoneynum_;
}
inline void BroadcastS2C::set_rewardmoneynum(::google::protobuf::int32 value) {
  set_has_rewardmoneynum();
  rewardmoneynum_ = value;
}

// optional int32 RewardTicketNum = 6;
inline bool BroadcastS2C::has_rewardticketnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BroadcastS2C::set_has_rewardticketnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BroadcastS2C::clear_has_rewardticketnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BroadcastS2C::clear_rewardticketnum() {
  rewardticketnum_ = 0;
  clear_has_rewardticketnum();
}
inline ::google::protobuf::int32 BroadcastS2C::rewardticketnum() const {
  return rewardticketnum_;
}
inline void BroadcastS2C::set_rewardticketnum(::google::protobuf::int32 value) {
  set_has_rewardticketnum();
  rewardticketnum_ = value;
}

// -------------------------------------------------------------------

// ReturnUserMoney

// optional int32 ChairID = 1;
inline bool ReturnUserMoney::has_chairid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReturnUserMoney::set_has_chairid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReturnUserMoney::clear_has_chairid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReturnUserMoney::clear_chairid() {
  chairid_ = 0;
  clear_has_chairid();
}
inline ::google::protobuf::int32 ReturnUserMoney::chairid() const {
  return chairid_;
}
inline void ReturnUserMoney::set_chairid(::google::protobuf::int32 value) {
  set_has_chairid();
  chairid_ = value;
}

// optional .SY.ReturnReasonType ReturnReason = 2;
inline bool ReturnUserMoney::has_returnreason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReturnUserMoney::set_has_returnreason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReturnUserMoney::clear_has_returnreason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReturnUserMoney::clear_returnreason() {
  returnreason_ = 0;
  clear_has_returnreason();
}
inline ::SY::ReturnReasonType ReturnUserMoney::returnreason() const {
  return static_cast< ::SY::ReturnReasonType >(returnreason_);
}
inline void ReturnUserMoney::set_returnreason(::SY::ReturnReasonType value) {
  assert(::SY::ReturnReasonType_IsValid(value));
  set_has_returnreason();
  returnreason_ = value;
}

// optional int32 ReturnData = 3;
inline bool ReturnUserMoney::has_returndata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReturnUserMoney::set_has_returndata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReturnUserMoney::clear_has_returndata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReturnUserMoney::clear_returndata() {
  returndata_ = 0;
  clear_has_returndata();
}
inline ::google::protobuf::int32 ReturnUserMoney::returndata() const {
  return returndata_;
}
inline void ReturnUserMoney::set_returndata(::google::protobuf::int32 value) {
  set_has_returndata();
  returndata_ = value;
}

// optional int64 ReturnUserMoneyNum = 4;
inline bool ReturnUserMoney::has_returnusermoneynum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReturnUserMoney::set_has_returnusermoneynum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReturnUserMoney::clear_has_returnusermoneynum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReturnUserMoney::clear_returnusermoneynum() {
  returnusermoneynum_ = GOOGLE_LONGLONG(0);
  clear_has_returnusermoneynum();
}
inline ::google::protobuf::int64 ReturnUserMoney::returnusermoneynum() const {
  return returnusermoneynum_;
}
inline void ReturnUserMoney::set_returnusermoneynum(::google::protobuf::int64 value) {
  set_has_returnusermoneynum();
  returnusermoneynum_ = value;
}

// -------------------------------------------------------------------

// HallGsAdditionalGameData1Rsp

// required uint32 index = 1;
inline bool HallGsAdditionalGameData1Rsp::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HallGsAdditionalGameData1Rsp::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HallGsAdditionalGameData1Rsp::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HallGsAdditionalGameData1Rsp::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 HallGsAdditionalGameData1Rsp::index() const {
  return index_;
}
inline void HallGsAdditionalGameData1Rsp::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// required int32 user_dbid = 2;
inline bool HallGsAdditionalGameData1Rsp::has_user_dbid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HallGsAdditionalGameData1Rsp::set_has_user_dbid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HallGsAdditionalGameData1Rsp::clear_has_user_dbid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HallGsAdditionalGameData1Rsp::clear_user_dbid() {
  user_dbid_ = 0;
  clear_has_user_dbid();
}
inline ::google::protobuf::int32 HallGsAdditionalGameData1Rsp::user_dbid() const {
  return user_dbid_;
}
inline void HallGsAdditionalGameData1Rsp::set_user_dbid(::google::protobuf::int32 value) {
  set_has_user_dbid();
  user_dbid_ = value;
}

// optional int32 type = 3;
inline bool HallGsAdditionalGameData1Rsp::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HallGsAdditionalGameData1Rsp::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HallGsAdditionalGameData1Rsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HallGsAdditionalGameData1Rsp::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 HallGsAdditionalGameData1Rsp::type() const {
  return type_;
}
inline void HallGsAdditionalGameData1Rsp::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 size = 4;
inline bool HallGsAdditionalGameData1Rsp::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HallGsAdditionalGameData1Rsp::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HallGsAdditionalGameData1Rsp::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HallGsAdditionalGameData1Rsp::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 HallGsAdditionalGameData1Rsp::size() const {
  return size_;
}
inline void HallGsAdditionalGameData1Rsp::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// optional string add_game_data = 5;
inline bool HallGsAdditionalGameData1Rsp::has_add_game_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HallGsAdditionalGameData1Rsp::set_has_add_game_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HallGsAdditionalGameData1Rsp::clear_has_add_game_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HallGsAdditionalGameData1Rsp::clear_add_game_data() {
  if (add_game_data_ != &::google::protobuf::internal::kEmptyString) {
    add_game_data_->clear();
  }
  clear_has_add_game_data();
}
inline const ::std::string& HallGsAdditionalGameData1Rsp::add_game_data() const {
  return *add_game_data_;
}
inline void HallGsAdditionalGameData1Rsp::set_add_game_data(const ::std::string& value) {
  set_has_add_game_data();
  if (add_game_data_ == &::google::protobuf::internal::kEmptyString) {
    add_game_data_ = new ::std::string;
  }
  add_game_data_->assign(value);
}
inline void HallGsAdditionalGameData1Rsp::set_add_game_data(const char* value) {
  set_has_add_game_data();
  if (add_game_data_ == &::google::protobuf::internal::kEmptyString) {
    add_game_data_ = new ::std::string;
  }
  add_game_data_->assign(value);
}
inline void HallGsAdditionalGameData1Rsp::set_add_game_data(const char* value, size_t size) {
  set_has_add_game_data();
  if (add_game_data_ == &::google::protobuf::internal::kEmptyString) {
    add_game_data_ = new ::std::string;
  }
  add_game_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HallGsAdditionalGameData1Rsp::mutable_add_game_data() {
  set_has_add_game_data();
  if (add_game_data_ == &::google::protobuf::internal::kEmptyString) {
    add_game_data_ = new ::std::string;
  }
  return add_game_data_;
}
inline ::std::string* HallGsAdditionalGameData1Rsp::release_add_game_data() {
  clear_has_add_game_data();
  if (add_game_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = add_game_data_;
    add_game_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HallGsAdditionalGameData1Rsp::set_allocated_add_game_data(::std::string* add_game_data) {
  if (add_game_data_ != &::google::protobuf::internal::kEmptyString) {
    delete add_game_data_;
  }
  if (add_game_data) {
    set_has_add_game_data();
    add_game_data_ = add_game_data;
  } else {
    clear_has_add_game_data();
    add_game_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AdditionalGameDataRsp

// required int32 result = 1;
inline bool AdditionalGameDataRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdditionalGameDataRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdditionalGameDataRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdditionalGameDataRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 AdditionalGameDataRsp::result() const {
  return result_;
}
inline void AdditionalGameDataRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required int32 game_id = 2;
inline bool AdditionalGameDataRsp::has_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdditionalGameDataRsp::set_has_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdditionalGameDataRsp::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdditionalGameDataRsp::clear_game_id() {
  game_id_ = 0;
  clear_has_game_id();
}
inline ::google::protobuf::int32 AdditionalGameDataRsp::game_id() const {
  return game_id_;
}
inline void AdditionalGameDataRsp::set_game_id(::google::protobuf::int32 value) {
  set_has_game_id();
  game_id_ = value;
}

// required int32 user_dbid = 3;
inline bool AdditionalGameDataRsp::has_user_dbid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AdditionalGameDataRsp::set_has_user_dbid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AdditionalGameDataRsp::clear_has_user_dbid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AdditionalGameDataRsp::clear_user_dbid() {
  user_dbid_ = 0;
  clear_has_user_dbid();
}
inline ::google::protobuf::int32 AdditionalGameDataRsp::user_dbid() const {
  return user_dbid_;
}
inline void AdditionalGameDataRsp::set_user_dbid(::google::protobuf::int32 value) {
  set_has_user_dbid();
  user_dbid_ = value;
}

// optional string additional_data = 4;
inline bool AdditionalGameDataRsp::has_additional_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AdditionalGameDataRsp::set_has_additional_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AdditionalGameDataRsp::clear_has_additional_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AdditionalGameDataRsp::clear_additional_data() {
  if (additional_data_ != &::google::protobuf::internal::kEmptyString) {
    additional_data_->clear();
  }
  clear_has_additional_data();
}
inline const ::std::string& AdditionalGameDataRsp::additional_data() const {
  return *additional_data_;
}
inline void AdditionalGameDataRsp::set_additional_data(const ::std::string& value) {
  set_has_additional_data();
  if (additional_data_ == &::google::protobuf::internal::kEmptyString) {
    additional_data_ = new ::std::string;
  }
  additional_data_->assign(value);
}
inline void AdditionalGameDataRsp::set_additional_data(const char* value) {
  set_has_additional_data();
  if (additional_data_ == &::google::protobuf::internal::kEmptyString) {
    additional_data_ = new ::std::string;
  }
  additional_data_->assign(value);
}
inline void AdditionalGameDataRsp::set_additional_data(const char* value, size_t size) {
  set_has_additional_data();
  if (additional_data_ == &::google::protobuf::internal::kEmptyString) {
    additional_data_ = new ::std::string;
  }
  additional_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdditionalGameDataRsp::mutable_additional_data() {
  set_has_additional_data();
  if (additional_data_ == &::google::protobuf::internal::kEmptyString) {
    additional_data_ = new ::std::string;
  }
  return additional_data_;
}
inline ::std::string* AdditionalGameDataRsp::release_additional_data() {
  clear_has_additional_data();
  if (additional_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = additional_data_;
    additional_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdditionalGameDataRsp::set_allocated_additional_data(::std::string* additional_data) {
  if (additional_data_ != &::google::protobuf::internal::kEmptyString) {
    delete additional_data_;
  }
  if (additional_data) {
    set_has_additional_data();
    additional_data_ = additional_data;
  } else {
    clear_has_additional_data();
    additional_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RefreshUserFishExp

// required int32 userID = 1;
inline bool RefreshUserFishExp::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RefreshUserFishExp::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RefreshUserFishExp::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RefreshUserFishExp::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 RefreshUserFishExp::userid() const {
  return userid_;
}
inline void RefreshUserFishExp::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// required int32 level = 2;
inline bool RefreshUserFishExp::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RefreshUserFishExp::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RefreshUserFishExp::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RefreshUserFishExp::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 RefreshUserFishExp::level() const {
  return level_;
}
inline void RefreshUserFishExp::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional uint64 exp = 3;
inline bool RefreshUserFishExp::has_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RefreshUserFishExp::set_has_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RefreshUserFishExp::clear_has_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RefreshUserFishExp::clear_exp() {
  exp_ = GOOGLE_ULONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::uint64 RefreshUserFishExp::exp() const {
  return exp_;
}
inline void RefreshUserFishExp::set_exp(::google::protobuf::uint64 value) {
  set_has_exp();
  exp_ = value;
}

// -------------------------------------------------------------------

// ArenaInfo

// required int32 id = 1;
inline bool ArenaInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArenaInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArenaInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArenaInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ArenaInfo::id() const {
  return id_;
}
inline void ArenaInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 game_id = 2;
inline bool ArenaInfo::has_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArenaInfo::set_has_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArenaInfo::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArenaInfo::clear_game_id() {
  game_id_ = 0;
  clear_has_game_id();
}
inline ::google::protobuf::int32 ArenaInfo::game_id() const {
  return game_id_;
}
inline void ArenaInfo::set_game_id(::google::protobuf::int32 value) {
  set_has_game_id();
  game_id_ = value;
}

// required int32 type = 3;
inline bool ArenaInfo::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArenaInfo::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArenaInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArenaInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ArenaInfo::type() const {
  return type_;
}
inline void ArenaInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 min_money = 4;
inline bool ArenaInfo::has_min_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ArenaInfo::set_has_min_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ArenaInfo::clear_has_min_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ArenaInfo::clear_min_money() {
  min_money_ = 0;
  clear_has_min_money();
}
inline ::google::protobuf::int32 ArenaInfo::min_money() const {
  return min_money_;
}
inline void ArenaInfo::set_min_money(::google::protobuf::int32 value) {
  set_has_min_money();
  min_money_ = value;
}

// optional int64 rule = 5;
inline bool ArenaInfo::has_rule() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ArenaInfo::set_has_rule() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ArenaInfo::clear_has_rule() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ArenaInfo::clear_rule() {
  rule_ = GOOGLE_LONGLONG(0);
  clear_has_rule();
}
inline ::google::protobuf::int64 ArenaInfo::rule() const {
  return rule_;
}
inline void ArenaInfo::set_rule(::google::protobuf::int64 value) {
  set_has_rule();
  rule_ = value;
}

// optional int32 level = 6;
inline bool ArenaInfo::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ArenaInfo::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ArenaInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ArenaInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 ArenaInfo::level() const {
  return level_;
}
inline void ArenaInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional string name = 7;
inline bool ArenaInfo::has_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ArenaInfo::set_has_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ArenaInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ArenaInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ArenaInfo::name() const {
  return *name_;
}
inline void ArenaInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ArenaInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ArenaInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArenaInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ArenaInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArenaInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SY

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SY::SkillStatus>() {
  return ::SY::SkillStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SY::ReturnReasonType>() {
  return ::SY::ReturnReasonType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GameMessage_2eproto__INCLUDED
